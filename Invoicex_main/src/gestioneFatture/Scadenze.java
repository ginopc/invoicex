/** * Invoicex * Copyright (c) 2005-2016 Marco Ceccarelli, Tnx srl * * Questo software è soggetto, e deve essere distribuito con la licenza   * GNU General Public License, Version 2. La licenza accompagna il software * o potete trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the * GNU General Public License, Version 2. The license should have * accompanied the software or you may obtain a copy of the license * from the Free Software Foundation at http://www.fsf.org . *  * -- * Marco Ceccarelli (m.ceccarelli@tnx.it) * Tnx snc (http://www.tnx.it) * */package gestioneFatture;import gestioneFatture.logic.provvigioni.ProvvigioniFattura;import it.tnx.Db;import it.tnx.commons.CastUtils;import it.tnx.commons.DbUtils;import it.tnx.commons.FormatUtils;import it.tnx.commons.SwingUtils;import it.tnx.commons.cu;import it.tnx.commons.dbu;import it.tnx.invoicex.InvoicexUtil;import java.sql.Connection;import java.sql.ResultSet;import java.sql.Types;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.Map;import java.util.Vector;import javax.swing.JInternalFrame;public class Scadenze {    public String documento_tipo;    public Integer documento_id;//    public String documento_serie;//    public int documento_numero;//    public int documento_anno;    public Date documento_data;    private String pagamento_tipo;    private boolean flag_pagata;    private double documento_importo;    private double documento_imponibile;    private double documento_iva;    private double totale_scadenze;    private int numero; //per calcolare il progressivo delle scadenze    double quadratura = 0;    java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("dd/MM/yy");    Connection conn = null;    public Double acconto = null;        double totale_doc_2d = 0d;    double totale_sca_2d = 0d;    /** Creates a new instance of Scadenze */    public Scadenze(String documento_tipo, Integer documento_id, String pagamento_tipo) {        this(null, documento_tipo, documento_id, pagamento_tipo, null);    }    public Scadenze(Connection conn, String documento_tipo, Integer documento_id, String pagamento_tipo) {        this(conn, documento_tipo, documento_id, pagamento_tipo, null);    }    public Scadenze(String documento_tipo, Integer documento_id, String pagamento_tipo, Date documento_data) {        this(null, documento_tipo, documento_id, pagamento_tipo, documento_data);    }    public Scadenze(Connection conn, String documento_tipo, Integer documento_id, String pagamento_tipo, Date documento_data) {        this.conn = conn;        String sql;        this.documento_tipo = documento_tipo;        this.documento_id = documento_id;        this.pagamento_tipo = pagamento_tipo;        this.documento_data = documento_data;        sql = "";        if (pagamento_tipo == null || acconto == null) {            if (documento_tipo.equals(Db.TIPO_DOCUMENTO_DDT)) {                sql = "Select pagamento, acconto from test_ddt";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA)) {                sql = "Select pagamento, acconto from test_fatt";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {                sql = "Select pagamento, acconto from test_fatt_acquisto";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE)) {                sql = "Select pagamento, acconto from test_ordi";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO)) {                sql = "Select pagamento, acconto from test_ordi_acquisto";            }            sql += " where id = " + documento_id;            ResultSet tempDocuPagamento = Db.openResultSet(conn, sql);            try {                tempDocuPagamento.next();                if (pagamento_tipo == null) {                    pagamento_tipo = tempDocuPagamento.getString(1);                }                acconto = tempDocuPagamento.getDouble(2);            } catch (Exception err) {                err.printStackTrace();            }        }        if (pagamento_tipo.length() > 0) {            sql = "";            if (documento_tipo.equals(Db.TIPO_DOCUMENTO_DDT)) {                sql = "Select * from test_ddt";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA)) {                sql = "Select * from test_fatt";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {                sql = "Select * from test_fatt_acquisto";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE)) {                sql = "Select * from test_ordi";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO)) {                sql = "Select * from test_ordi_acquisto";            }            sql += " where id = " + documento_id;            System.out.println("sql importo scadenze = " + sql);            ResultSet tempDocu = Db.openResultSet(conn, sql);            try {                tempDocu.next();                if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {                    documento_importo = tempDocu.getDouble("importo");                    documento_imponibile = tempDocu.getDouble("imponibile");                    documento_iva = tempDocu.getDouble("iva");                    try {                        if (tempDocu.getDouble("totale_da_pagare") != 0) {                            this.documento_importo = tempDocu.getDouble("totale_da_pagare");                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                    try {                        if (tempDocu.getDouble("totale_da_pagare_finale") != 0 || cu.d0(acconto) != 0) {                            this.documento_importo = tempDocu.getDouble("totale_da_pagare_finale");                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                } else {                    documento_importo = tempDocu.getDouble("totale");                    documento_imponibile = tempDocu.getDouble("totale_imponibile");                    documento_iva = tempDocu.getDouble("totale_iva");                    if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA)) {                        if (tempDocu.getDouble("totale_da_pagare") > 0) {                            this.documento_importo = tempDocu.getDouble("totale_da_pagare");                        }                    }                    try {                        if (tempDocu.getDouble("totale_da_pagare_finale") != 0 || cu.d0(acconto) != 0) {                            this.documento_importo = tempDocu.getDouble("totale_da_pagare_finale");                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                                    }            } catch (Exception err) {                err.printStackTrace();                System.out.println("sql:" + sql);            }            sql = "Select * from scadenze";            sql += " where documento_tipo = " + Db.pc(documento_tipo, Types.VARCHAR);            sql += " and id_doc = " + documento_id;            ResultSet tempScad = Db.openResultSet(conn, sql);            //controllo se ci sono gi??? scadenze altrimenti le provo a generare            try {                if (tempScad.next()) {                    // c'??? almeno una scadenza, allora niente                } else {                    //non ci sono scadenze, chiedo se si vogliono generare                    //int ret = javax.swing.JOptionPane.showConfirmDialog(null, "Non ci sono scadenze, generarle automaticamente in base al tipo di pagamento?","Attenzione",javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);                    //if (ret == javax.swing.JOptionPane.YES_OPTION) {                    //generazione scadenze                    generaScadenze(conn);                    //}                }            } catch (Exception err) {                err.printStackTrace();            }        }    }    public boolean totaliDiversi() {        System.err.println("documento_importo = " + documento_importo);        String sql = "Select sum(importo) as tot from scadenze";        sql += " where documento_tipo = " + Db.pc(documento_tipo, Types.VARCHAR);        sql += " and id_doc = " + documento_id;        sql += " and IFNULL(flag_acconto,'') != 'S'";        ResultSet tempScad = null;        totale_scadenze = 0;        try {            System.out.println("sql = " + sql);            tempScad = DbUtils.tryOpenResultSet(Db.getConn(), sql);            if (tempScad.next()) {                totale_scadenze = tempScad.getDouble(1);                System.err.println("totale_scadenze = " + totale_scadenze);                                if (totale_scadenze == 0) {                    //controllo che se il pagamento non deve generare scadenze ed il totale scadenze è 0 va bene lo stesso                    boolean pag_ha_scadenze = cu.i0(dbu.getObject(Db.getConn(), "select INSTR(CONCAT(`IMMEDIATO`,`30`,`60`,`90`,`120`,`150`,`180`,`210`,`240`,`270`,`300`,`330`,`360`), 'S') from pagamenti where codice = " + dbu.sql(pagamento_tipo))) > 0;                    if (!pag_ha_scadenze) return false;                }            }        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                tempScad.close();            } catch (Exception e) {            }        }        totale_doc_2d = FormatUtils.round(documento_importo, 2);        System.err.println("totale_doc_2d = " + totale_doc_2d);        totale_sca_2d = FormatUtils.round(totale_scadenze, 2);        System.err.println("totale_sca_2d = " + totale_sca_2d);        if (totale_doc_2d != totale_sca_2d) {            return true;        } else {            return false;        }    }    public void generaProvvigioni() {        generaProvvigioni(null, null, null, null, null, null, null);    }    public void generaProvvigioni(Date oldDataScadenza, Date nuovaDataScadenza, Double oldImporto, Double nuovoImporto, Boolean genera_solo_se_necessario, String oldStato, String newStato) {        boolean continuare = true;        if (genera_solo_se_necessario != null && genera_solo_se_necessario) {            if (oldDataScadenza.equals(nuovaDataScadenza) && nuovoImporto.equals(oldImporto)) {                System.out.println("non genero le provvigioni perchè non necessario: " + oldDataScadenza + "=" + nuovaDataScadenza + " e " + oldImporto + "=" + nuovoImporto);                //controllo se era pagata ed è stata messa come non pagata o parzialmente pagata e c'era una provvigione pagata avverto                if (oldStato != null && newStato != null && oldStato.equals("S") && (newStato.equals("P") || newStato.equals("N"))) {                    String sql = "select * from provvigioni";                    sql += " where documento_tipo = " + Db.pc(this.documento_tipo, Types.VARCHAR);                    sql += " and id_doc = " + documento_id;                    sql += " and data_scadenza = " + Db.pc(nuovaDataScadenza, Types.DATE);                    sql += " and pagata = 'S'";                    String newStatoDescr = "";                    if (newStato.equals("P")) newStatoDescr = "Pagata parzialmente";                    if (newStato.equals("N")) newStatoDescr = "NON Pagata";                    try {                        if (DbUtils.containRows(Db.getConn(), sql)) {                            SwingUtils.showInfoMessage(main.getPadre(), "Attenzione hai messo come '" + newStatoDescr + "' una scadenza per la quale la provvigione è segnata come pagata !");                        }                    } catch (Exception e) {                        e.printStackTrace();                    }                }                continuare = false;            }        }        if (continuare) {            try {                String tab = "";                if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA)) {                    int agente_codice = CastUtils.toInteger(DbUtils.getObject(Db.getConn(), "select agente_codice from test_fatt where id = " + documento_id));                    double agente_perc = CastUtils.toDouble(DbUtils.getObject(Db.getConn(), "select agente_percentuale from test_fatt where id = " + documento_id));                    ProvvigioniFattura provvigioni = new ProvvigioniFattura(documento_id, agente_codice, agente_perc);                    boolean ret = provvigioni.generaProvvigioni();                    System.out.println("esito genera provvigioni da scadenze:" + ret + " : " + provvigioni.ret);                } else {                    System.out.println("Non genero le provvigioni perchè non fattura: " + documento_tipo);                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    public boolean generaScadenze() {        return generaScadenze(null);    }        public boolean generaScadenze(Connection conn) {        return generaScadenze(conn, true);    }        public boolean generaScadenze(Connection conn, boolean avvisi) {        String sql;        this.numero = 0;        //seleziono numero ultimo +1;        java.sql.Statement stat;        ResultSet resu;        Byte giornoMese = null;        sql = "";        if (pagamento_tipo == null) {            if (documento_tipo.equals(Db.TIPO_DOCUMENTO_DDT)) {                sql = "Select pagamento, acconto from test_ddt";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA)) {                sql = "Select pagamento, acconto from test_fatt";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {                sql = "Select pagamento, acconto from test_fatt_acquisto";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE)) {                sql = "Select pagamento, acconto from test_ordi";            } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO)) {                sql = "Select pagamento, acconto from test_ordi_acquisto";            }            sql += " where id = " + documento_id;            ResultSet tempDocuPagamento = Db.openResultSet(conn, sql);            try {                tempDocuPagamento.next();                pagamento_tipo = tempDocuPagamento.getString(1);                acconto = tempDocuPagamento.getDouble(2);            } catch (Exception err) {                err.printStackTrace();            }        }        if (pagamento_tipo == null) {            if (avvisi) {                SwingUtils.showErrorMessage(main.getPadre(), "Scadenze di pagamento non generate perchè vuoto il tipo di pagamento");            }            return false;        }        sql = "select * from pagamenti";        sql += " where codice = " + Db.pc(this.pagamento_tipo, Types.VARCHAR);        ResultSet tempPaga = Db.openResultSet(conn, sql);        try {            if (tempPaga.next()) {                //mi memorizzo se flaggare come gia' pagate no                if (Db.nz(tempPaga.getString("flag_pagata"), "").equalsIgnoreCase("S")) {                    this.flag_pagata = true;                } else {                    this.flag_pagata = false;                }                //controllo che non ci siano scadenze gia' stampate in distinta                if (conn != null) {                    stat = conn.createStatement();                } else {                    stat = Db.getConn().createStatement();                }                sql = "select id, data_scadenza, importo, distinta from scadenze";                sql += " where documento_tipo = " + Db.pc(this.documento_tipo, Types.VARCHAR);                sql += " and id_doc = " + documento_id;                sql += " and distinta is not null";                resu = stat.executeQuery(sql);                if (resu.next() == true) {                    //storico                    Map m = InvoicexUtil.getSerieNumeroAnno(documento_tipo, documento_id);                    Storico.scrivi("Genera Scadenze Controllo", "Documento = " + documento_tipo + "/" + m.get("serie") + "/" + m.get("numero") + "/" + m.get("anno") + ", Pagamento = " + pagamento_tipo + ", Importo documento = " + documento_importo + " CI SONO DELLE SCADENZE GIA IN DISTINTA!!!");                    try {                        resu.previous();                        String msg = "Le seguenti scadenze sono gia' state incluse nella distinta per la banca:";                        while (resu.next()) {                            msg += "\n" + resu.getString("id") + " al " + dateFormat.format(resu.getDate("data_scadenza")) + " di " + "\u20AC" + it.tnx.Db.formatValuta(resu.getDouble("importo")) + " distinta " + resu.getString("distinta");                        }                        msg += "\nSicuro di continuare e rigenerarle ?";                        if (avvisi) {                            int ret = javax.swing.JOptionPane.showConfirmDialog(null, msg, "Attenzione", javax.swing.JOptionPane.YES_NO_OPTION);                            if (ret == javax.swing.JOptionPane.NO_OPTION) {                                return false;                            }                        }                    } catch (Exception err) {                        err.printStackTrace();                    }                }                //elimino le pecedenti scadenze                sql = "delete from scadenze";                sql += " where documento_tipo = " + Db.pc(this.documento_tipo, Types.VARCHAR);                sql += " and id_doc = " + documento_id;                //sql += " and distinta is null";                Db.executeSql(conn, sql);                //apre il resultset per ultimo +1                try {                    if (conn != null) {                        stat = conn.createStatement();                    } else {                        stat = Db.getConn().createStatement();                    }                    sql = "select numero from scadenze";                    sql += " where documento_tipo = " + Db.pc(this.documento_tipo, Types.VARCHAR);                    sql += " and id_doc = " + documento_id;                    sql += " order by numero desc limit 1";                    resu = stat.executeQuery(sql);                    if (resu.next() == true) {                        this.numero = (resu.getInt(1) + 1);                    } else {                        this.numero = 1;                    }                } catch (Exception err) {                    javax.swing.JOptionPane.showMessageDialog(null, err.toString());                }                ResultSet tempDocu;                tempDocu = getResultSetDocumento();                if (documento_data == null) {                    if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {                        documento_data = tempDocu.getDate("data_doc");                        if (documento_data == null) {                            documento_data = tempDocu.getDate("data");                        }                    } else {                        documento_data = tempDocu.getDate("data");                    }                }                //trovato il tipo di pagamento//                if ("S".equalsIgnoreCase(tempPaga.getString("IMMEDIATO"))) {////                    //genero una sola scadenza dato che il pagamento ??? di tipo IMMEDAITO//                    inserisciScadenza(this.documento_importo, documento_data);////                    //storico//                    Storico.scrivi("Genera Scadenze Immediato", "Documento = " + documento_serie + "/" + documento_numero + "/" + documento_anno + ", Pagamento = " + pagamento_tipo + ", Importo documento = " + documento_importo);////                    //msg di conferma//                    //javax.swing.JOptionPane.showMessageDialog(null, "scadenze generate");//                } else {                //genero alle scadenze prefissate a partire dalla data del docuemnto                //prendo data documento                                java.util.Date dataInizio;                java.util.Calendar tempCale;                dataInizio = documento_data;                tempCale = java.util.GregorianCalendar.getInstance();                //conto quante scadenze e divido l'importo                int contaScadenze = 0;                                if ("S".equalsIgnoreCase(tempPaga.getString("IMMEDIATO"))) {                    contaScadenze++;                }                if (tempPaga.getString("30").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("60").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("90").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("120").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("150").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("180").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("210").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("240").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("270").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("300").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("330").equalsIgnoreCase("S")) {                    contaScadenze++;                }                if (tempPaga.getString("360").equalsIgnoreCase("S")) {                    contaScadenze++;                }                boolean iva30gg = false;                if (CastUtils.toString(tempPaga.getString("iva30gg")).equalsIgnoreCase("S")) {                    iva30gg = true;                }                double importoScadenza = this.documento_importo / contaScadenze;                if (iva30gg) {//                    importoScadenza = this.documento_imponibile / contaScadenze;                    //se presente rivalsa l'iva devo calcolare l'importo da pagare e non l'imponibile                    importoScadenza = (this.documento_importo - this.documento_iva) / contaScadenze;                }                //calcolo scarto da aggiungere alla prima scadenza                //java.math.BigDecimal bdImportoScadenza = new java.math.BigDecimal(importoScadenza);                //bdImportoScadenza = bdImportoScadenza.setScale(2, java.math.BigDecimal.ROUND_HALF_UP);                //quadratura = this.documento_importo - (bdImportoScadenza.doubleValue() * contaScadenze);                double importoScadenzaApprossimato = it.tnx.Util.round(importoScadenza, 2);                importoScadenza = importoScadenzaApprossimato;                if (iva30gg) {//                    quadratura = it.tnx.Util.round(this.documento_imponibile - (importoScadenzaApprossimato * contaScadenze), 2);                    //se presente rivalsa l'iva devo calcolare l'importo da pagare e non l'imponibile                    quadratura = it.tnx.Util.round((this.documento_importo - this.documento_iva) - (importoScadenzaApprossimato * contaScadenze), 2);                } else {                    quadratura = it.tnx.Util.round(this.documento_importo - (importoScadenzaApprossimato * contaScadenze), 2);                }                //storico                Map m = InvoicexUtil.getSerieNumeroAnno(documento_tipo, documento_id);                Storico.scrivi(conn, "Genera Scadenze Varie", "Documento = " + documento_tipo + "/" + m.get("serie") + "/" + m.get("numero") + "/" + m.get("anno") + ", Pagamento = " + pagamento_tipo + ", Importo scaenza = " + String.valueOf(importoScadenzaApprossimato) + ", Importo documento = " + documento_importo + ", Scadenze = " + contaScadenze + ", Data = " + documento_data);                boolean fineMese;                if (tempPaga.getString("FINEMESE").equalsIgnoreCase("S")) {                    fineMese = true;                } else {                    fineMese = false;                }                boolean specificaGiorno = false;                                if (tempPaga.getString("flag_richiedi_giorno").equalsIgnoreCase("S")) {                    specificaGiorno = true;                    giornoMese = new Byte(tempDocu.getByte("giorno_pagamento"));                } else {                    giornoMese = null;                }                                //scadenza dell'acconto                if (acconto != null && acconto != 0) {                    tempCale = calcolaData(dataInizio, 0, false, null);                    boolean flag_pagata_old = flag_pagata;                    flag_pagata = true;                    inserisciScadenza(conn, acconto, tempCale.getTime(), "acconto", true);                    flag_pagata = flag_pagata_old;                }                                //imm                if ("S".equalsIgnoreCase(tempPaga.getString("IMMEDIATO"))) {                    tempCale = calcolaData(dataInizio, 0, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //30                if (tempPaga.getString("30").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 1, fineMese, giornoMese);                    //iva30gg                    if (iva30gg) {                        inserisciScadenza(conn, importoScadenza + documento_iva, tempCale.getTime());                    } else {                        inserisciScadenza(conn, importoScadenza, tempCale.getTime());                    }                }                //iva30gg                if (iva30gg && !tempPaga.getString("30").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 1, fineMese, giornoMese);                    inserisciScadenza(conn, documento_iva, tempCale.getTime());                }                //60                if (tempPaga.getString("60").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 2, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //90                if (tempPaga.getString("90").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 3, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //120                if (tempPaga.getString("120").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 4, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //150                if (tempPaga.getString("150").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 5, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //180                if (tempPaga.getString("180").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 6, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //210                if (tempPaga.getString("210").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 7, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //240                if (tempPaga.getString("240").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 8, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //270                if (tempPaga.getString("270").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 9, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //300                if (tempPaga.getString("300").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 10, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //330                if (tempPaga.getString("330").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 11, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                //360                if (tempPaga.getString("360").equalsIgnoreCase("S")) {                    tempCale = calcolaData(dataInizio, 12, fineMese, giornoMese);                    inserisciScadenza(conn, importoScadenza, tempCale.getTime());                }                                //                }                //aggiorno i campi calcolati delle scadenze                InvoicexUtil.aggiornaScadenze(documento_tipo, documento_id);                                return true;            } else {                if (avvisi) {                    javax.swing.JOptionPane.showMessageDialog(InvoicexUtil.getActiveJInternalFrame(), "Impossibile trovare il tipo di pagamento");                }                //storico                Map m = InvoicexUtil.getSerieNumeroAnno(documento_tipo, documento_id);                Storico.scrivi("Genera Scadenze Errore Pagamento", "Documento = " + documento_tipo + "/" + m.get("serie") + "/" + m.get("numero") + "/" + m.get("anno") + ", Pagamento = " + pagamento_tipo + ", Importo documento = " + documento_importo);                return false;            }        } catch (Exception err) {            err.printStackTrace();            return false;        }    }    static public GregorianCalendar calcolaData(java.util.Date dataInizio, int mesi, boolean fineMese) {        return (calcolaData(dataInizio, mesi, fineMese, null));    }    static public GregorianCalendar calcolaData(java.util.Date dataInizio, int mesi, boolean fineMese, Byte giornoMese) {        Calendar tempCale = GregorianCalendar.getInstance();        tempCale.setTime(dataInizio);        if (fineMese == false && giornoMese == null) {            //calcolo a giorni commerciali            tempCale.add(java.util.Calendar.MONTH, mesi);        } else if (giornoMese != null) {            //calcolo al giorno specificato            //controllo che il giorno della fattura sia inferiore al giorno del pagamento altrimenti devo aggiungere piu' giorni            if (fineMese) {                tempCale.add(java.util.Calendar.MONTH, mesi + 1);            } else {                if (tempCale.get(tempCale.DAY_OF_MONTH) > giornoMese.byteValue()) {                    tempCale.add(java.util.Calendar.MONTH, mesi + 1);                } else {                    tempCale.add(java.util.Calendar.MONTH, mesi);                }            }            int maxday = tempCale.getActualMaximum(Calendar.DAY_OF_MONTH);            if (giornoMese > maxday) giornoMese = (byte)maxday;            tempCale.set(tempCale.DAY_OF_MONTH, giornoMese.byteValue());        } else {            //calcolo a fine mese            //System.out.println("Days in this month " + calendar.getActualMaximum(Calendar.DAY_OF_MONTH));            //controllo se generare nel mese corrente o quello standard successivo            tempCale.add(java.util.Calendar.MONTH, mesi);            int giorniMese = tempCale.getActualMaximum(tempCale.DAY_OF_MONTH);            tempCale.set(tempCale.DAY_OF_MONTH, giorniMese);        }        return (GregorianCalendar) tempCale;    }    private void inserisciScadenza(double importo, java.util.Date scadenza) {        inserisciScadenza(null, importo, scadenza);    }        private void inserisciScadenza(Connection conn, double importo, java.util.Date scadenza) {            inserisciScadenza(conn, importo, scadenza, null, false);    }        private void inserisciScadenza(Connection conn, double importo, java.util.Date scadenza, String note, boolean flag_acconto) {        //per la quadratura aggiungo alla prima scadenza l'importo della quadratura        if (!flag_acconto) {            importo = it.tnx.Util.round(importo + quadratura, 2);            quadratura = 0;        } else {            importo = it.tnx.Util.round(importo, 2);        }        String sql = "";        try {            //genero una sola scadenza dato che il pagamento ??? di tipo IMMEDAITO            sql = "insert into scadenze (documento_tipo";            sql += ",id_doc";            sql += ",data_scadenza";            sql += ",pagata";            sql += ",importo";            sql += ",numero, note_pagamento, flag_acconto) values (";            //valori            sql += Db.pc(this.documento_tipo, Types.VARCHAR);            sql += "," + Db.pc(this.documento_id, Types.INTEGER);            sql += "," + Db.pc(Db.formatDataMysql(scadenza), Types.DATE);            //metto come defautl a pagata S, se arrivano insoluti si vanno ad inserire            if (this.flag_pagata == true) {                sql += "," + Db.pc("S", Types.VARCHAR);            } else {                sql += "," + Db.pc("N", Types.VARCHAR);            }            sql += "," + Db.pc(importo, Types.DOUBLE);            sql += "," + Db.pc(flag_acconto ? null : this.numero, Types.INTEGER);            sql += "," + Db.pc(note, Types.VARCHAR);            sql += "," + Db.pc(flag_acconto ? "S" : "N", Types.VARCHAR);            sql += ")";            //storico            Map m = InvoicexUtil.getSerieNumeroAnno(documento_tipo, documento_id);            Storico.scrivi(conn, "Genera Scadenze Inserisci", "Documento = " + documento_tipo + "/" + m.get("serie") + "/" + m.get("numero") + "/" + m.get("anno") + ", Importo = " + importo + ", Numero = " + numero + ", Data = " + scadenza);            Db.executeSql(conn, sql);            if (!flag_acconto) this.numero++;        } catch (Exception err) {            err.printStackTrace();        }    }    ResultSet getResultSetDocumento() {        String sql = "";        if (documento_tipo.equals(Db.TIPO_DOCUMENTO_DDT)) {            sql = "Select * from test_ddt";        } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA)) {            sql = "Select * from test_fatt";        } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {            sql = "Select * from test_fatt_acquisto";        } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE)) {            sql = "Select * from test_ordi";        } else if (documento_tipo.equals(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO)) {            sql = "Select * from test_ordi_acquisto";        }        sql += " where id = " + documento_id;        ResultSet tempDocu = Db.openResultSet(conn, sql);        try {            tempDocu.next();        } catch (Exception err) {            err.printStackTrace();        }        return tempDocu;    }}