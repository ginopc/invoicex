/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JDialogStampaArticoli.java
 *
 * Created on 21-nov-2008, 9.06.21
 */
package gestioneFatture;

import it.tnx.Db;
import it.tnx.commons.KeyValuePair;
import it.tnx.commons.SwingUtils;
import it.tnx.commons.cu;
import it.tnx.commons.dbu;
import it.tnx.dbeans.pdfPrint.PrintSimpleTable;
import it.tnx.invoicex.InvoicexUtil;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.Vector;

/**
 *
 * @author mceccarelli
 */
public class JDialogStampaArticoli extends javax.swing.JDialog {

    frmArtiConListino anagArticoli;

    /**
     * Creates new form JDialogStampaArticoli
     */
    public JDialogStampaArticoli(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        KeyValuePair kv = new KeyValuePair(null, "<non stampare prezzi>");
        KeyValuePair kv1 = new KeyValuePair("EL1", "<Ultimi prezzi di Vendita>");
        KeyValuePair kv2 = new KeyValuePair("EL2", "<Ultimi prezzi di Acquisto>");
        SwingUtils.initJComboFromDb(listini, Db.getConn(), "select codice, descrizione from tipi_listino order by descrizione", "codice", "descrizione", kv, kv1, kv2);
        Vector v = new Vector();
        v.add(new KeyValuePair("art.codice", "Codice"));
        v.add(new KeyValuePair("art.descrizione", "Descrizione"));
        v.add(new KeyValuePair("cat.categoria, sotcat.sottocategoria, art.codice", "Categoria, Sottocategoria, Codice articolo"));
        v.add(new KeyValuePair("cat.categoria, sotcat.sottocategoria, art.descrizione", "Categoria, Sottocategoria, Descrizione articolo"));
        SwingUtils.initJComboFromKVList(ordine, v);

        v = new Vector();
        v.add(new KeyValuePair("pdf", "PDF"));
        v.add(new KeyValuePair("html", "HTML"));
        v.add(new KeyValuePair("xls", "EXCEL"));
        SwingUtils.initJComboFromKVList(formato, v);
        
        checkSorgente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgSel = new javax.swing.ButtonGroup();
        stampa = new javax.swing.JButton();
        annulla = new javax.swing.JButton();
        listini = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ordine = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteTesta = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notePiede = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        formato = new javax.swing.JComboBox();
        rbtEnt = new javax.swing.JRadioButton();
        rbtVen = new javax.swing.JRadioButton();
        rbtAcq = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lingua = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        sorgente = new javax.swing.JComboBox();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Stampa Elenco Articoli");

        stampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Checkmark-16.png"))); // NOI18N
        stampa.setText("Stampa");
        stampa.addActionListener(formListener);

        annulla.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Delete Sign-16.png"))); // NOI18N
        annulla.setText("Annulla");
        annulla.addActionListener(formListener);

        listini.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Includi i prezzi del listino");
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Ordina per");
        jLabel2.setPreferredSize(new java.awt.Dimension(80, 14));

        ordine.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        noteTesta.setColumns(20);
        noteTesta.setRows(5);
        jScrollPane1.setViewportView(noteTesta);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Note Testata");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Note Piede");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 14));

        notePiede.setColumns(20);
        notePiede.setRows(5);
        jScrollPane2.setViewportView(notePiede);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Formato Stampa");
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 14));

        formato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btgSel.add(rbtEnt);
        rbtEnt.setSelected(true);
        rbtEnt.setText("Entrambi");
        rbtEnt.addActionListener(formListener);

        btgSel.add(rbtVen);
        rbtVen.setText("Vendita");
        rbtVen.addActionListener(formListener);

        btgSel.add(rbtAcq);
        rbtAcq.setText("Acquisto");
        rbtAcq.addActionListener(formListener);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Tipo Articolo");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Lingua");

        lingua.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Italiano", "Inglese" }));
        lingua.addActionListener(formListener);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Sorgente dati");
        jLabel8.setPreferredSize(new java.awt.Dimension(80, 14));

        sorgente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elenco finestra articoli", "Tutti gli articoli" }));
        sorgente.addItemListener(formListener);
        sorgente.addInputMethodListener(formListener);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2))
                    .add(layout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(annulla)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stampa))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel6)
                                    .add(jLabel7))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(lingua, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(rbtVen)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rbtAcq)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rbtEnt))
                                    .add(formato, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(sorgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(listini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(ordine, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 325, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(sorgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(listini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ordine, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(formato, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rbtVen)
                    .add(rbtAcq)
                    .add(rbtEnt)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel7)
                    .add(lingua, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stampa)
                    .add(annulla))
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.InputMethodListener, java.awt.event.ItemListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == stampa) {
                JDialogStampaArticoli.this.stampaActionPerformed(evt);
            }
            else if (evt.getSource() == annulla) {
                JDialogStampaArticoli.this.annullaActionPerformed(evt);
            }
            else if (evt.getSource() == rbtEnt) {
                JDialogStampaArticoli.this.rbtEntActionPerformed(evt);
            }
            else if (evt.getSource() == rbtVen) {
                JDialogStampaArticoli.this.rbtVenActionPerformed(evt);
            }
            else if (evt.getSource() == rbtAcq) {
                JDialogStampaArticoli.this.rbtAcqActionPerformed(evt);
            }
            else if (evt.getSource() == lingua) {
                JDialogStampaArticoli.this.linguaActionPerformed(evt);
            }
        }

        public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
        }

        public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            if (evt.getSource() == sorgente) {
                JDialogStampaArticoli.this.sorgenteInputMethodTextChanged(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == sorgente) {
                JDialogStampaArticoli.this.sorgenteItemStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void stampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stampaActionPerformed
        //stampa
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        //check prezzi a ricarico
        InvoicexUtil.aggiornaListini();

        String tipo = "";
        if (btgSel.isSelected(this.rbtAcq.getModel())) {
            tipo = "A";
        } else if (btgSel.isSelected(this.rbtVen.getModel())) {
            tipo = "V";
        } else {
            tipo = "E";
        }
        KeyValuePair listino = (KeyValuePair) listini.getSelectedItem();

        int[] headerWidth = null;
        String sql;
        sql = "select ";
        sql += " cat.categoria, sotcat.sottocategoria, ";
        if (lingua.getSelectedItem().equals("Italiano")) {
            sql += " art.codice as Codice, ";
            sql += " art.descrizione as Descrizione, ";
            sql += " art.um as 'u.m.', ";
            sql += " art.codice_fornitore as 'Codice Fornitore', ";
        } else {
            sql += " art.codice as Code, ";
            sql += " art.descrizione_en as Description, ";
            sql += " art.um_en as 'm.u.', ";
            sql += " art.codice_fornitore as 'Supplier code', ";
        }
        sql += " art.codice_a_barre as Barcode";
        if (listino.key == null) {
            headerWidth = new int[]{20, 20, 15, 60, 7, 15, 15};
            sql += " from articoli art";
            sql += " left join categorie_articoli cat on art.categoria = cat.id";
            sql += " left join sottocategorie_articoli sotcat on art.sottocategoria = sotcat.id";
            sql += " where 1 = 1";
        } else {
            headerWidth = new int[]{20, 20, 15, 50, 8, 15, 15, 12, 10, 10};
            if (lingua.getSelectedItem().equals("Italiano")) {
                sql += " , IF(tl.ricarico_flag = 'S', (ap2.prezzo + (ap2.prezzo / 100 * tl.ricarico_perc)), ap.prezzo) as Prezzo, ap.sconto1 as 'Sconto 1', ap.sconto2 as 'Sconto 2'";
            } else {
                sql += " , IF(tl.ricarico_flag = 'S', (ap2.prezzo + (ap2.prezzo / 100 * tl.ricarico_perc)), ap.prezzo) as Price, ap.sconto1 as '1° Discount', ap.sconto2 as '2° Discount'";
            }
            sql += " from articoli art left join articoli_prezzi ap on art.codice = ap.articolo";
            sql += " left join tipi_listino tl on tl.codice = ap.listino";
            sql += " left join articoli_prezzi ap2 on art.codice = ap2.articolo and ap2.listino = tl.ricarico_listino";
            sql += " left join categorie_articoli cat on art.categoria = cat.id";
            sql += " left join sottocategorie_articoli sotcat on art.sottocategoria = sotcat.id";
            sql += " where (ap.listino = " + Db.pc(listino.key, Types.VARCHAR) + " or ap.listino is null) ";
        }

        if (String.valueOf(listini.getSelectedItem()).equals("<Ultimi prezzi di Vendita>")) {
            headerWidth = new int[]{20, 20, 15, 50, 8, 15, 15, 12};
            sql = "select cat.categoria, sotcat.sottocategoria, art.codice, art.descrizione, art.um, art.codice_fornitore as fornitore, art.codice_a_barre as barcode, (select prezzo from righ_fatt where righ_fatt.codice_articolo = art.codice order by anno desc, numero desc limit 1) as prezzo ";
            sql += " from articoli art ";
            sql += " left join categorie_articoli cat on art.categoria = cat.id";
            sql += " left join sottocategorie_articoli sotcat on art.sottocategoria = sotcat.id";
        } else if (String.valueOf(listini.getSelectedItem()).equals("<Ultimi prezzi di Acquisto>")) {
            headerWidth = new int[]{20, 20, 15, 50, 8, 15, 15, 12};
            sql = "select cat.categoria, sotcat.sottocategoria, art.codice, art.descrizione, art.um, art.codice_fornitore as fornitore, art.codice_a_barre as barcode, (select prezzo from righ_fatt_acquisto where righ_fatt_acquisto.codice_articolo = art.codice order by anno desc, numero desc limit 1) as prezzo";
            sql += " from articoli art ";
            sql += " left join categorie_articoli cat on art.categoria = cat.id";
            sql += " left join sottocategorie_articoli sotcat on art.sottocategoria = sotcat.id";
        }

        if (sorgente.getSelectedIndex() == 0) {
            sql += cu.s(anagArticoli.where);
        } else if (!tipo.equalsIgnoreCase("E")) {
            sql += " and art.tipo = '" + tipo + "'";
        }

        sql += " order by " + ((KeyValuePair) ordine.getSelectedItem()).key;

        System.out.println("sql:" + sql);

//        PrintSimpleTable print = new PrintSimpleTable(getGriglia());
        ResultSet rs = Db.openResultSet(sql);
        PrintSimpleTable print = new PrintSimpleTable(rs);
        String caption = "";
        try {
            ResultSet r = Db.openResultSet("select ragione_sociale from dati_azienda");
            if (r.next()) {
                caption += r.getString(1);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (caption.length() > 0) {
            caption += " - ";
        }

        if (lingua.getSelectedItem().equals("Italiano")) {
            if (String.valueOf(listini.getSelectedItem()).equals("<Ultimi prezzi di Vendita>")) {
                caption += "Elenco ultimi prezzi di vendita articoli";
            } else if (String.valueOf(listini.getSelectedItem()).equals("<Ultimi prezzi di Acquisto>")) {
                caption += "Elenco ultimi prezzi di acquisto articoli";
            } else {
                caption += "Elenco articoli";
            }
        } else if (String.valueOf(listini.getSelectedItem()).equals("<Ultimi prezzi di Vendita>")) {
            caption += "List of recent sale prices items";
        } else if (String.valueOf(listini.getSelectedItem()).equals("<Ultimi prezzi di Acquisto>")) {
            caption += "List last purchase prices items";
        } else {
            caption += "Product list";
        }
        if (((KeyValuePair) formato.getSelectedItem()).key.toString().equalsIgnoreCase("pdf")) {
            print.print(caption, headerWidth, ((KeyValuePair) formato.getSelectedItem()).key.toString(), noteTesta.getText(), notePiede.getText());
//            SwingUtils.open(new File(main.wd + "tempStampa.pdf"));
            Util.start2(main.wd + "tempStampa.pdf");
        } else if (((KeyValuePair) formato.getSelectedItem()).key.toString().equalsIgnoreCase("xls")) {
            String nomeFile = print.printExcel(caption, headerWidth, noteTesta.getText(), notePiede.getText());
//            SwingUtils.open(new File(main.wd + nomeFile));
            Util.start2(main.wd + nomeFile);
        } else {
            print.print(caption, headerWidth, ((KeyValuePair) formato.getSelectedItem()).key.toString(), noteTesta.getText(), notePiede.getText());
//            SwingUtils.open(new File(main.wd + "tempStampa.html"));
            Util.start2(main.wd + "tempStampa.html");
        }

        dbu.close(rs);

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_stampaActionPerformed

    private void annullaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaActionPerformed
        dispose();
    }//GEN-LAST:event_annullaActionPerformed

    private void rbtAcqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtAcqActionPerformed
        String testo = this.noteTesta.getText();
        int i = testo.indexOf("ARTICOLI VENDITA");
        int e = i + 16;
        if (i != -1) {
            testo = testo.substring(0, i) + "ARTICOLI ACQUISTO " + testo.substring(e);
        } else if (testo.equals("")) {
            testo = "ARTICOLI ACQUISTO";
        }
        this.noteTesta.setText(testo);
    }//GEN-LAST:event_rbtAcqActionPerformed

    private void rbtVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtVenActionPerformed
        String testo = this.noteTesta.getText();
        int i = testo.indexOf("ARTICOLI ACQUISTO");
        int e = i + 17;

        if (i != -1) {
            testo = testo.substring(0, i) + "ARTICOLI VENDITA " + testo.substring(e);
        } else if (testo.equals("")) {
            testo = "ARTICOLI VENDITA";
        }
        this.noteTesta.setText(testo);
    }//GEN-LAST:event_rbtVenActionPerformed

    private void rbtEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtEntActionPerformed
        if (this.rbtEnt.isSelected()) {
            this.noteTesta.setText("");
        }
    }//GEN-LAST:event_rbtEntActionPerformed

    private void linguaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linguaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linguaActionPerformed

    private void sorgenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sorgenteItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            checkSorgente();
        }
    }//GEN-LAST:event_sorgenteItemStateChanged

    private void sorgenteInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sorgenteInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_sorgenteInputMethodTextChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JDialogStampaArticoli dialog = new JDialogStampaArticoli(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton annulla;
    public javax.swing.ButtonGroup btgSel;
    public javax.swing.JComboBox formato;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JComboBox lingua;
    public javax.swing.JComboBox listini;
    public javax.swing.JTextArea notePiede;
    public javax.swing.JTextArea noteTesta;
    public javax.swing.JComboBox ordine;
    public javax.swing.JRadioButton rbtAcq;
    public javax.swing.JRadioButton rbtEnt;
    public javax.swing.JRadioButton rbtVen;
    public javax.swing.JComboBox sorgente;
    public javax.swing.JButton stampa;
    // End of variables declaration//GEN-END:variables

    private void checkSorgente() {
        if (sorgente.getSelectedIndex() == 0) {
            rbtAcq.setEnabled(false);
            rbtVen.setEnabled(false);
            rbtEnt.setEnabled(false);
            rbtAcq.setSelected(false);
            rbtVen.setSelected(false);
            rbtEnt.setSelected(false);
        } else {
            rbtAcq.setEnabled(true);
            rbtVen.setEnabled(true);
            rbtEnt.setEnabled(true);
            rbtAcq.setSelected(false);
            rbtVen.setSelected(false);
            rbtEnt.setSelected(true);
        }
    }

}
