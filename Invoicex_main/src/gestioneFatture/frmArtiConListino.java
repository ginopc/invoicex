/** * Invoicex Copyright (c) 2005-2016 Marco Ceccarelli, Tnx srl * * Questo software Ã¨ soggetto, e deve essere distribuito con la licenza GNU * General Public License, Version 2. La licenza accompagna il software o potete * trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the GNU General * Public License, Version 2. The license should have accompanied the software * or you may obtain a copy of the license from the Free Software Foundation at * http://www.fsf.org . * * -- Marco Ceccarelli (m.ceccarelli@tnx.it) Tnx snc (http://www.tnx.it) * */package gestioneFatture;import com.jidesoft.hints.AbstractListIntelliHints;import com.jidesoft.swing.OverlayableUtils;import it.tnx.Db;import it.tnx.accessoUtenti.Permesso;import it.tnx.commons.CastUtils;import it.tnx.commons.DbUtils;import it.tnx.commons.DebugFastUtils;import it.tnx.commons.FormatUtils;import it.tnx.commons.ImgUtils;import it.tnx.commons.KeyValuePair;import it.tnx.commons.MicroBench;import it.tnx.commons.RunnableWithArgs;import it.tnx.commons.StringUtilsTnx;import it.tnx.commons.SwingUtils;import it.tnx.commons.cu;import it.tnx.commons.dbu;import it.tnx.commons.swing.DelayedExecutor;import it.tnx.dbeans.ResultSet.*;import it.tnx.gui.MyBasicArrowButton;import it.tnx.invoicex.IFunction;import it.tnx.invoicex.InvoicexUtil;import it.tnx.invoicex.sync.Sync;import java.awt.Color;import java.awt.Component;import java.awt.Cursor;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.Robot;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusAdapter;import java.awt.event.FocusEvent;import java.awt.event.ItemEvent;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.image.BufferedImage;import java.io.File;import java.math.BigDecimal;import java.net.URL;import java.sql.Connection;import java.sql.ResultSet;import java.sql.Types;import java.text.*;import java.util.EventObject;import java.util.HashMap;import java.util.Hashtable;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.Vector;import javax.swing.DefaultCellEditor;import javax.swing.DefaultListCellRenderer;import javax.swing.ImageIcon;import javax.swing.JComboBox;import javax.swing.JComponent;import javax.swing.JDialog;import javax.swing.JFileChooser;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JTable;import javax.swing.JTextField;import javax.swing.SwingConstants;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.filechooser.FileFilter;import javax.swing.plaf.basic.BasicArrowButton;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableCellEditor;import javax.swing.text.JTextComponent;import net.java.balloontip.BalloonTip;import net.java.balloontip.styles.BalloonTipStyle;import net.java.balloontip.styles.EdgedBalloonStyle;import org.apache.commons.lang.StringUtils;import org.jdesktop.swingx.JXHyperlink;import tnxbeans.DbEvent;import tnxbeans.DbListener;import tnxbeans.tnxDbGrid;import tnxbeans.tnxDbPanel;import uk.co.jaimon.test.SimpleImageInfo;public class frmArtiConListino        extends javax.swing.JInternalFrame {    private DefaultTableModel tabListinoModel;    private DefaultTableModel tabConfezioneModel;    private boolean caricamentoPrezzi;    private boolean ricalcoloPrezzi;    private AbstractListIntelliHints alRicercaFornitore = null;    listinoModel cacheModel = null;    HashMap list_prezzi_pre = null;    private boolean griglia_lazy = false;    List<Map> filters = null;    RunnableWithArgs filtriActionModifica;    RunnableWithArgs filtriActionRimuovi;    boolean in_apertura = true;    DelayedExecutor delay_refresh = new DelayedExecutor(new Runnable() {        public void run() {            SwingUtilities.invokeLater(new Runnable() {                public void run() {                    SwingUtils.mouse_wait();                    dbRefresh();                    tabCent.setSelectedIndex(2);                    SwingUtils.mouse_def();                }            });        }    }, 450);    public String where;    public String order;    /**     * Creates new form frmDati_blank     */    public frmArtiConListino() {        initComponents();        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/categories/applications-office.png")));        InvoicexUtil.resizePanelFlow(panFiltri);        filtriActionRimuovi = new RunnableWithArgs() {            public void run() {                Object[] objs = getArgs();                if (objs != null && objs[1] != null) {                    //rimuovo da filtri                    if (objs != null && objs[0] != null) {                        Map m = (Map) objs[0];                        Object campo = m.get("campo");                        Iterator<Map> iter = filters.iterator();                        while (iter.hasNext()) {                            Map mf = iter.next();                            if (mf.get("campo").equals(campo)) {                                filters.remove(mf);                                break;                            }                        }                    }                    try {                        InvoicexUtil.salvaFiltri(filters, frmArtiConListino.this.getClass().getName());                    } catch (Exception e) {                        e.printStackTrace();                    }                    ActionEvent ae = (ActionEvent) objs[1];                    JComponent source = (JComponent) ae.getSource();                    panFiltri.remove(source.getParent());                    panFiltri.getTopLevelAncestor().validate();                    panFiltri.getTopLevelAncestor().repaint();                    dbRefresh();                    tabCent.setSelectedIndex(2);                }            }        };        filtriActionModifica = new RunnableWithArgs() {            public void run() {                try {                    JDialog dialog = InvoicexUtil.getDialogFiltriArticoli(frmArtiConListino.this, true, filters);                    Object[] objs = getArgs();                    if (objs != null && objs[0] != null) {                        dialog.getClass().getDeclaredMethod("posiziona", Object.class).invoke(dialog, objs[0]);                    }                    if (objs != null && objs[1] != null) {                        ActionEvent ae = (ActionEvent) objs[1];                        JComponent source = (JComponent) ae.getSource();                        InvoicexUtil.mettiSotto(dialog, source);                    }                    dialog.setVisible(true);                    boolean conferma = dialog.getClass().getField("conferma").getBoolean(dialog);                    if (conferma) {                        filters = (List) dialog.getClass().getDeclaredMethod("getFilters").invoke(dialog);                        InvoicexUtil.aggiornaFiltri(panFiltri, filters, linkAggiungiFiltro, this, filtriActionRimuovi);                        try {                            InvoicexUtil.salvaFiltri(filters, frmArtiConListino.this.getClass().getName());                        } catch (Exception e) {                            e.printStackTrace();                        }                        dbRefresh();                        tabCent.setSelectedIndex(2);                    }                } catch (Throwable t) {                    t.printStackTrace();                }            }        };        if (main.fileIni.getValue("db", "nome_database").equalsIgnoreCase("gestionefatture_tnx")) {            cheFatturaAlRinnovo.setVisible(true);            cheFatturaAlRinnovo.setDbSalvare(true);            cheFatturaAlRinnovo.setDbRiempire(true);        }        mostratutti.putClientProperty("JComponent.size", "mini");        InvoicexUtil.macButtonGradient(butNew);        InvoicexUtil.macButtonGradient(butDele);        InvoicexUtil.macButtonGradient(butFind);        InvoicexUtil.macButtonGradient(butFirs);        InvoicexUtil.macButtonGradient(butPrev);        InvoicexUtil.macButtonGradient(butNext);        InvoicexUtil.macButtonGradient(butLast);        InvoicexUtil.macButtonGradient(butDuplica);        InvoicexUtil.macButtonGradient(butStampaElenco);        InvoicexUtil.macButtonGradient(butImportExcel);        if (main.getPersonalContain("litri")) {            this.labKg.setText("Lt");        }        if (main.iniPrezziCliente) {            labPrezziCliente.setVisible(true);        } else {            labPrezziCliente.setVisible(false);        }        KeyValuePair kv = new KeyValuePair(null, "<no prezzi>");        KeyValuePair kv1 = new KeyValuePair("EL1", "<Ultimi prezzi di Vendita>");        KeyValuePair kv2 = new KeyValuePair("EL2", "<Ultimi prezzi di Acquisto>");        SwingUtils.initJComboFromDb(listini, Db.getConn(), "select codice, descrizione from tipi_listino order by descrizione", "codice", "descrizione", kv, kv1, kv2);                String listino = main.fileIni.getValue("articoli", "listino", null);        if (listino != null) {            listini.setSelectedItem(listino);            boolean ret = SwingUtils.findJComboKV(listini, listino, true);            System.out.println("ret = " + ret);        }        MicroBench mb = new MicroBench();        mb.start();        if (!main.pluginContabilita || !main.fileIni.getValueBoolean("plugin_contab", "attivo", false)) {//            panel_contabilita.setVisible(false);            panel_contabilita.setPreferredSize(new Dimension(2, 2));        }        if (main.getPersonalContain("conenna")) {            texDescrizione.getJTextArea().setFont(new Font("Courier New", 0, 11));//            texDescrizioneEn.getJTextArea().setFont(new Font("Courier New", 0 , 11));            dati.remove(jLabel24);            dati.remove(texDescrizioneEn);            dati.revalidate();        } else {            try {                texDescrizione.setFont(UIManager.getFont("TextField.font"));                texDescrizioneEn.setFont(UIManager.getFont("TextField.font"));            } catch (Exception e) {                e.printStackTrace();            }        }        this.texTipo.setVisible(false);        tabListino.setRowHeight(tabListino.getRowHeight() + 4);//        iva.dbAddElement("", null);        iva.setPrototypeDisplayValue("xxxxxxxxxxxxxxxxxxxxxxx");        iva.dbOpenList(Db.getConn(), "select CAST(CONCAT(codice, ' - ', descrizione, ' (', percentuale, '%)') AS CHAR(100)) as descrizione, codice from codici_iva order by codice");        categoria.dbAddElement("", null);        categoria.dbOpenList(Db.getConn(), "select categoria, id from categorie_articoli order by categoria", null, false);        sottocategoria.dbClearList();        InvoicexUtil.fireEvent(this, InvoicexEvent.TYPE_FRMARTICOLI_CONSTR_POST_INIT_COMPS);        texFornitore.addFocusListener(new FocusAdapter() {            @Override            public void focusGained(FocusEvent e) {                texFornitore.selectAll();            }        });        alRicercaFornitore = new AbstractListIntelliHints(texFornitore) {            String current_search = "";            @Override            protected JList createList() {                final JList list = super.createList();                list.setCellRenderer(new DefaultListCellRenderer() {                    @Override                    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {                        String img, tipo;                        tipo = ((ClienteHint) value).toString();                        JLabel lab = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);                        String word = current_search;                        String content = tipo;                        if (StringUtils.isBlank(((ClienteHint) value).codice)) {                            content = "";                        }                        Color c = null;                        if (!isSelected) {                            c = new Color(240, 240, 100);                        } else {                            c = new Color(100, 100, 40);                        }                        String rgb = Integer.toHexString(c.getRGB());                        rgb = rgb.substring(2, rgb.length());                        content = StringUtilsTnx.highlightWord(content, word, "<span style='background-color: " + rgb + "'>", "</span>");                        if (((ClienteHint) value).obsoleto) {                            content = "<span style='color: FF0000'>" + content + " (Obsoleto)</span>";                        }                        lab.setText("<html>" + content + "</html>");                        System.out.println(index + ":" + content);                        return lab;                    }                });                return list;            }            public boolean updateHints(Object arg0) {//                if (arg0.toString().trim().length() <= 1) return false;                SwingUtils.mouse_wait();                current_search = arg0.toString();                Connection conn;                try {                    conn = Db.getConn();                    String sql = ""                            + "SELECT codice, ragione_sociale, obsoleto FROM clie_forn"                            + " where (codice like '%" + Db.aa(current_search) + "%'"                            + " or ragione_sociale like '%" + Db.aa(current_search) + "%'"                            + " ) and ragione_sociale != ''"                            + " and (tipo is null or tipo = 'F' or tipo = 'E')"                            + " order by ragione_sociale, codice limit 50";                    System.out.println("sql ricerca:" + sql);                    ResultSet rs = DbUtils.tryOpenResultSet(conn, sql);                    Vector v = new Vector();                    ClienteHint clientevuoto = new ClienteHint();                    clientevuoto.codice = "";                    clientevuoto.ragione_sociale = "";                    clientevuoto.obsoleto = false;                    v.add(clientevuoto);                    while (rs.next()) {                        ClienteHint cliente = new ClienteHint();                        cliente.codice = rs.getString(1);                        cliente.ragione_sociale = rs.getString(2);                        cliente.obsoleto = rs.getBoolean(3);                        v.add(cliente);                    }                    setListData(v);                    rs.getStatement().close();                    rs.close();                } catch (Exception ex) {                    ex.printStackTrace();                }                SwingUtils.mouse_def();                return true;            }            @Override            public void acceptHint(Object arg0) {                super.acceptHint(arg0);                try {                    if (((ClienteHint) arg0).codice.equals("")) {                        texFornitoreCodice.setText("");                        texFornitore.setText("");                    } else {                        texFornitoreCodice.setText(((ClienteHint) arg0).codice);                    }                    dati.dbForzaModificati();                } catch (Exception e) {                    e.printStackTrace();                }            }        };        xmlpaDispMedTipo.setPrototypeDisplayValue("DM1 - Dispositivo medico o Dispositivo diagnostico in vitro");        xmlpaDispMedTipo.dbAddElement("DM1 - Dispositivo medico o Dispositivo diagnostico in vitro", "DM1");        xmlpaDispMedTipo.dbAddElement("DM2 - Sistema o kit Assemblato", "DM2");        dati.aggiungiDbPanelCollegato(panXmlPa);        mb.out("frm arti 1");        //this.griglia.dbEditabile = true;        //associo il panel ai dati        this.dati.dbNomeTabella = "articoli";        Vector chiave = new Vector();        chiave.add("codice");        this.dati.dbChiave = chiave;        this.dati.butSave = this.butSave;        this.dati.butUndo = this.butUndo;        this.dati.butDele = this.butDele;        this.dati.butNew = this.butNew;        this.dati.butDuplica = this.butDuplica;        this.dati.tipo_permesso = it.tnx.accessoUtenti.Permesso.PERMESSO_ANAGRAFICA_ARTICOLI;        dati.messaggio_nuovo_manuale = true;        String sql;        sql = "select art.* from articoli art ";        sql += " left join categorie_articoli cat on art.categoria = cat.id";        sql += " left join sottocategorie_articoli sotcat on art.sottocategoria = sotcat.id";        sql += " order by cat.categoria, sotcat.sottocategoria, codice";        sql += " limit 1";        this.dati.dbOpen(Db.getConn(), sql, Db.INSTANCE);        mb.out("frm arti 1.1");        this.dati.dbRefresh();        mb.out("frm arti 1.2");        // Controllo permesso di scrittura articoli per escludere import da excel        if (!main.utente.getPermesso(Permesso.PERMESSO_ANAGRAFICA_ARTICOLI, Permesso.PERMESSO_TIPO_SCRITTURA)) {            this.butImportExcel.setEnabled(false);        }        mb.out("frm arti 2");        //apro la griglia        this.griglia.dbChiave = chiave;        this.griglia.dbEditabile = false;        this.griglia.flagUsaThread = false;        this.griglia.flagUsaOrdinamento = true;        //controllo numero record, se maggiore di 30000 faccio con lazy (e senza ordinamento)        Integer conta_articoli = 0;        try {            conta_articoli = cu.toInteger0(DbUtils.getObject(Db.getConn(), "select count(*) from articoli"));        } catch (Exception e) {            e.printStackTrace();        }        if (conta_articoli > 30000) {            griglia_lazy = true;        } else {            griglia_lazy = false;        }        dbRefresh();        this.griglia.dbPanel = this.dati;        this.dati.dbRefresh();        aggiornaSottocategoria();        caricaFornitore();        showListino();        mb.out("frm arti 3");        //events        //PanelEvents dl = new PanelEvents();        //dati.addDbListener(dl);        dati.addDbListener(new DbListener() {            public void statusFired(DbEvent event) {                if (event.getStatus() == tnxDbPanel.STATUS_REFRESHING || event.getStatus() == tnxDbPanel.STATUS_ADDING) {                    showListino(event.getStatus());                    if (frmArtiConListino.this.texTipo.getText().equals("A")) {                        frmArtiConListino.this.grpSel.setSelected(frmArtiConListino.this.rbtAcq.getModel(), true);                    } else if (frmArtiConListino.this.texTipo.getText().equals("V")) {                        frmArtiConListino.this.grpSel.setSelected(frmArtiConListino.this.rbtVen.getModel(), true);                    } else {                        frmArtiConListino.this.grpSel.setSelected(frmArtiConListino.this.rbtEnt.getModel(), true);                    }                    //immagine                    refreshImmagine();                    //carico rag soc fornitore abituale                    caricaFornitore();                    //sottocategoria                    if (event.getStatus() == tnxDbPanel.STATUS_REFRESHING) {                        aggiornaSottocategoria();                    }                } else if (event.getStatus() == tnxDbPanel.STATUS_SAVING) {                    saveListino();                    saveConfezione();                }                if (event.getStatus() == tnxDbPanel.STATUS_ADDING) {                    labImmagine.setText("Nessuna immagine");                    labImmagine.setIcon(null);                }            }        });        if (cheKit.isSelected()) {            btnGestKit.setEnabled(true);        }        mb.out("frm arti 4");        refreshImmagine();        dati.griglia = griglia;        if (dati.isOnSomeRecord) {            dati.dbCheckModificatiReset();            dati.dbCambiaStato(tnxDbPanel.DB_LETTURA);        }        mb.out("frm arti 5");        in_apertura = false;        InvoicexUtil.msgNew(this, dati, new IFunction() {            public void run() {                butNewActionPerformed(null);            }        }, texCodi, "Nessun articolo presente, prosegui con l'inserimento");    }    public void aggiornaSottocategoria() {        sottocategoria.dbClearList();        sottocategoria.dbAddElement("", null);        if (!dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO)) {            System.out.println("SOTTOCATEGORIA refreshing = trova key " + dati.dbGetField("categoria"));            sottocategoria.dbOpenList(Db.getConn(), "select sottocategoria, id from sottocategorie_articoli where id_padre = " + Db.pc(categoria.getSelectedKey(), Types.INTEGER) + " order by sottocategoria", null, false);            sottocategoria.dbTrovaKey(dati.dbGetField("sottocategoria"));        }    }    public void refreshImmagine() {        try {//            String immagine = CastUtils.toString(dati.dbGetField("immagine1"));            String immagine = null;            if (!dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO)) {                immagine = CastUtils.toString(dati.dbGetFieldOnlyNotClosed("immagine1"));                if (StringUtils.isBlank(immagine)) {                    immagine = null;                }            }            System.out.println("refresh immagine: " + immagine);            if (dati.getCampiAggiuntivi() == null) {                dati.setCampiAggiuntivi(new Hashtable());            }            dati.getCampiAggiuntivi().put("immagine1", Db.pc(StringUtils.replace(immagine, "\\", "\\\\"), Types.VARCHAR));            if (StringUtils.isEmpty(immagine)) {                labImmagine.setText("Nessuna immagine");                labImmagine.setIcon(null);            } else {                labImmagine.setText("");//                labImmagine.setIcon(new ImageIcon(immagine));                caricaImmagine(immagine, labImmagine);            }        } catch (Exception e) {            e.printStackTrace();            labImmagine.setText("Nessuna immagine");            labImmagine.setIcon(null);            try {                dati.getCampiAggiuntivi().put("immagine1", "null");            } catch (Exception e2) {            }        }    }    private void caricaFornitore() {        texFornitore.setText("");        if (texFornitoreCodice.getText().trim().length() > 0) {            try {                String fornitore = (String) DbUtils.getObject(Db.getConn(), "select ragione_sociale from clie_forn where codice = " + Db.pc(texFornitoreCodice.getText(), Types.INTEGER));                texFornitore.setText(fornitore);            } catch (Exception e) {            }        }    }    public void trova(String codice) {        dati.ultimoCampo = "codice";        dati.ultimoValore = codice;        System.out.println("find exact:" + griglia.dbFindExact());    }    protected void showListino() {        showListino(null);    }    protected void showListino(Integer status) {        //attivo sempre la nuova gestione che risolve il problema dei prezzi per cliente        if (Sync.isActive() || 1 == 1) {            showListinoSync(status);            return;        }        //showPrezzi        caricamentoPrezzi = true;        //aggiorna prezzi tabListino OLD        String sql;//            faccio vedere comunque tutti i listini a tutti//        if (main.iniPrezziCliente == false) {        //inserisco eventuali righe vuote in articoli_prezzi        sql = "select codice from tipi_listino where descrizione not like 'listino automatico%'";        ResultSet listini = Db.openResultSet(sql);        try {            while (listini.next()) {                sql = "insert into articoli_prezzi (articolo, listino, prezzo) values (";                sql += Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);                sql += ", " + Db.pc(listini.getString(1), java.sql.Types.VARCHAR);                sql += ", " + Db.pc(0, java.sql.Types.DECIMAL);                sql += ")";                Db.executeSql(sql, false);            }        } catch (Exception err) {            err.printStackTrace();        }//        } else {////            //inserisco eventuali righe vuote in articoli_prezzi//            String listinoBase = main.getListinoBase();////            try {//                sql = "insert into articoli_prezzi (articolo, listino, prezzo) values (";//                sql += Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);//                sql += ", " + Db.pc(listinoBase, java.sql.Types.VARCHAR);//                sql += ", " + Db.pc(0, java.sql.Types.DECIMAL);//                sql += ")";//                Db.executeSql(sql, false);//            } catch (Exception err) {//                err.printStackTrace();//            }//        }        //visualizzo//TODO finire per sync                sql = "select tipi_listino.codice, descrizione, prezzo, tipo, ricarico_flag, ricarico_perc, ricarico_listino, 0 as prezzo2, sconto1, sconto2, ap.id from tipi_listino left join articoli_prezzi ap on codice = listino";        sql += " where articolo = " + Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);        sql += " and descrizione not like 'listino automatico%'";        sql += " order by tipi_listino.codice";        ResultSet listino = Db.openResultSet(sql);        cacheModel = new listinoModel(listino, this.dati, this);        //analizzo i dati        for (int i = 0; i < cacheModel.getRowCount(); i++) {            try {                String tipo = (String) cacheModel.getValueAt(i, 3);                String flag = (String) cacheModel.getValueAt(i, 4);                Double perc = CastUtils.toDouble0((BigDecimal) cacheModel.getValueAt(i, 5));                String list = (String) cacheModel.getValueAt(i, 6);                Double sconto1 = CastUtils.toDouble((BigDecimal) cacheModel.getValueAt(i, 8));                Double sconto2 = CastUtils.toDouble((BigDecimal) cacheModel.getValueAt(i, 9));                if (flag != null && flag.equalsIgnoreCase("S")) {                    cacheModel.setValueAt(FormatUtils.formatPerc(perc) + "% su " + list, i, 2);                    sql = "select prezzo from articoli_prezzi where articolo = " + Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR) + " and listino = " + Db.pc(list, java.sql.Types.VARCHAR);                    Double prezzo = ((BigDecimal) DbUtils.getObject(Db.getConn(), sql)).doubleValue();                    prezzo = prezzo + (prezzo / 100d * perc);                    cacheModel.setValueAt(FormatUtils.formatEuroItaMax5(prezzo) + " (" + FormatUtils.formatPerc(perc) + "% su " + list + ")", i, 2);                    cacheModel.setValueAt(prezzo, i, 7);    //prezzo2, serve per memorizzare su salva il prezzo giÃ  calcolato                } else {                    cacheModel.setValueAt(cacheModel.getValueAt(i, 2), i, 7);    //prezzo2, serve per memorizzare su salva il prezzo giÃ  calcolato                }                cacheModel.setValueAt(sconto1, i, 8);                cacheModel.setValueAt(sconto2, i, 9);            } catch (Exception ex) {            }        }        tabListino.setModel(cacheModel);        //imposto le colonne della tabella listino        javax.swing.table.TableColumn col;        col = this.tabListino.getColumn("codice");        col.setPreferredWidth(50);        col = this.tabListino.getColumn("descrizione");        col.setPreferredWidth(150);        col = this.tabListino.getColumn("prezzo");        col.setPreferredWidth(50);        col = this.tabListino.getColumn("sconto1");        col.setPreferredWidth(40);        col = this.tabListino.getColumn("sconto2");        col.setPreferredWidth(40);        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(10));    //id        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(7));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(6));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(5));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(4));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(3));        tabListino.getColumn("prezzo").setCellRenderer(new DefaultTableCellRenderer() {            @Override            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                if (comp instanceof JLabel) {                    JLabel lab = (JLabel) comp;                    lab.setHorizontalAlignment(SwingConstants.RIGHT);                    try {                        Double dbl = null;                        if (value instanceof BigDecimal) {                            dbl = ((BigDecimal) value).doubleValue();                        } else if (value instanceof String) {                            lab.setText((String) value);                        }                        NumberFormat f = NumberFormat.getInstance();                        f.setGroupingUsed(false);                        f.setMinimumFractionDigits(2);                        f.setMaximumFractionDigits(5);                        lab.setText(f.format(dbl));                    } catch (Exception ex) {                        lab.setText(String.valueOf(value));                    }                }                return comp;            }        });        DefaultTableCellRenderer scontoRender = new DefaultTableCellRenderer() {            @Override            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                if (comp instanceof JLabel) {                    JLabel lab = (JLabel) comp;                    lab.setHorizontalAlignment(SwingConstants.RIGHT);                    if (value == null) {                        lab.setText("");                    } else {                        try {                            Double dbl = null;                            if (value instanceof BigDecimal) {                                dbl = ((BigDecimal) value).doubleValue();                            } else {                                dbl = CastUtils.toDouble(value);                            }                            NumberFormat f = NumberFormat.getInstance();                            f.setGroupingUsed(false);                            f.setMinimumFractionDigits(0);                            f.setMaximumFractionDigits(2);                            lab.setText(f.format(dbl));                        } catch (Exception ex) {                            lab.setText(String.valueOf(value));                        }                    }                }                return comp;            }        };        tabListino.getColumn("sconto1").setCellRenderer(scontoRender);        tabListino.getColumn("sconto2").setCellRenderer(scontoRender);        final JTextField textfield = new JTextField();        tabListino.getColumn("prezzo").setCellEditor(new DefaultCellEditor(textfield) {            @Override            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                JTextField textfield2 = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);                textfield2.setHorizontalAlignment(SwingConstants.RIGHT);                textfield2.addKeyListener(new KeyAdapter() {                    @Override                    public void keyTyped(KeyEvent e) {                        if (e.getKeyChar() == '.') {                            e.setKeyChar(',');                        }                    }                });                textfield2.setBorder(null);                Double dbl = null;                System.out.println("get editor " + value + " clas:" + value.getClass());//                if (value instanceof BigDecimal) {//                    dbl = ((BigDecimal) value).doubleValue();//                    NumberFormat f = NumberFormat.getInstance();//                    f.setGroupingUsed(false);//                    f.setMinimumFractionDigits(2);//                    f.setMaximumFractionDigits(5);//                    textfield2.setText(f.format(dbl));//                } else {//                    textfield2.setText("0");//                }                dbl = CastUtils.toDouble0(value);                NumberFormat f = NumberFormat.getInstance();                f.setGroupingUsed(false);                f.setMinimumFractionDigits(2);                f.setMaximumFractionDigits(5);                textfield2.setText(f.format(dbl));                return textfield2;            }        });        DefaultCellEditor scontoEditor = new DefaultCellEditor(textfield) {            @Override            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                JTextField textfield2 = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);                textfield2.setBorder(null);                textfield2.setHorizontalAlignment(SwingConstants.RIGHT);                Double dbl = null;                if (value == null) {                    textfield2.setText("");                } else {                    System.out.println("scontoEditor get editor " + value + " clas:" + value.getClass());                    dbl = CastUtils.toDouble0(value);                    NumberFormat f = NumberFormat.getInstance();                    f.setGroupingUsed(false);                    f.setMinimumFractionDigits(0);                    f.setMaximumFractionDigits(2);                    textfield2.setText(f.format(dbl));                }                return textfield2;            }            @Override            public Object getCellEditorValue() {                Object o = super.getCellEditorValue();                if (o == null || (o instanceof String && o.toString().trim().length() == 0)) {                    return null;                }                return o;            }        };        tabListino.getColumn("sconto1").setCellEditor(scontoEditor);        tabListino.getColumn("sconto2").setCellEditor(scontoEditor);        caricamentoPrezzi = false;    }    synchronized protected void showListinoSync(Integer status) {        //showPrezzi        caricamentoPrezzi = true;        //aggiorna prezzi tabListino OLD        String sql;        //inserisco eventuali righe vuote in articoli_prezzi        if (status != null && status == tnxDbPanel.STATUS_ADDING) {            //query per avere elenco listini con prezzi vuoti            sql = "select tipi_listino.codice, descrizione, 0 as prezzo, tipo, ricarico_flag, ricarico_perc, ricarico_listino, \n"                    + "0 as prezzo2, null as sconto1, null as sconto2, null as id  \n"                    + "from tipi_listino \n"                    + "where descrizione not like 'listino automatico%' \n"                    + "order by tipi_listino.codice";        } else {            sql = "select codice from tipi_listino where descrizione not like 'listino automatico%'";            ResultSet listini = Db.openResultSet(sql);            try {                while (listini.next()) {                    sql = "insert into articoli_prezzi (articolo, listino, prezzo) values (";                    sql += Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);                    sql += ", " + Db.pc(listini.getString(1), java.sql.Types.VARCHAR);                    sql += ", " + Db.pc(0, java.sql.Types.DECIMAL);                    sql += ")";                    Db.executeSql(sql, false);                }            } catch (Exception err) {                err.printStackTrace();            }            //visualizzo            sql = "select tipi_listino.codice, descrizione, prezzo, tipo, ricarico_flag, ricarico_perc, ricarico_listino, 0 as prezzo2, sconto1, sconto2, ap.id  from tipi_listino left join articoli_prezzi ap on codice = listino";            sql += " where articolo = " + Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);            sql += " and descrizione not like 'listino automatico%'";            sql += " order by tipi_listino.codice";        }        System.out.println("sql prezzi listino: " + sql);        ResultSet listino = Db.openResultSet(sql);        cacheModel = new listinoModel(listino, this.dati, this);        //analizzo i dati        for (int i = 0; i < cacheModel.getRowCount(); i++) {            try {                String tipo = (String) cacheModel.getValueAt(i, cacheModel.colonne.get("tipo"));                String flag = (String) cacheModel.getValueAt(i, cacheModel.colonne.get("ricarico_flag"));                Double perc = CastUtils.toDouble0((BigDecimal) cacheModel.getValueAt(i, cacheModel.colonne.get("ricarico_perc")));                String list = (String) cacheModel.getValueAt(i, cacheModel.colonne.get("ricarico_listino"));                Double sconto1 = CastUtils.toDouble((BigDecimal) cacheModel.getValueAt(i, cacheModel.colonne.get("sconto1")));                Double sconto2 = CastUtils.toDouble((BigDecimal) cacheModel.getValueAt(i, cacheModel.colonne.get("sconto2")));                if (flag != null && flag.equalsIgnoreCase("S")) {                    cacheModel.setValueAt(FormatUtils.formatPerc(perc) + "% su " + list, i, cacheModel.colonne.get("prezzo"));                    sql = "select prezzo from articoli_prezzi where articolo = " + Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR) + " and listino = " + Db.pc(list, java.sql.Types.VARCHAR);                    Double prezzo = ((BigDecimal) DbUtils.getObject(Db.getConn(), sql)).doubleValue();                    prezzo = prezzo + (prezzo / 100d * perc);                    cacheModel.setValueAt(FormatUtils.formatEuroItaMax5(prezzo) + " (" + FormatUtils.formatPerc(perc) + "% su " + list + ")", i, cacheModel.colonne.get("prezzo"));                    cacheModel.setValueAt(prezzo, i, cacheModel.colonne.get("prezzo2"));    //prezzo2, serve per memorizzare su salva il prezzo giÃ  calcolato                } else {                    cacheModel.setValueAt(cacheModel.getValueAt(i, 2), i, cacheModel.colonne.get("prezzo2"));    //prezzo2, serve per memorizzare su salva il prezzo giÃ  calcolato                }                cacheModel.setValueAt(sconto1, i, cacheModel.colonne.get("sconto1"));                cacheModel.setValueAt(sconto2, i, cacheModel.colonne.get("sconto2"));            } catch (Exception ex) {            }        }        tabListino.setModel(cacheModel);        javax.swing.table.TableColumn col;//        col = this.tabListino.getColumn("id");//        col.setMinWidth(0);//        col.setMaxWidth(0);//        col.setPreferredWidth(0);//        col.setWidth(0);        col = this.tabListino.getColumn("codice");        col.setPreferredWidth(50);        col = this.tabListino.getColumn("descrizione");        col.setPreferredWidth(150);        col = this.tabListino.getColumn("prezzo");        col.setPreferredWidth(50);        col = this.tabListino.getColumn("sconto1");        col.setPreferredWidth(40);        col = this.tabListino.getColumn("sconto2");        col.setPreferredWidth(40);        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(cacheModel.colonne.get("id")));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(cacheModel.colonne.get("prezzo2")));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(cacheModel.colonne.get("ricarico_listino")));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(cacheModel.colonne.get("ricarico_perc")));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(cacheModel.colonne.get("ricarico_flag")));        tabListino.getColumnModel().removeColumn(tabListino.getColumnModel().getColumn(cacheModel.colonne.get("tipo")));        tabListino.getColumn("prezzo").setCellRenderer(new DefaultTableCellRenderer() {            @Override            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                if (comp instanceof JLabel) {                    JLabel lab = (JLabel) comp;                    lab.setHorizontalAlignment(SwingConstants.RIGHT);                    try {                        Double dbl = null;                        if (value instanceof BigDecimal) {                            dbl = ((BigDecimal) value).doubleValue();                        } else if (value instanceof String) {                            lab.setText((String) value);                        } else {                            dbl = cu.d(value);                        }                        NumberFormat f = NumberFormat.getInstance();                        f.setGroupingUsed(false);                        f.setMinimumFractionDigits(2);                        f.setMaximumFractionDigits(5);                        lab.setText(f.format(dbl));                    } catch (Exception ex) {                        lab.setText(String.valueOf(value));                    }                }                return comp;            }        });        DefaultTableCellRenderer scontoRender = new DefaultTableCellRenderer() {            @Override            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                if (comp instanceof JLabel) {                    JLabel lab = (JLabel) comp;                    lab.setHorizontalAlignment(SwingConstants.RIGHT);                    if (value == null) {                        lab.setText("");                    } else {                        try {                            Double dbl = null;                            if (value instanceof BigDecimal) {                                dbl = ((BigDecimal) value).doubleValue();                            } else {                                dbl = CastUtils.toDouble(value);                            }                            NumberFormat f = NumberFormat.getInstance();                            f.setGroupingUsed(false);                            f.setMinimumFractionDigits(0);                            f.setMaximumFractionDigits(2);                            lab.setText(f.format(dbl));                        } catch (Exception ex) {                            lab.setText(String.valueOf(value));                        }                    }                }                return comp;            }        };        tabListino.getColumn("sconto1").setCellRenderer(scontoRender);        tabListino.getColumn("sconto2").setCellRenderer(scontoRender);        final JTextField textfield = new JTextField();        tabListino.getColumn("prezzo").setCellEditor(new DefaultCellEditor(textfield) {            @Override            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                JTextField textfield2 = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);                textfield2.setHorizontalAlignment(SwingConstants.RIGHT);                textfield2.addKeyListener(new KeyAdapter() {                    @Override                    public void keyTyped(KeyEvent e) {                        if (e.getKeyChar() == '.') {                            e.setKeyChar(',');                        }                    }                });                textfield2.setBorder(null);                Double dbl = null;                dbl = CastUtils.toDouble0(value);                NumberFormat f = NumberFormat.getInstance();                f.setGroupingUsed(false);                f.setMinimumFractionDigits(2);                f.setMaximumFractionDigits(5);                textfield2.setText(f.format(dbl));                return textfield2;            }            @Override            public Object getCellEditorValue() {                return cu.d0(super.getCellEditorValue());            }        });        DefaultCellEditor scontoEditor = new DefaultCellEditor(textfield) {            @Override            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                JTextField textfield2 = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);                textfield2.setBorder(null);                textfield2.setHorizontalAlignment(SwingConstants.RIGHT);                Double dbl = null;                if (value == null) {                    textfield2.setText("");                } else {                    System.out.println("scontoEditor get editor " + value + " clas:" + value.getClass());                    dbl = CastUtils.toDouble0(value);                    NumberFormat f = NumberFormat.getInstance();                    f.setGroupingUsed(false);                    f.setMinimumFractionDigits(0);                    f.setMaximumFractionDigits(2);                    textfield2.setText(f.format(dbl));                }                return textfield2;            }            @Override            public Object getCellEditorValue() {                Object o = super.getCellEditorValue();                if (o == null || (o instanceof String && o.toString().trim().length() == 0)) {                    return null;                }                return o;            }        };        tabListino.getColumn("sconto1").setCellEditor(scontoEditor);        tabListino.getColumn("sconto2").setCellEditor(scontoEditor);        try {            //Sync memorizzo tabella prezzi per confronto al salvataggio            list_prezzi_pre = DbUtils.getListMapMapFromTableModel(cacheModel, "id");        } catch (Exception ex) {            SwingUtils.showExceptionMessage(this, ex);        }        caricamentoPrezzi = false;    }    protected void saveListino() {        //attivo sempre la nuova gestione che risolve il problema dei prezzi per cliente        if (Sync.isActive() || 1 == 1) {            saveListinoSync();            return;        }        //savePrezzi        String sql;        NumberFormat form = NumberFormat.getInstance();//        String prezzo;        Double prezzo;        //prima dovrei controllare i prezzi inseriti        //prima elimino i prezzi da reinserire        sql = "delete from articoli_prezzi";        sql += " where articolo = " + Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);        if (Db.executeSql(sql) == true) {            for (int i = 0; i < tabListino.getRowCount(); i++) {                try {                    Object val = tabListino.getModel().getValueAt(i, 7);   //prendo il nuovo campo prezzo calcolato o modificato                    if (val instanceof BigDecimal) {                        prezzo = ((BigDecimal) tabListino.getModel().getValueAt(i, 7)).doubleValue();                    } else if (val instanceof Double) {                        prezzo = (Double) tabListino.getModel().getValueAt(i, 7);                    } else {                        prezzo = Db.getDouble(tabListino.getModel().getValueAt(i, 7).toString());                    }                } catch (Exception err) {                    err.printStackTrace();                    prezzo = 0d;                }                System.out.println(tabListino.getValueAt(i, 0) + " : " + prezzo);                Double sconto1 = CastUtils.toDouble(tabListino.getModel().getValueAt(i, 8));                Double sconto2 = CastUtils.toDouble(tabListino.getModel().getValueAt(i, 9));                sql = "insert into articoli_prezzi (articolo, listino, prezzo, sconto1, sconto2) values (";                sql += Db.pc(this.texCodi.getText(), java.sql.Types.VARCHAR);                sql += ", " + Db.pc(tabListino.getValueAt(i, 0), java.sql.Types.VARCHAR);                sql += ", " + Db.pc(prezzo, java.sql.Types.DECIMAL);                sql += ", " + Db.pc(sconto1, java.sql.Types.DECIMAL);                sql += ", " + Db.pc(sconto2, java.sql.Types.DECIMAL);                sql += ")";                Db.executeSql(sql);            }        } else {            javax.swing.JOptionPane.showMessageDialog(this, "Impossibile eliminare i prezzi precedenti", "Errore", javax.swing.JOptionPane.ERROR_MESSAGE);        }        //elimino i records temporanei        sql = "delete from articoli_prezzi";        sql += " where articolo = '' or articolo is null";        Db.executeSql(sql);    }    protected void saveListinoSync() {        //savePrezzi        String sql;        NumberFormat form = NumberFormat.getInstance();        Double prezzo;        //elimino solo record non piÃ¹ presenti tramite confronto con list_prezzi_pre        try {            if (dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO)) {                //sono tutti inserimenti perchÃ¨ id null                List<Map> list_prezzi_post = DbUtils.getListMapFromTableModel(cacheModel);                for (Map m : list_prezzi_post) {                    DebugFastUtils.dump(m);                    m.put("listino", m.get("codice"));                    clean(m);                    m.put("articolo", texCodi.getText());                    HashMap mins = new HashMap();                    mins.put("post", m);                    Sync.exec(Db.getConn(), Sync.INSERT, "articoli_prezzi", mins);                }            } else {                HashMap list_prezzi_post = DbUtils.getListMapMapFromTableModel(cacheModel, "id");                //rimuovo campi che non vanno analizzati                Set keys = list_prezzi_pre.keySet();                for (Object key : keys) {                    clean((Map) list_prezzi_pre.get(key));                }                keys = list_prezzi_post.keySet();                for (Object key : keys) {                    clean((Map) list_prezzi_post.get(key));                }                List<Map> diffs = Sync.getDifferences(list_prezzi_pre, list_prezzi_post);                System.out.println("diffs = " + diffs);                Sync.execDifferences(Db.getConn(), diffs, "articoli_prezzi");            }            try {                //Sync memorizzo tabella prezzi per confronto al salvataggio                list_prezzi_pre = DbUtils.getListMapMapFromTableModel(cacheModel, "id");            } catch (Exception ex) {                SwingUtils.showExceptionMessage(this, ex);            }        } catch (Exception e) {            SwingUtils.showExceptionMessage(this, e);        }    }    protected void saveConfezione() {    }    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents    private void initComponents() {        grpSel = new javax.swing.ButtonGroup();        popupImmagine = new javax.swing.JPopupMenu();        menScegli = new javax.swing.JMenuItem();        menElimina = new javax.swing.JMenuItem();        panAlto = new javax.swing.JPanel();        jToolBar1 = new javax.swing.JToolBar();        butNew = new javax.swing.JButton();        jLabel1 = new javax.swing.JLabel();        butDele = new javax.swing.JButton();        jLabel13 = new javax.swing.JLabel();        butFind = new javax.swing.JButton();        jLabel131 = new javax.swing.JLabel();        butFirs = new javax.swing.JButton();        butPrev = new javax.swing.JButton();        butNext = new javax.swing.JButton();        butLast = new javax.swing.JButton();        jLabel132 = new javax.swing.JLabel();        butStampaElenco = new javax.swing.JButton();        butDuplica = new javax.swing.JButton();        butImportExcel = new javax.swing.JButton();        butVariazioneListini = new javax.swing.JButton();        jToolBar3 = new javax.swing.JToolBar();        jLabel9 = new javax.swing.JLabel();        texSearch = new javax.swing.JTextField();        mostratutti = new javax.swing.JButton();        panFiltri = new javax.swing.JPanel();        linkAggiungiFiltro = new org.jdesktop.swingx.JXHyperlink();        tabCent = new javax.swing.JTabbedPane();        panDati = new javax.swing.JPanel();        dati = new tnxbeans.tnxDbPanel();        texUm = new tnxbeans.tnxTextField();        texCodi = new tnxbeans.tnxTextField();        jLabel2 = new javax.swing.JLabel();        jLabel21 = new javax.swing.JLabel();        jLabel22 = new javax.swing.JLabel();        jLabel231 = new javax.swing.JLabel();        jLabel24 = new javax.swing.JLabel();        jLabel4 = new javax.swing.JLabel();        texUm1 = new tnxbeans.tnxTextField();        cheFlagConfezione = new tnxbeans.tnxCheckBox();        texDescrizioneEn = new tnxbeans.tnxMemoField();        texDescrizione = new tnxbeans.tnxMemoField();        jLabel6 = new javax.swing.JLabel();        texUm2 = new tnxbeans.tnxTextField();        jLabel25 = new javax.swing.JLabel();        jLabel7 = new javax.swing.JLabel();        texUm3 = new tnxbeans.tnxTextField();        labKg = new javax.swing.JLabel();        tnxCheckBox1 = new tnxbeans.tnxCheckBox();        rbtAcq = new javax.swing.JRadioButton();        rbtVen = new javax.swing.JRadioButton();        rbtEnt = new javax.swing.JRadioButton();        jLabel8 = new javax.swing.JLabel();        texTipo = new tnxbeans.tnxTextField();        iva = new tnxbeans.tnxComboField();        cheKit = new tnxbeans.tnxCheckBox();        btnGestKit = new javax.swing.JButton();        cheGestioneMatricole = new tnxbeans.tnxCheckBox();        jSeparator1 = new javax.swing.JSeparator();        jSeparator2 = new javax.swing.JSeparator();        jLabel10 = new javax.swing.JLabel();        jLabel14 = new javax.swing.JLabel();        texCodFor1 = new tnxbeans.tnxTextField();        texUm5 = new tnxbeans.tnxTextField();        labImmagine = new javax.swing.JLabel();        cheGestioneLotti = new tnxbeans.tnxCheckBox();        non_applicare_perc = new tnxbeans.tnxCheckBox();        texCodFor2 = new tnxbeans.tnxTextField();        texCodFor3 = new tnxbeans.tnxTextField();        texCodFor4 = new tnxbeans.tnxTextField();        texCodFor5 = new tnxbeans.tnxTextField();        texCodFor6 = new tnxbeans.tnxTextField();        jLabel232 = new javax.swing.JLabel();        texUm4 = new tnxbeans.tnxTextField();        cheIsDescrizione = new tnxbeans.tnxCheckBox();        jLabel11 = new javax.swing.JLabel();        texFornitore = new javax.swing.JTextField();        apriFornitori = new MyBasicArrowButton(BasicArrowButton.SOUTH, UIManager.getColor("ComboBox.buttonBackground"), UIManager.getColor("ComboBox.buttonShadow"), UIManager.getColor("ComboBox.buttonDarkShadow"), UIManager.getColor("ComboBox.buttonHighlight"));        texFornitoreCodice = new tnxbeans.tnxTextField();        texFornitoreCodice.setVisible(false);        jLabel3 = new javax.swing.JLabel();        jScrollPane2 = new javax.swing.JScrollPane();        tabListino = new MyTable();        ;        labPrezziCliente = new javax.swing.JLabel();        lab_categoria = new javax.swing.JLabel();        lab_sottocategoria = new javax.swing.JLabel();        categoria = new tnxbeans.tnxComboField();        sottocategoria = new tnxbeans.tnxComboField();        jSeparator3 = new javax.swing.JSeparator();        jLabel15 = new javax.swing.JLabel();        cheFatturaAlRinnovo = new tnxbeans.tnxCheckBox();        cheFatturaAlRinnovo.setVisible(false);        panel_contabilita = new javax.swing.JPanel();        panXmlPa = new tnxbeans.tnxDbPanel();        jLabel5 = new javax.swing.JLabel();        linkcodiceufficio = new org.jdesktop.swingx.JXHyperlink();        jLabel23 = new javax.swing.JLabel();        jLabel12 = new javax.swing.JLabel();        xmlpaDispMedValore = new tnxbeans.tnxTextField();        jLabel26 = new javax.swing.JLabel();        xmlpaDispMedTipo = new tnxbeans.tnxComboField();        jLabel27 = new javax.swing.JLabel();        texCodi1 = new tnxbeans.tnxTextField();        jLabel28 = new javax.swing.JLabel();        texCodi2 = new tnxbeans.tnxTextField();        panElen = new javax.swing.JPanel();        jPanel2 = new javax.swing.JPanel();        listini = new javax.swing.JComboBox();        jLabel17 = new javax.swing.JLabel();        jScrollPane1 = new javax.swing.JScrollPane();        griglia = new tnxDbGrid() {            public void repaint(long tm, int x, int y, int width, int height) {                super.repaint(tm, x, y, width, height);                OverlayableUtils.repaintOverlayable(this);             }        };        jPanel1 = new javax.swing.JPanel();        butUndo = new javax.swing.JButton();        butSave = new javax.swing.JButton();        menScegli.setText("Scegli Immagine");        menScegli.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menScegliActionPerformed(evt);            }        });        popupImmagine.add(menScegli);        menElimina.setText("Elimina");        menElimina.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menEliminaActionPerformed(evt);            }        });        popupImmagine.add(menElimina);        setClosable(true);        setIconifiable(true);        setMaximizable(true);        setResizable(true);        setTitle("Articoli");        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameClosing(evt);            }            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {            }        });        panAlto.setLayout(new java.awt.BorderLayout());        jToolBar1.setFloatable(false);        jToolBar1.setRollover(true);        butNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNew.setText("Nuovo");        butNew.setIconTextGap(1);        butNew.setMargin(new java.awt.Insets(2, 2, 2, 2));        butNew.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNewActionPerformed(evt);            }        });        jToolBar1.add(butNew);        jLabel1.setText(" ");        jToolBar1.add(jLabel1);        butDele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        butDele.setText("Elimina");        butDele.setIconTextGap(1);        butDele.setMargin(new java.awt.Insets(2, 2, 2, 2));        butDele.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDeleActionPerformed(evt);            }        });        jToolBar1.add(butDele);        jLabel13.setText(" ");        jToolBar1.add(jLabel13);        butFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N        butFind.setText("Trova");        butFind.setMargin(new java.awt.Insets(2, 2, 2, 2));        butFind.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butFindActionPerformed(evt);            }        });        jToolBar1.add(butFind);        jLabel131.setText(" ");        jToolBar1.add(jLabel131);        butFirs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-first.png"))); // NOI18N        butFirs.setMargin(new java.awt.Insets(2, 2, 2, 2));        butFirs.setName("vai_primo"); // NOI18N        butFirs.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butFirsActionPerformed(evt);            }        });        jToolBar1.add(butFirs);        butPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-previous.png"))); // NOI18N        butPrev.setMargin(new java.awt.Insets(2, 2, 2, 2));        butPrev.setName("vai_precedente"); // NOI18N        butPrev.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butPrevActionPerformed(evt);            }        });        jToolBar1.add(butPrev);        butNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-next.png"))); // NOI18N        butNext.setMargin(new java.awt.Insets(2, 2, 2, 2));        butNext.setName("vai_successivo"); // NOI18N        butNext.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNextActionPerformed(evt);            }        });        jToolBar1.add(butNext);        butLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-last.png"))); // NOI18N        butLast.setMargin(new java.awt.Insets(2, 2, 2, 2));        butLast.setName("vai_ultimo"); // NOI18N        butLast.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butLastActionPerformed(evt);            }        });        jToolBar1.add(butLast);        jLabel132.setText(" ");        jToolBar1.add(jLabel132);        butStampaElenco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampaElenco.setText("Stampa elenco");        butStampaElenco.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampaElenco.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaElencoActionPerformed(evt);            }        });        jToolBar1.add(butStampaElenco);        butDuplica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-copy.png"))); // NOI18N        butDuplica.setText("Duplica");        butDuplica.setFocusable(false);        butDuplica.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        butDuplica.setMargin(new java.awt.Insets(2, 2, 2, 2));        butDuplica.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butDuplica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDuplicaActionPerformed(evt);            }        });        jToolBar1.add(butDuplica);        butImportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-jump.png"))); // NOI18N        butImportExcel.setText("Import da Excel");        butImportExcel.setFocusable(false);        butImportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        butImportExcel.setMargin(new java.awt.Insets(2, 2, 2, 2));        butImportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butImportExcel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butImportExcelActionPerformed(evt);            }        });        jToolBar1.add(butImportExcel);        butVariazioneListini.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find-replace.png"))); // NOI18N        butVariazioneListini.setText("Variazione listini");        butVariazioneListini.setFocusable(false);        butVariazioneListini.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        butVariazioneListini.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butVariazioneListini.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butVariazioneListiniActionPerformed(evt);            }        });        jToolBar1.add(butVariazioneListini);        panAlto.add(jToolBar1, java.awt.BorderLayout.NORTH);        jToolBar3.setFloatable(false);        jToolBar3.setRollover(true);        jLabel9.setText(" Cerca ");        jToolBar3.add(jLabel9);        texSearch.setColumns(20);        texSearch.setMaximumSize(new java.awt.Dimension(250, 20));        texSearch.setMinimumSize(new java.awt.Dimension(6, 5));        texSearch.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                texSearchActionPerformed(evt);            }        });        texSearch.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texSearchKeyPressed(evt);            }            public void keyReleased(java.awt.event.KeyEvent evt) {                texSearchKeyReleased(evt);            }        });        jToolBar3.add(texSearch);        mostratutti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N        mostratutti.setText("Mostra Tutti");        mostratutti.setBorderPainted(false);        mostratutti.setFocusable(false);        mostratutti.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        mostratutti.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        mostratutti.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                mostratuttiActionPerformed(evt);            }        });        jToolBar3.add(mostratutti);        panAlto.add(jToolBar3, java.awt.BorderLayout.CENTER);        linkAggiungiFiltro.setText("aggiungi filtro");        linkAggiungiFiltro.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                linkAggiungiFiltroActionPerformed(evt);            }        });        panFiltri.add(linkAggiungiFiltro);        panAlto.add(panFiltri, java.awt.BorderLayout.SOUTH);        getContentPane().add(panAlto, java.awt.BorderLayout.NORTH);        tabCent.setName("dati"); // NOI18N        panDati.setName("dati"); // NOI18N        panDati.setLayout(new java.awt.BorderLayout());        texUm.setText("um");        texUm.setDbDescCampo("");        texUm.setDbNomeCampo("um");        texUm.setDbTipoCampo("");        texUm.setmaxChars(3);        texCodi.setText("codice");        texCodi.setDbDescCampo("");        texCodi.setDbNomeCampo("codice");        texCodi.setDbTipoCampo("");        texCodi.setmaxChars(20);        texCodi.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texCodiFocusLost(evt);            }        });        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2.setText("unitÃ  di misura");        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel21.setText("codice");        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel22.setText("descrizione");        jLabel231.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel231.setText("iva");        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel24.setText("in inglese");        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel4.setText("in inglese");        texUm1.setText("um");        texUm1.setDbDescCampo("");        texUm1.setDbNomeCampo("um_en");        texUm1.setDbTipoCampo("");        texUm1.setmaxChars(3);        cheFlagConfezione.setBackground(new java.awt.Color(255, 51, 51));        cheFlagConfezione.setText("flag confezione");        cheFlagConfezione.setDbDescCampo("");        cheFlagConfezione.setDbNomeCampo("flag_confezione");        cheFlagConfezione.setDbTipoCampo("");        cheFlagConfezione.setVisible(false);        texDescrizioneEn.setDbNomeCampo("descrizione_en");        texDescrizione.setDbNomeCampo("descrizione");        texDescrizione.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusGained(java.awt.event.FocusEvent evt) {                texDescrizioneFocusGained(evt);            }        });        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel6.setText("peso");        texUm2.setText("kg");        texUm2.setDbDescCampo("");        texUm2.setDbNomeCampo("peso_kg");        texUm2.setDbTipoCampo("numerico");        texUm2.setmaxChars(15);        texUm2.setName("peso"); // NOI18N        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        jLabel25.setText("Kg");        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel7.setText("peso/collo");        texUm3.setText("kg");        texUm3.setDbDescCampo("");        texUm3.setDbNomeCampo("peso_kg_collo");        texUm3.setDbTipoCampo("numerico");        texUm3.setmaxChars(15);        labKg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        labKg.setText("Kg");        tnxCheckBox1.setText("Servizio");        tnxCheckBox1.setToolTipText("Nel caso di articolo di tipo Servizio esso non verrÃ  movimentato");        tnxCheckBox1.setDbDescCampo("");        tnxCheckBox1.setDbNomeCampo("servizio");        tnxCheckBox1.setDbTipoCampo("");        tnxCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        tnxCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        tnxCheckBox1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                tnxCheckBox1ActionPerformed(evt);            }        });        grpSel.add(rbtAcq);        rbtAcq.setText("Acquisto");        rbtAcq.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                rbtAcqActionPerformed(evt);            }        });        grpSel.add(rbtVen);        rbtVen.setText("Vendita");        rbtVen.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                rbtVenActionPerformed(evt);            }        });        grpSel.add(rbtEnt);        rbtEnt.setText("Entrambi");        rbtEnt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                rbtEntActionPerformed(evt);            }        });        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel8.setText("tipologia");        jLabel8.setFocusable(false);        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        texTipo.setBackground(new java.awt.Color(255, 51, 51));        texTipo.setText("tipo");        texTipo.setDbNomeCampo("tipo");        iva.setEditable(false);        iva.setDbDescCampo("");        iva.setDbNomeCampo("iva");        iva.setDbTipoCampo("");        iva.setDbTrovaMentreScrive(true);        iva.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {            }            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {            }            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {                ivaPopupMenuWillBecomeVisible(evt);            }        });        cheKit.setText("KIT");        cheKit.setToolTipText("<html>Seleziona nel caso di articolo composto da altri articoli, in questo caso potrai<br>definire la sua composizione dal pulsante 'GESTISCI KIT' e al momento della <br>movimentazione verrÃ Â  movimentato sia questo articolo sia gli articoli che lo compongono</html>");        cheKit.setDbDescCampo("");        cheKit.setDbNomeCampo("flag_kit");        cheKit.setDbTipoCampo("");        cheKit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        cheKit.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);        cheKit.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                cheKitItemStateChanged(evt);            }        });        btnGestKit.setText("GESTISCI KIT");        btnGestKit.setEnabled(false);        btnGestKit.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnGestKitActionPerformed(evt);            }        });        cheGestioneMatricole.setText("Gestione matricole");        cheGestioneMatricole.setToolTipText("<html>\nAbilitando quest'attributo ogni volta che si va a movimentare l'articolo verranno richiesti N codici matricola (o serial number) per la quantitÃ  del movimento\n</html>");        cheGestioneMatricole.setDbDescCampo("");        cheGestioneMatricole.setDbNomeCampo("gestione_matricola");        cheGestioneMatricole.setDbTipoCampo("");        cheGestioneMatricole.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                cheGestioneMatricoleItemStateChanged(evt);            }        });        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel10.setText("codice fornitore");        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel14.setText("codice a barre");        texCodFor1.setColumns(10);        texCodFor1.setText("codice_fornitore");        texCodFor1.setDbDescCampo("");        texCodFor1.setDbNomeCampo("codice_fornitore");        texCodFor1.setDbTipoCampo("");        texUm5.setText("codice_a_barre");        texUm5.setDbDescCampo("");        texUm5.setDbNomeCampo("codice_a_barre");        texUm5.setDbTipoCampo("");        labImmagine.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);        labImmagine.setText("Nessuna immagine");        labImmagine.setToolTipText("Clicca con il tasto destro per le opzioni");        labImmagine.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.shadow")));        labImmagine.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                labImmagineMouseClicked(evt);            }        });        cheGestioneLotti.setText("Gestione lotti");        cheGestioneLotti.setToolTipText("<html>Abilitando quest'attributo ogni volta che si va a movimentare l'articolo verra' richiesto il numero del lotto.\n<br>\nIn fase di carico si deve inserire il numero del lotto, in fase di scarico si deve scegliere fra i lotti disponibili.<br>\n</html>");        cheGestioneLotti.setDbDescCampo("");        cheGestioneLotti.setDbNomeCampo("gestione_lotti");        cheGestioneLotti.setDbTipoCampo("");        cheGestioneLotti.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                cheGestioneLottiItemStateChanged(evt);            }        });        non_applicare_perc.setText("Non applicare la maggiorazione o diminuzione sui listini a percentuale");        non_applicare_perc.setDbNomeCampo("non_applicare_percentuale");        texCodFor2.setColumns(10);        texCodFor2.setText("codice_fornitore");        texCodFor2.setDbDescCampo("");        texCodFor2.setDbNomeCampo("codice_fornitore2");        texCodFor2.setDbTipoCampo("");        texCodFor3.setColumns(10);        texCodFor3.setText("codice_fornitore");        texCodFor3.setDbDescCampo("");        texCodFor3.setDbNomeCampo("codice_fornitore3");        texCodFor3.setDbTipoCampo("");        texCodFor4.setColumns(10);        texCodFor4.setText("codice_fornitore");        texCodFor4.setDbDescCampo("");        texCodFor4.setDbNomeCampo("codice_fornitore4");        texCodFor4.setDbTipoCampo("");        texCodFor5.setColumns(10);        texCodFor5.setText("codice_fornitore");        texCodFor5.setDbDescCampo("");        texCodFor5.setDbNomeCampo("codice_fornitore5");        texCodFor5.setDbTipoCampo("");        texCodFor6.setColumns(10);        texCodFor6.setText("codice_fornitore");        texCodFor6.setDbDescCampo("");        texCodFor6.setDbNomeCampo("codice_fornitore6");        texCodFor6.setDbTipoCampo("");        jLabel232.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel232.setText("posizione magazzino");        texUm4.setColumns(20);        texUm4.setDbDescCampo("");        texUm4.setDbNomeCampo("posizione_magazzino");        texUm4.setDbTipoCampo("");        texUm4.setmaxChars(3);        cheIsDescrizione.setText("Descrizione");        cheIsDescrizione.setToolTipText("Nel caso di articolo di tipo Descrizione verrÃ  visualizzato come descrizione per l'intera riga in stampa");        cheIsDescrizione.setDbDescCampo("");        cheIsDescrizione.setDbNomeCampo("is_descrizione");        cheIsDescrizione.setDbTipoCampo("");        cheIsDescrizione.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        cheIsDescrizione.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel11.setText("fornitore abituale");        apriFornitori.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                apriFornitoriActionPerformed(evt);            }        });        texFornitoreCodice.setBackground(new java.awt.Color(255, 51, 0));        texFornitoreCodice.setColumns(1);        texFornitoreCodice.setText("fornitore");        texFornitoreCodice.setDbDefault("vuoto");        texFornitoreCodice.setDbDescCampo("");        texFornitoreCodice.setDbNomeCampo("fornitore");        texFornitoreCodice.setDbNullSeVuoto(true);        texFornitoreCodice.setDbTipoCampo("");        texFornitoreCodice.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texFornitoreCodiceFocusLost(evt);            }        });        texFornitoreCodice.addPropertyChangeListener(new java.beans.PropertyChangeListener() {            public void propertyChange(java.beans.PropertyChangeEvent evt) {                texFornitoreCodicePropertyChange(evt);            }        });        texFornitoreCodice.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texFornitoreCodiceKeyPressed(evt);            }        });        jLabel3.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N        jLabel3.setText("Prezzi listini");        tabListino.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                "Title 1", "Title 2", "Title 3", "Title 4"            }        ));        tabListino.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);        jScrollPane2.setViewportView(tabListino);        if (tabListino.getColumnModel().getColumnCount() > 0) {            tabListino.getColumnModel().getColumn(0).setPreferredWidth(50);            tabListino.getColumnModel().getColumn(1).setPreferredWidth(150);            tabListino.getColumnModel().getColumn(2).setPreferredWidth(50);            tabListino.getColumnModel().getColumn(3).setPreferredWidth(50);        }        labPrezziCliente.setBackground(new java.awt.Color(255, 153, 153));        labPrezziCliente.setText("<html>Hai abilitato la gestione dei Prezzi per Cliente e devi gestirli direttamente dall' anag. Cliente<br>Da qui puoi gestire solo i listini generici non generati in automatico per ogni Cliente.</html>");        labPrezziCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 102), 2));        labPrezziCliente.setOpaque(true);        lab_categoria.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        lab_categoria.setText("categoria");        lab_sottocategoria.setText("sotto categoria");        categoria.setEditable(false);        categoria.setDbDescCampo("");        categoria.setDbNomeCampo("categoria");        categoria.setDbNullSeVuoto(true);        categoria.setDbTipoCampo("");        categoria.setDbTrovaMentreScrive(true);        categoria.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                categoriaItemStateChanged(evt);            }        });        categoria.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {            }            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {            }            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {                categoriaPopupMenuWillBecomeVisible(evt);            }        });        sottocategoria.setEditable(false);        sottocategoria.setDbDescCampo("");        sottocategoria.setDbNomeCampo("sottocategoria");        sottocategoria.setDbNullSeVuoto(true);        sottocategoria.setDbRiempire(false);        sottocategoria.setDbTipoCampo("");        sottocategoria.setDbTrovaMentreScrive(true);        sottocategoria.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                sottocategoriaItemStateChanged(evt);            }        });        sottocategoria.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {            }            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {            }            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {                sottocategoriaPopupMenuWillBecomeVisible(evt);            }        });        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);        jLabel15.setText(" ");        cheFatturaAlRinnovo.setText("Fattura al rinnovo");        cheFatturaAlRinnovo.setToolTipText("Il programma Scadenze di Lorenzo creerÃ  la fattura al momento del rinnovo/acquisto e non al momento dell'effettivo pagamento");        cheFatturaAlRinnovo.setDbDescCampo("");        cheFatturaAlRinnovo.setDbNomeCampo("fattura_al_rinnovo");        cheFatturaAlRinnovo.setDbRiempire(false);        cheFatturaAlRinnovo.setDbSalvare(false);        cheFatturaAlRinnovo.setDbTipoCampo("");        cheFatturaAlRinnovo.setFont(cheFatturaAlRinnovo.getFont().deriveFont(cheFatturaAlRinnovo.getFont().getStyle() | java.awt.Font.BOLD, cheFatturaAlRinnovo.getFont().getSize()+2));        cheFatturaAlRinnovo.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                cheFatturaAlRinnovoItemStateChanged(evt);            }        });        panel_contabilita.setName("panel_contabilita"); // NOI18N        org.jdesktop.layout.GroupLayout panel_contabilitaLayout = new org.jdesktop.layout.GroupLayout(panel_contabilita);        panel_contabilita.setLayout(panel_contabilitaLayout);        panel_contabilitaLayout.setHorizontalGroup(            panel_contabilitaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(0, 300, Short.MAX_VALUE)        );        panel_contabilitaLayout.setVerticalGroup(            panel_contabilitaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(0, 100, Short.MAX_VALUE)        );        org.jdesktop.layout.GroupLayout datiLayout = new org.jdesktop.layout.GroupLayout(dati);        dati.setLayout(datiLayout);        datiLayout.setHorizontalGroup(            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, datiLayout.createSequentialGroup()                .addContainerGap()                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(datiLayout.createSequentialGroup()                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                                .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(jLabel2)                                .add(jLabel4)                                .add(jLabel11))                            .add(jLabel231, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(datiLayout.createSequentialGroup()                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(datiLayout.createSequentialGroup()                                        .add(iva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(jLabel232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texUm4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(datiLayout.createSequentialGroup()                                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)                                            .add(datiLayout.createSequentialGroup()                                                .add(rbtAcq)                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                                                .add(rbtVen)                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                .add(rbtEnt)                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                                                .add(jLabel14))                                            .add(datiLayout.createSequentialGroup()                                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                                    .add(texUm1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                                    .add(texUm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                                    .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                                    .add(datiLayout.createSequentialGroup()                                                        .add(texUm3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                        .add(jLabel25)                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                        .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                                    .add(datiLayout.createSequentialGroup()                                                        .add(texUm2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                        .add(labKg)))))                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)                                            .add(datiLayout.createSequentialGroup()                                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, texCodFor1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, texCodFor4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                                    .add(datiLayout.createSequentialGroup()                                                        .add(texCodFor5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                        .add(texCodFor6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                                    .add(datiLayout.createSequentialGroup()                                                        .add(texCodFor2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                                        .add(texCodFor3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))                                            .add(texUm5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))                                .add(0, 0, Short.MAX_VALUE))                            .add(datiLayout.createSequentialGroup()                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(datiLayout.createSequentialGroup()                                        .add(texFornitore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .add(0, 0, 0)                                        .add(apriFornitori, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texFornitoreCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(cheFlagConfezione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(jLabel3)                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 440, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                    .add(labPrezziCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                    .add(non_applicare_perc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(jLabel15)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(labImmagine, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))                    .add(datiLayout.createSequentialGroup()                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(datiLayout.createSequentialGroup()                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                                    .add(lab_categoria)                                    .add(jLabel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(datiLayout.createSequentialGroup()                                        .add(texCodi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                                        .add(cheKit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(btnGestKit)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .add(6, 6, 6)                                        .add(cheFatturaAlRinnovo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(cheGestioneMatricole, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(cheGestioneLotti, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(datiLayout.createSequentialGroup()                                        .add(categoria, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .add(18, 18, 18)                                        .add(lab_sottocategoria)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(sottocategoria, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .add(18, 18, 18)                                        .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .add(18, 18, 18)                                        .add(cheIsDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))                            .add(datiLayout.createSequentialGroup()                                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(datiLayout.createSequentialGroup()                                        .add(jLabel24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                            .add(texDescrizione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                                            .add(texDescrizioneEn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                                    .add(jLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(panel_contabilita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                        .addContainerGap())))        );        datiLayout.linkSize(new java.awt.Component[] {texUm2, texUm3}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        datiLayout.linkSize(new java.awt.Component[] {jLabel11, jLabel2, jLabel21, jLabel22, jLabel231, jLabel24, jLabel4, jLabel8, lab_categoria}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        datiLayout.setVerticalGroup(            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiLayout.createSequentialGroup()                .addContainerGap()                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(org.jdesktop.layout.GroupLayout.TRAILING, datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(texCodi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(cheKit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(btnGestKit))                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(cheGestioneMatricole, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(cheGestioneLotti, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(cheFatturaAlRinnovo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                    .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(lab_categoria)                        .add(lab_sottocategoria)                        .add(categoria, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(sottocategoria, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(cheIsDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(datiLayout.createSequentialGroup()                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(datiLayout.createSequentialGroup()                                .add(jLabel22)                                .add(0, 0, Short.MAX_VALUE))                            .add(texDescrizione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(jLabel24)                            .add(texDescrizioneEn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                    .add(datiLayout.createSequentialGroup()                        .add(panel_contabilita, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(0, 0, Short.MAX_VALUE)))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(iva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(texUm4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel231, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                    .add(datiLayout.createSequentialGroup()                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(texUm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                            .add(texUm2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(labKg)                            .add(jLabel2)                            .add(texCodFor1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(texCodFor2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(texCodFor3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(texCodFor4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel4)                            .add(texUm1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel7)                            .add(texUm3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel25, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                            .add(texCodFor5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(texCodFor6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel8)                    .add(rbtAcq)                    .add(rbtVen)                    .add(rbtEnt)                    .add(texUm5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel14))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(labImmagine, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(datiLayout.createSequentialGroup()                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                                .add(texFornitore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(jLabel11))                            .add(apriFornitori, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(org.jdesktop.layout.GroupLayout.TRAILING, datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                                .add(texFornitoreCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(texTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(cheFlagConfezione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                        .add(4, 4, 4)                        .add(jLabel3)                        .add(1, 1, 1)                        .add(labPrezziCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(1, 1, 1)                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel15))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(non_applicare_perc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                .addContainerGap())        );        datiLayout.linkSize(new java.awt.Component[] {cheGestioneMatricole, cheKit}, org.jdesktop.layout.GroupLayout.VERTICAL);        panDati.add(dati, java.awt.BorderLayout.CENTER);        tabCent.addTab("Dati", panDati);        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()+1f));        jLabel5.setText("Dati aggiuntivi per l'export della fattura elettronica per la Pubblica Amministrazione -");        linkcodiceufficio.setText("Documentazione sui dati");        linkcodiceufficio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);        linkcodiceufficio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        linkcodiceufficio.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                linkcodiceufficioActionPerformed(evt);            }        });        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel23.setText("Tipo");        jLabel12.setFont(jLabel12.getFont().deriveFont(jLabel12.getFont().getStyle() | java.awt.Font.BOLD, jLabel12.getFont().getSize()+1));        jLabel12.setText("Dispositivi medici");        xmlpaDispMedValore.setText("xmlpa_disp_med_valore");        xmlpaDispMedValore.setDbDescCampo("");        xmlpaDispMedValore.setDbNomeCampo("xmlpa_disp_med_valore");        xmlpaDispMedValore.setDbTipoCampo("");        xmlpaDispMedValore.setName("xmlpa_disp_med_valore"); // NOI18N        xmlpaDispMedValore.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                xmlpaDispMedValoreFocusLost(evt);            }        });        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel26.setText("Valore");        xmlpaDispMedTipo.setEditable(false);        xmlpaDispMedTipo.setDbNomeCampo("xmlpa_disp_med_tipo");        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel27.setText("Codice");        texCodi1.setEditable(false);        texCodi1.setText("codice");        texCodi1.setDbDescCampo("");        texCodi1.setDbNomeCampo("codice");        texCodi1.setDbSalvare(false);        texCodi1.setDbTipoCampo("");        texCodi1.setmaxChars(20);        texCodi1.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texCodi1FocusLost(evt);            }        });        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel28.setText("Descrizione");        texCodi2.setEditable(false);        texCodi2.setText("descrizione");        texCodi2.setDbDescCampo("");        texCodi2.setDbNomeCampo("descrizione");        texCodi2.setDbSalvare(false);        texCodi2.setDbTipoCampo("");        texCodi2.setmaxChars(20);        texCodi2.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texCodi2FocusLost(evt);            }        });        org.jdesktop.layout.GroupLayout panXmlPaLayout = new org.jdesktop.layout.GroupLayout(panXmlPa);        panXmlPa.setLayout(panXmlPaLayout);        panXmlPaLayout.setHorizontalGroup(            panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(panXmlPaLayout.createSequentialGroup()                .addContainerGap()                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(panXmlPaLayout.createSequentialGroup()                        .add(jLabel28)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texCodi2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                    .add(panXmlPaLayout.createSequentialGroup()                        .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(panXmlPaLayout.createSequentialGroup()                                .add(jLabel27)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texCodi1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(panXmlPaLayout.createSequentialGroup()                                .add(jLabel5)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(linkcodiceufficio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                        .add(0, 183, Short.MAX_VALUE)))                .addContainerGap())            .add(panXmlPaLayout.createSequentialGroup()                .add(29, 29, 29)                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(jLabel12)                    .add(panXmlPaLayout.createSequentialGroup()                        .add(10, 10, 10)                        .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(panXmlPaLayout.createSequentialGroup()                                .add(jLabel26)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(xmlpaDispMedValore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(panXmlPaLayout.createSequentialGroup()                                .add(jLabel23)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(xmlpaDispMedTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        panXmlPaLayout.linkSize(new java.awt.Component[] {jLabel23, jLabel26}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        panXmlPaLayout.linkSize(new java.awt.Component[] {xmlpaDispMedTipo, xmlpaDispMedValore}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        panXmlPaLayout.linkSize(new java.awt.Component[] {jLabel27, jLabel28}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        panXmlPaLayout.setVerticalGroup(            panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(panXmlPaLayout.createSequentialGroup()                .addContainerGap()                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel27)                    .add(texCodi1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel28)                    .add(texCodi2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(18, 18, 18)                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel5)                    .add(linkcodiceufficio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(jLabel12)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel23)                    .add(xmlpaDispMedTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(panXmlPaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel26)                    .add(xmlpaDispMedValore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addContainerGap(348, Short.MAX_VALUE))        );        tabCent.addTab("P.A.", panXmlPa);        panElen.setName("elenco"); // NOI18N        panElen.setLayout(new java.awt.BorderLayout());        listini.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));        listini.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                listiniItemStateChanged(evt);            }        });        jLabel17.setText("Visualizza i prezzi del listino");        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);        jPanel2.setLayout(jPanel2Layout);        jPanel2Layout.setHorizontalGroup(            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()                .addContainerGap(113, Short.MAX_VALUE)                .add(jLabel17)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(listini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addContainerGap())        );        jPanel2Layout.setVerticalGroup(            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(jPanel2Layout.createSequentialGroup()                .addContainerGap()                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(listini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel17))                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        jPanel2Layout.linkSize(new java.awt.Component[] {jLabel17, listini}, org.jdesktop.layout.GroupLayout.VERTICAL);        panElen.add(jPanel2, java.awt.BorderLayout.PAGE_START);        griglia.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                "Title 1", "Title 2", "Title 3", "Title 4"            }        ));        jScrollPane1.setViewportView(griglia);        panElen.add(jScrollPane1, java.awt.BorderLayout.CENTER);        tabCent.addTab("Elenco", panElen);        getContentPane().add(tabCent, java.awt.BorderLayout.CENTER);        butUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-undo.png"))); // NOI18N        butUndo.setText("Annulla");        butUndo.setName("annulla"); // NOI18N        butUndo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butUndoActionPerformed(evt);            }        });        jPanel1.add(butUndo);        butSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/devices/media-floppy.png"))); // NOI18N        butSave.setText("Salva");        butSave.setName("salva"); // NOI18N        butSave.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butSaveActionPerformed(evt);            }        });        jPanel1.add(butSave);        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);        pack();    }// </editor-fold>//GEN-END:initComponents    private void butStampaElencoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaElencoActionPerformed        JDialogStampaArticoli dialog = new JDialogStampaArticoli(main.getPadreFrame(), true);        dialog.anagArticoli = this;        dialog.setLocationRelativeTo(null);        dialog.setVisible(true);    }//GEN-LAST:event_butStampaElencoActionPerformed    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed        // Add your handling code here:        this.griglia.dbGoLast();        showListino();    }//GEN-LAST:event_butLastActionPerformed    private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed        // Add your handling code here:        this.griglia.dbGoPrevious();        showListino();    }//GEN-LAST:event_butPrevActionPerformed    private void butFirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirsActionPerformed        // Add your handling code here:        this.griglia.dbGoFirst();        showListino();    }//GEN-LAST:event_butFirsActionPerformed    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed        this.griglia.dbGoNext();        showListino();    }//GEN-LAST:event_butNextActionPerformed    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing        //elimino i records temporani        String sql = "delete from articoli_prezzi";        sql += " where articolo = '' or articolo is null";        Db.executeSql(sql);        main.getPadre().closeFrame(this);    }//GEN-LAST:event_formInternalFrameClosing    private void butDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleActionPerformed        int ret = JOptionPane.showConfirmDialog(this, "Sicuro di eliminare ?", "Attenzione", JOptionPane.YES_NO_OPTION);        if (ret == JOptionPane.YES_OPTION) {            SwingUtils.mouse_wait(this);            Storico.scrivi("elimina articolo", texCodi.getText() + " " + texDescrizione.getText());            final int[] rows = griglia.getSelectedRows();            Thread t = new Thread() {                @Override                public void run() {                    for (int i = rows.length - 1; i >= 0; i--) {                        final int final_i = i;                        griglia.getSelectionModel().setSelectionInterval(rows[final_i], rows[final_i]);                        griglia.dbSelezionaRiga();                        System.out.println("sel:" + rows[final_i]);                        //elimino i prezzi collegati all'articolo                        if (!Sync.isActive()) {                            String codiceArticolo = (String) dati.dbGetField("codice");                            String sql = "";                            sql = "delete from articoli_prezzi";                            sql += " where articolo = " + Db.pc(codiceArticolo, java.sql.Types.VARCHAR);                            Db.executeSql(sql);                        }                        dati.dbDelete();                    }                    griglia.dbRefresh();                    griglia.dbSelezionaRiga();                    SwingUtils.mouse_def(frmArtiConListino.this);                }            };            t.start();        }    }//GEN-LAST:event_butDeleActionPerformed    private void butFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFindActionPerformed        boolean ret = this.griglia.dbFindNext();        if (ret == false) {            int ret2 = JOptionPane.showConfirmDialog(this, "Posizione non trovata\nVuoi riprovare dall'inizio ?", "Attenzione", JOptionPane.YES_NO_OPTION);            //JOptionPane.showMessageDialog(this,"?-:"+String.valueOf(i));            if (ret2 == JOptionPane.OK_OPTION) {                boolean ret3 = this.griglia.dbFindFirst();            }        }    }//GEN-LAST:event_butFindActionPerformed    private void butUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUndoActionPerformed        dati.dbUndo();    }//GEN-LAST:event_butUndoActionPerformed    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed        try {            tabListino.editingStopped(new javax.swing.event.ChangeEvent(tabListino));        } catch (Exception e) {            e.printStackTrace();        }        if (texCodi.getText().trim().length() == 0) {            JOptionPane.showMessageDialog(this, "Inserire il codice articolo", "Attenzione", JOptionPane.INFORMATION_MESSAGE);            return;        }        try {            System.out.println("immagine1: " + dati.getCampiAggiuntivi().get("immagine1"));        } catch (Exception e) {        }        MicroBench mb1 = new MicroBench(true);        SwingUtils.mouse_wait(this);        this.dati.dbSave();        SwingUtils.mouse_def(this);        mb1.out("articoli save");//        this.griglia.dbRefresh();        refreshImmagine();        //azzero immagine eventuale..        if (dati.getCampiAggiuntivi() != null) {            dati.getCampiAggiuntivi().put("immagine1", "null");        }        main.events.fireInvoicexEvent(new InvoicexEvent(this, InvoicexEvent.TYPE_SAVE));    }//GEN-LAST:event_butSaveActionPerformed    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed        butNew();    }//GEN-LAST:event_butNewActionPerformedprivate void butDuplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDuplicaActionPerformed    String oldCod = texCodi.getText();    Object input = JOptionPane.showInputDialog(this, "Nuovo codice articolo", texCodi.getText());    System.out.println("input:" + input);    if (input != null) {        if (input.toString().equalsIgnoreCase(oldCod)) {            JOptionPane.showMessageDialog(this, "Non puoi reinserire lo stesso codice articolo", "Attenzione", JOptionPane.INFORMATION_MESSAGE);        } else {            System.out.println("duplicazione " + oldCod + " su " + input);            //duplico            try {                Map m = dbu.getListMap(Db.getConn(), "select * from articoli where codice = " + dbu.sql(oldCod)).get(0);                m.put("codice", input);                DebugFastUtils.dump(m);                String sql = "insert into articoli set " + dbu.prepareSqlFromMap(m);                System.out.println("sql = " + sql);                dbu.tryExecQuery(Db.getConn(), sql, false);                //prezzi                List<Map> list = dbu.getListMap(Db.getConn(), "select * from articoli_prezzi where articolo = " + dbu.sql(oldCod));                for (Map m2 : list) {                    m2.put("articolo", input);                    m2.remove("id");                    sql = "insert into articoli_prezzi set " + dbu.prepareSqlFromMap(m2);                    dbu.tryExecQuery(Db.getConn(), sql, false);                }                //kit                List<Map> kit = dbu.getListMap(Db.getConn(), "select * from pacchetti_articoli where pacchetto = " + dbu.sql(oldCod));                for (Map m2 : kit) {                    m2.put("pacchetto", input);                    sql = "insert into pacchetti_articoli set " + dbu.prepareSqlFromMap(m2);                    dbu.tryExecQuery(Db.getConn(), sql, false);                }            } catch (Exception e) {                SwingUtils.showExceptionMessage(this, e);            }            griglia.dbRefresh();            dati.ultimoCampo = "codice";            dati.ultimoValore = input.toString();            //texCodi.setText(input.toString());            griglia.dbGoFirst();            griglia.dbFindNext();        }    }}//GEN-LAST:event_butDuplicaActionPerformedprivate void rbtAcqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtAcqActionPerformed    this.texTipo.setText("A");}//GEN-LAST:event_rbtAcqActionPerformedprivate void rbtVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtVenActionPerformed    this.texTipo.setText("V");}//GEN-LAST:event_rbtVenActionPerformedprivate void rbtEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtEntActionPerformed    this.texTipo.setText("E");}//GEN-LAST:event_rbtEntActionPerformedprivate void ivaPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_ivaPopupMenuWillBecomeVisible    JComboBox box = (JComboBox) evt.getSource();    Object comp = box.getUI().getAccessibleChild(box, 0);    if (!(comp instanceof JPopupMenu)) {        return;    }    JComponent scrollPane = (JComponent) ((JPopupMenu) comp).getComponent(0);    Dimension size = new Dimension();    size.width = box.getPreferredSize().width;    size.height = scrollPane.getPreferredSize().height;    scrollPane.setPreferredSize(size);    //  following line for Tiger    scrollPane.setMaximumSize(size);}//GEN-LAST:event_ivaPopupMenuWillBecomeVisibleprivate void tnxCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tnxCheckBox1ActionPerformed    // TODO add your handling code here:}//GEN-LAST:event_tnxCheckBox1ActionPerformedprivate void cheKitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cheKitItemStateChanged    btnGestKit.setEnabled(false);    if (cheKit.isSelected()) {        btnGestKit.setEnabled(true);    }}//GEN-LAST:event_cheKitItemStateChangedprivate void btnGestKitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGestKitActionPerformed    setCursor(new Cursor(Cursor.WAIT_CURSOR));    if (dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO) || dati.dbStato.equals(tnxDbPanel.DB_MODIFICA)) {        int res = JOptionPane.showConfirmDialog(this, "Devi salvare il KIT prima di gestire gli articoli.\nSalvare adesso?", "Salvataggio Dati", JOptionPane.YES_NO_OPTION);        if (res == JOptionPane.YES_OPTION) {            this.butSaveActionPerformed(null);        } else {            return;        }    }    frmArtiComposti frm = new frmArtiComposti(this.texCodi.getText());    main.getPadre().openFrame(frm, 620, 400);    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_btnGestKitActionPerformedprivate void texSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSearchKeyPressed}//GEN-LAST:event_texSearchKeyPressedprivate void texSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSearchKeyReleased    delay_refresh.update();}//GEN-LAST:event_texSearchKeyReleasedprivate void mostratuttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostratuttiActionPerformed    texSearch.setText("");    dbRefresh();}//GEN-LAST:event_mostratuttiActionPerformed    private void dbRefresh() {        SwingUtils.mouse_wait();        KeyValuePair listino = (KeyValuePair) listini.getSelectedItem();        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();        colsWidthPerc.put("Categoria", new Double(10));        colsWidthPerc.put("Sottocategoria", new Double(10));        colsWidthPerc.put("Codice", new Double(10));        colsWidthPerc.put("Descrizione", new Double(50));        colsWidthPerc.put("Um", new Double(5));        colsWidthPerc.put("Iva", new Double(10));        colsWidthPerc.put("Tipo", new Double(10));        colsWidthPerc.put("Codice a barre", 10d);        colsWidthPerc.put("Codice fornitore", 10d);        colsWidthPerc.put("Peso", 7d);        if (listino.key != null) {            colsWidthPerc.put("Prezzo", 10d);        }        if (listino.key != null                && !cu.s(listini.getSelectedItem()).equals("<Ultimi prezzi di Vendita>")                && !cu.s(listini.getSelectedItem()).equals("<Ultimi prezzi di Acquisto>")) {            colsWidthPerc.put("Sconto 1", 6d);            colsWidthPerc.put("Sconto 2", 6d);        }        griglia.columnsSizePerc = colsWidthPerc;        griglia.columnsSizePercOrig = null;        String sql = "select " + getCampiGriglia();        if (cu.s(listini.getSelectedItem()).equals("<Ultimi prezzi di Vendita>")) {            sql += "\n , (select prezzo from righ_fatt where righ_fatt.codice_articolo = art.codice order by anno desc, numero desc limit 1) as Prezzo \n";        } else if (cu.s(listini.getSelectedItem()).equals("<Ultimi prezzi di Acquisto>")) {            sql += "\n , (select prezzo from righ_fatt_acquisto where righ_fatt_acquisto.codice_articolo = art.codice order by anno desc, numero desc limit 1) as Prezzo \n";        } else if (listino.key != null) {            sql += "\n , IF(tl.ricarico_flag = 'S', (ap2.prezzo + (ap2.prezzo / 100 * tl.ricarico_perc)), ap.prezzo) as Prezzo, ap.sconto1 as 'Sconto 1', ap.sconto2 as 'Sconto 2' \n";        }        sql += " from articoli art ";        sql += " left join categorie_articoli cat on art.categoria = cat.id";        sql += " left join sottocategorie_articoli sotcat on art.sottocategoria = sotcat.id";        if (cu.s(listini.getSelectedItem()).equals("<Ultimi prezzi di Vendita>")) {        } else if (cu.s(listini.getSelectedItem()).equals("<Ultimi prezzi di Acquisto>")) {        } else if (listino.key != null) {            sql += " left join articoli_prezzi ap on art.codice = ap.articolo and ap.listino = " + dbu.sql(listino.key);            sql += " left join tipi_listino tl on tl.codice = ap.listino";            sql += " left join articoli_prezzi ap2 on art.codice = ap2.articolo and ap2.listino = tl.ricarico_listino";        }        sql += " where 1 = 1";        where = "";        if (StringUtils.isNotBlank(texSearch.getText())) {            where += " and (art.descrizione like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.descrizione_en like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_a_barre like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_fornitore like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_fornitore2 like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_fornitore3 like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_fornitore4 like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_fornitore5 like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " or art.codice_fornitore6 like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);            where += " ) ";        }        where += " " + InvoicexUtil.getWhereFiltriArticoli(filters);        order = " order by cat.categoria, sotcat.sottocategoria, art.codice";        sql += where + order;        System.out.println("sql articoli = " + sql);        int selrow = griglia.getSelectedRow();        MicroBench mb = new MicroBench(true);        griglia.dbOpen(Db.getConn(), sql, Db.INSTANCE, griglia_lazy);        mb.out("articoli elenco dbopen");        griglia.getSelectionModel().setSelectionInterval(selrow, selrow);        mb.out("articoli set sel int");        griglia.dbSelezionaRiga();        mb.out("articoli seleziona riga");        SwingUtils.mouse_def();    }    private String getCampiGriglia() {        String sql = " cat.categoria as Categoria, sotcat.sottocategoria as Sottocategoria, art.codice as Codice";        sql += " , art.codice_a_barre as 'Codice a barre' ";        sql += " , art.codice_fornitore as 'Codice fornitore' ";        sql += " , art.descrizione as Descrizione";        sql += " , art.um as Um";        sql += " , art.iva as Iva";        sql += " , art.tipo as Tipo";        sql += " , art.peso_kg as Peso ";        return sql;    }private void texSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texSearchActionPerformed    // TODO add your handling code here:}//GEN-LAST:event_texSearchActionPerformedprivate void menScegliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menScegliActionPerformed    JFileChooser fileChoose = new JFileChooser();    FileFilter filter1 = new FileFilter() {        public boolean accept(File pathname) {            if (pathname.getAbsolutePath().endsWith(".jpg")                    || pathname.getAbsolutePath().endsWith(".jpeg")                    || pathname.getAbsolutePath().endsWith(".gif")                    || pathname.getAbsolutePath().endsWith(".bmp")                    || pathname.getAbsolutePath().endsWith(".png")                    || pathname.isDirectory()) {                return true;            } else {                return false;            }        }        public String getDescription() {            return "File Immagine (*.jpg, *.jpeg, *.gif, *.png, *.bmp)";        }    };    fileChoose.addChoosableFileFilter(filter1);    ImagePreviewPanel preview = new ImagePreviewPanel();    fileChoose.setAccessory(preview);    fileChoose.addPropertyChangeListener(preview);    int ret = fileChoose.showOpenDialog(this);    if (ret == javax.swing.JFileChooser.APPROVE_OPTION) {        //apro il file        String file = fileChoose.getSelectedFile().getAbsolutePath();        labImmagine.setText("");//        labImmagine.setIcon(new ImageIcon(file));        caricaImmagine(file, labImmagine);        if (dati.getCampiAggiuntivi() == null) {            dati.setCampiAggiuntivi(new Hashtable());        }        file = StringUtils.replace(file, "\\", "\\\\");        dati.getCampiAggiuntivi().put("immagine1", Db.pc(file, Types.VARCHAR));        dati.dbForzaModificati();    }}//GEN-LAST:event_menScegliActionPerformedprivate void labImmagineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labImmagineMouseClicked    if (SwingUtilities.isRightMouseButton(evt)) {        popupImmagine.show(labImmagine, evt.getX(), evt.getY());    } else if (evt.getClickCount() >= 2) {        menScegliActionPerformed(null);    }}//GEN-LAST:event_labImmagineMouseClickedprivate void menEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menEliminaActionPerformed    labImmagine.setText("Nessuna immagine");    labImmagine.setIcon(null);    if (dati.getCampiAggiuntivi() == null) {        dati.setCampiAggiuntivi(new Hashtable());    }    dati.getCampiAggiuntivi().put("immagine1", "null");    dati.dbForzaModificati();}//GEN-LAST:event_menEliminaActionPerformedprivate void butImportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butImportExcelActionPerformed    frmImportArtiExcel frm = new frmImportArtiExcel(this);    frm.pack();    main.getPadre().openFrame(frm, frm.getWidth(), frm.getHeight());}//GEN-LAST:event_butImportExcelActionPerformedprivate void cheGestioneMatricoleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cheGestioneMatricoleItemStateChanged//    if (evt.getStateChange() == ItemEvent.SELECTED) {//        cheGestioneLotti.setSelected(false);//    }}//GEN-LAST:event_cheGestioneMatricoleItemStateChangedprivate void cheGestioneLottiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cheGestioneLottiItemStateChanged//    if (evt.getStateChange() == ItemEvent.SELECTED) {//        cheGestioneMatricole.setSelected(false);//    }}//GEN-LAST:event_cheGestioneLottiItemStateChangedprivate void texDescrizioneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texDescrizioneFocusGained    if (main.getPersonalContain("conenna")) {        try {            Robot r = new Robot();            r.keyPress(KeyEvent.VK_CONTROL);            r.keyPress(KeyEvent.VK_HOME);            r.keyRelease(KeyEvent.VK_CONTROL);            r.keyPress(KeyEvent.VK_END);        } catch (Exception e) {            e.printStackTrace();        }    }}//GEN-LAST:event_texDescrizioneFocusGained    private void apriFornitoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apriFornitoriActionPerformed        alRicercaFornitore.showHints();    }//GEN-LAST:event_apriFornitoriActionPerformed    private void texFornitoreCodiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texFornitoreCodiceFocusLost    }//GEN-LAST:event_texFornitoreCodiceFocusLost    private void texFornitoreCodicePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_texFornitoreCodicePropertyChange    }//GEN-LAST:event_texFornitoreCodicePropertyChange    private void texFornitoreCodiceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texFornitoreCodiceKeyPressed    }//GEN-LAST:event_texFornitoreCodiceKeyPressed    private void categoriaPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_categoriaPopupMenuWillBecomeVisible        // TODO add your handling code here:    }//GEN-LAST:event_categoriaPopupMenuWillBecomeVisible    private void sottocategoriaPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_sottocategoriaPopupMenuWillBecomeVisible        // TODO add your handling code here:    }//GEN-LAST:event_sottocategoriaPopupMenuWillBecomeVisible    private void categoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoriaItemStateChanged        if (evt.getStateChange() == ItemEvent.DESELECTED) {            System.out.println("SOTTOCATEGORIA  clear list");            sottocategoria.dbClearList();        } else if (evt.getStateChange() == ItemEvent.SELECTED) {            System.out.println("SOTTOCATEGORIA  carico ");            sottocategoria.dbClearList();            sottocategoria.dbAddElement("", null);            sottocategoria.dbOpenList(Db.getConn(), "select sottocategoria, id from sottocategorie_articoli where id_padre = " + Db.pc(categoria.getSelectedKey(), Types.INTEGER) + " order by sottocategoria", null, false);        }    }//GEN-LAST:event_categoriaItemStateChanged    private void cheFatturaAlRinnovoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cheFatturaAlRinnovoItemStateChanged        // TODO add your handling code here:    }//GEN-LAST:event_cheFatturaAlRinnovoItemStateChanged    BalloonTip balloon_codice = null;    private void texCodiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texCodiFocusLost        if (dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO) && StringUtils.isNotBlank(texCodi.getText())) {            //controllo se articolo giÃ  presente            try {                final Object o = dbu.getObject(Db.getConn(), "select codice from articoli where codice = " + dbu.sql(texCodi.getText()), false);                if (o != null) {                    //balloon bollo                    BalloonTipStyle edgedLook = new EdgedBalloonStyle((Color) UIManager.get("ToolTip.background"), Color.RED);                    JPanel panel = new JPanel();                    panel.setOpaque(false);                    panel.setLayout(new FlowLayout());                    panel.add(new JLabel("L'articolo " + texCodi.getText() + " esiste giÃ  ! "));                    JXHyperlink link = new JXHyperlink();                    link.setText("clicca qui per modificarlo");                    link.addActionListener(new ActionListener() {                        public void actionPerformed(ActionEvent e) {                            balloon_codice.closeBalloon();                            frmArtiConListino.this.dati.dbUndo();                            frmArtiConListino.this.texCodi.requestFocusInWindow();                            SwingUtilities.invokeLater(new Runnable() {                                public void run() {                                    frmArtiConListino.this.trova(cu.s(o));                                }                            });                        }                    });                    panel.add(link);                    balloon_codice = new BalloonTip(texCodi, panel, edgedLook, true);                    balloon_codice.setVisible(true);                }            } catch (Exception e) {                e.printStackTrace();            }        }    }//GEN-LAST:event_texCodiFocusLost    private void linkAggiungiFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkAggiungiFiltroActionPerformed        try {            JDialog dialog = InvoicexUtil.getDialogFiltriArticoli(this, true, filters);            dialog.pack();            InvoicexUtil.mettiSotto(dialog, linkAggiungiFiltro);            dialog.setVisible(true);            boolean conferma = dialog.getClass().getField("conferma").getBoolean(dialog);            if (conferma) {                filters = (List) dialog.getClass().getDeclaredMethod("getFilters").invoke(dialog);                InvoicexUtil.aggiornaFiltri(panFiltri, filters, linkAggiungiFiltro, filtriActionModifica, filtriActionRimuovi);                try {                    InvoicexUtil.salvaFiltri(filters, this.getClass().getName());                } catch (Exception e) {                    e.printStackTrace();                }                dbRefresh();                tabCent.setSelectedIndex(2);            }        } catch (Throwable t) {            t.printStackTrace();        }    }//GEN-LAST:event_linkAggiungiFiltroActionPerformed    private void sottocategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sottocategoriaItemStateChanged        if (!dati.isRefreshing) {            dati.dbForzaModificati();        }    }//GEN-LAST:event_sottocategoriaItemStateChanged    private void butVariazioneListiniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVariazioneListiniActionPerformed        frmVariazioneListini frm = new frmVariazioneListini(this);        frm.pack();        main.getPadre().openFrame(frm, frm.getWidth(), frm.getHeight());    }//GEN-LAST:event_butVariazioneListiniActionPerformed    private void linkcodiceufficioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkcodiceufficioActionPerformed        try {            SwingUtils.openUrl(new URL("http://www.fatturapa.gov.it/export/fatturazione/sdi/fatturapa/v1.1/Formato_FatturaPA_tabellare_V1.1.pdf"));        } catch (Exception err) {            SwingUtils.showExceptionMessage(this, err);        }    }//GEN-LAST:event_linkcodiceufficioActionPerformed    private void xmlpaDispMedValoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_xmlpaDispMedValoreFocusLost        // TODO add your handling code here:    }//GEN-LAST:event_xmlpaDispMedValoreFocusLost    private void texCodi1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texCodi1FocusLost        // TODO add your handling code here:    }//GEN-LAST:event_texCodi1FocusLost    private void texCodi2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texCodi2FocusLost        // TODO add your handling code here:    }//GEN-LAST:event_texCodi2FocusLost    private void listiniItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listiniItemStateChanged        if (!in_apertura) {            if (evt.getStateChange() == ItemEvent.SELECTED) {                dbRefresh();                try {                    main.fileIni.setValue("articoli", "listino", ((KeyValuePair) listini.getSelectedItem()).getKey());                } catch (Exception e) {                }            }        }    }//GEN-LAST:event_listiniItemStateChanged    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JButton apriFornitori;    private javax.swing.JButton btnGestKit;    private javax.swing.JButton butDele;    private javax.swing.JButton butDuplica;    private javax.swing.JButton butFind;    private javax.swing.JButton butFirs;    private javax.swing.JButton butImportExcel;    private javax.swing.JButton butLast;    private javax.swing.JButton butNew;    private javax.swing.JButton butNext;    private javax.swing.JButton butPrev;    private javax.swing.JButton butSave;    private javax.swing.JButton butStampaElenco;    private javax.swing.JButton butUndo;    private javax.swing.JButton butVariazioneListini;    public tnxbeans.tnxComboField categoria;    private tnxbeans.tnxCheckBox cheFatturaAlRinnovo;    private tnxbeans.tnxCheckBox cheFlagConfezione;    private tnxbeans.tnxCheckBox cheGestioneLotti;    private tnxbeans.tnxCheckBox cheGestioneMatricole;    private tnxbeans.tnxCheckBox cheIsDescrizione;    private tnxbeans.tnxCheckBox cheKit;    public tnxbeans.tnxDbPanel dati;    public tnxbeans.tnxDbGrid griglia;    private javax.swing.ButtonGroup grpSel;    private tnxbeans.tnxComboField iva;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel10;    private javax.swing.JLabel jLabel11;    private javax.swing.JLabel jLabel12;    private javax.swing.JLabel jLabel13;    private javax.swing.JLabel jLabel131;    private javax.swing.JLabel jLabel132;    private javax.swing.JLabel jLabel14;    private javax.swing.JLabel jLabel15;    private javax.swing.JLabel jLabel17;    private javax.swing.JLabel jLabel2;    private javax.swing.JLabel jLabel21;    private javax.swing.JLabel jLabel22;    private javax.swing.JLabel jLabel23;    private javax.swing.JLabel jLabel231;    private javax.swing.JLabel jLabel232;    private javax.swing.JLabel jLabel24;    private javax.swing.JLabel jLabel25;    private javax.swing.JLabel jLabel26;    private javax.swing.JLabel jLabel27;    private javax.swing.JLabel jLabel28;    private javax.swing.JLabel jLabel3;    private javax.swing.JLabel jLabel4;    private javax.swing.JLabel jLabel5;    private javax.swing.JLabel jLabel6;    private javax.swing.JLabel jLabel7;    private javax.swing.JLabel jLabel8;    private javax.swing.JLabel jLabel9;    private javax.swing.JPanel jPanel1;    private javax.swing.JPanel jPanel2;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JScrollPane jScrollPane2;    private javax.swing.JSeparator jSeparator1;    private javax.swing.JSeparator jSeparator2;    private javax.swing.JSeparator jSeparator3;    private javax.swing.JToolBar jToolBar1;    private javax.swing.JToolBar jToolBar3;    private javax.swing.JLabel labImmagine;    private javax.swing.JLabel labKg;    private javax.swing.JLabel labPrezziCliente;    public javax.swing.JLabel lab_categoria;    public javax.swing.JLabel lab_sottocategoria;    public org.jdesktop.swingx.JXHyperlink linkAggiungiFiltro;    private org.jdesktop.swingx.JXHyperlink linkcodiceufficio;    private javax.swing.JComboBox listini;    private javax.swing.JMenuItem menElimina;    private javax.swing.JMenuItem menScegli;    private javax.swing.JButton mostratutti;    private tnxbeans.tnxCheckBox non_applicare_perc;    private javax.swing.JPanel panAlto;    public javax.swing.JPanel panDati;    private javax.swing.JPanel panElen;    public javax.swing.JPanel panFiltri;    private tnxbeans.tnxDbPanel panXmlPa;    public javax.swing.JPanel panel_contabilita;    private javax.swing.JPopupMenu popupImmagine;    private javax.swing.JRadioButton rbtAcq;    private javax.swing.JRadioButton rbtEnt;    private javax.swing.JRadioButton rbtVen;    public tnxbeans.tnxComboField sottocategoria;    private javax.swing.JTabbedPane tabCent;    public javax.swing.JTable tabListino;    private tnxbeans.tnxTextField texCodFor1;    private tnxbeans.tnxTextField texCodFor2;    private tnxbeans.tnxTextField texCodFor3;    private tnxbeans.tnxTextField texCodFor4;    private tnxbeans.tnxTextField texCodFor5;    private tnxbeans.tnxTextField texCodFor6;    public tnxbeans.tnxTextField texCodi;    public tnxbeans.tnxTextField texCodi1;    public tnxbeans.tnxTextField texCodi2;    public tnxbeans.tnxMemoField texDescrizione;    private tnxbeans.tnxMemoField texDescrizioneEn;    public javax.swing.JTextField texFornitore;    public tnxbeans.tnxTextField texFornitoreCodice;    private javax.swing.JTextField texSearch;    private tnxbeans.tnxTextField texTipo;    public tnxbeans.tnxTextField texUm;    private tnxbeans.tnxTextField texUm1;    private tnxbeans.tnxTextField texUm2;    private tnxbeans.tnxTextField texUm3;    private tnxbeans.tnxTextField texUm4;    private tnxbeans.tnxTextField texUm5;    private tnxbeans.tnxCheckBox tnxCheckBox1;    private tnxbeans.tnxComboField xmlpaDispMedTipo;    public tnxbeans.tnxTextField xmlpaDispMedValore;    // End of variables declaration//GEN-END:variables    private void caricaImmagine(final String file, final JLabel label) {        //check image size        try {            System.out.println("caricaImmagine: file: " + file);            SimpleImageInfo sii;            sii = new SimpleImageInfo(new File(file));            System.out.println("img w: " + sii.getWidth() + " h: " + sii.getHeight() + " mime: " + sii.getMimeType());            if (!main.debug) {                if ((sii.getWidth() * sii.getHeight()) > (3000 * 2000)) {                    SwingUtils.showWarningMessage(this, "Il file Ã¨ troppo grande (il limite Ã¨ 3000 * 2000 px)");                    label.setIcon(null);                    return;                }            }            Thread t = new Thread("carica immagine") {                @Override                public void run() {                    try {                        Thread.sleep(100);                        SwingUtils.inEdt(new Runnable() {                            public void run() {                                try {                                    final BufferedImage image = ImgUtils.getImage(file, label.getWidth(), 0, "Q", false, 0.85d, main.getCacheImgDir());                                    label.setIcon(new ImageIcon(image));                                } catch (Throwable e) {                                    e.printStackTrace();                                }                            }                        });                    } catch (Exception e) {                        e.printStackTrace();                    }                }            };            t.start();        } catch (Throwable ex) {            ex.printStackTrace();            label.setIcon(null);            if (tabCent.getSelectedComponent() == panDati) {                SwingUtils.showErrorMessage(this, "Errore nel caricamento dell'immagine:\n" + ex.getMessage() + "\nFile: " + file);            }        }    }    public void butNew() {        this.dati.dbNew();//tolgo proposta iva standard altrimenti non ha senso la gestione a cascata... articolo -> cliente -> inva standard//        String siva = InvoicexUtil.getIvaDefaultPassaggio();//        iva.dbTrovaKey(siva);        iva.setSelectedIndex(-1);        rbtEnt.setSelected(true);        if (dati.getCampiAggiuntivi() != null) {            dati.getCampiAggiuntivi().put("immagine1", "null");        }        //per conenna/auto        if (main.getPersonalContain("conenna")) {            texDescrizione.setText(""                    + "         TARGA: \n"                    + " MARCA/MODELLO: \n"                    + "        TELAIO: \n"                    + " IMMATRICOLATA: \n"                    + "PREZZO VEICOLO: \n"                    + "");        }        texCodi.requestFocus();    }    private void clean(Map mapn) {        mapn.remove("descrizione");        mapn.remove("tipo");        mapn.remove("ricarico_listino");        mapn.remove("codice");        mapn.remove("ricarico_perc");        mapn.remove("ricarico_flag");        mapn.remove("prezzo2");        mapn.remove("id");    }    static public class listinoModel            extends CachingResultSetTableModel {        private tnxDbPanel panel;        private frmArtiConListino frm;        DecimalFormat form = new DecimalFormat("#,##0.00###");        private boolean cambioscontoincorso;        public listinoModel(ResultSet aResultSet, tnxDbPanel panel, frmArtiConListino frm) {            super(aResultSet);            this.panel = panel;            this.frm = frm;        }//        @Override//        public int getColumnCount() {////            return 3;////            return 8;//            return getResultSet().getMetaData().getColumnCount();//        }        public boolean isCellEditable(int r, int c) {            if (c == 8) {                return true;            }            if (c == 9) {                return true;            }            if (c >= 2) {                String flag = (String) getValueAt(r, 4);                if (flag != null && flag.equalsIgnoreCase("S")) {                    return false;                }                return true;            }            return false;        }        public Object getValueAt(int r, int c) {            if (r < cache.size()) {                if (c == 2) {                    return ((Object[]) cache.get(r))[c];//                try {//                    return form.format(((Object[]) cache.get(r))[c]);//                } catch (Exception err) {//                    //err.printStackTrace();//                    return ((Object[]) cache.get(r))[c];//                }                } else {                    return ((Object[]) cache.get(r))[c];                }            } else {                return null;            }        }        @Override        public void setValueAt(Object value, int r, int c) {            super.setValueAt(value, r, c);            if (frm != null) {                if (frm.ricalcoloPrezzi) {                    return;                }            }            if (!panel.dbStato.equals(tnxDbPanel.DB_INSERIMENTO)) {                if (c >= 2) {                    String flag = (String) getValueAt(r, 4);                    if (flag == null) {                        flag = "N";                    }                    if (frm != null) {                        if (!flag.equalsIgnoreCase("S") && !frm.caricamentoPrezzi) {                            panel.dbCambiaStato(tnxDbPanel.DB_MODIFICA);                        }                    }                }            }            if (frm != null) {                if (c == 2 && !frm.caricamentoPrezzi) {                    System.out.println(getValueAt(r, 2));   //nuovo prezzo                    super.setValueAt(value, r, 7);          //prezzo2, serve per memorizzare su salva il prezzo giÃ  calcolato                    frm.ricalcolaPrezzi(r);                }            }            if (main.pluginAttivi.contains("pluginToysforyou") && !frm.caricamentoPrezzi && !cambioscontoincorso) {                String listino = cu.s(getValueAt(r, 0));                if (c == 8 && listino.equalsIgnoreCase("VENDITA")) {                    //allora risporto il valore su RIVENDITA                    cambioscontoincorso = true;                    for (int i = 0; i < getRowCount(); i++) {                        String ilist = cu.s(getValueAt(i, 0));                        if (ilist.equalsIgnoreCase("RIVENDITA")) {                            setValueAt(value, i, 8);                            fireTableRowsUpdated(i, i);                            break;                        }                    }                    cambioscontoincorso = false;                } else if (c == 8 && listino.equalsIgnoreCase("RIVENDITA")) {                    //allora risporto il valore su RIVENDITA                    cambioscontoincorso = true;                    for (int i = 0; i < getRowCount(); i++) {                        String ilist = cu.s(getValueAt(i, 0));                        if (ilist.equalsIgnoreCase("VENDITA")) {                            setValueAt(value, i, 8);                            fireTableRowsUpdated(i, i);                            break;                        }                    }                    cambioscontoincorso = false;                }            }        }    }    public void ricalcolaPrezzi(int r) {        ricalcoloPrezzi = true;        listinoModel cacheModel = (listinoModel) tabListino.getModel();        //analizzo i dati        for (int i = 0; i < cacheModel.getRowCount(); i++) {            try {                if (i == r) {                    continue;   //salto la riga che ha generato il cambio                }                String tipo = (String) cacheModel.getValueAt(i, cacheModel.colonne.get("tipo"));                String flag = (String) cacheModel.getValueAt(i, cacheModel.colonne.get("ricarico_flag"));                Double perc = CastUtils.toDouble0((BigDecimal) cacheModel.getValueAt(i, cacheModel.colonne.get("ricarico_perc")));                String list = (String) cacheModel.getValueAt(i, cacheModel.colonne.get("ricarico_listino"));                //aggiorno solo se si riferisce al listino che ho modificato                String listModificato = (String) cacheModel.getValueAt(r, cacheModel.colonne.get("codice"));                if (flag != null && flag.equalsIgnoreCase("S") && list != null && list.equalsIgnoreCase(listModificato)) {                    //prendo prezzo modificato                    Object val = tabListino.getValueAt(r, tabListino.getColumnModel().getColumnIndex("prezzo"));                    Double prezzo = 0d;                    if (val instanceof BigDecimal) {                        prezzo = ((BigDecimal) val).doubleValue();                    } else if (val instanceof Double) {                        prezzo = (Double) val;                    } else {                        prezzo = Db.getDouble(cu.s(val));                    }                    prezzo = prezzo + (prezzo / 100d * perc);                    cacheModel.setValueAt(FormatUtils.formatEuroItaMax5(prezzo) + " (" + FormatUtils.formatPerc(perc) + "% su " + list + ")", i, cacheModel.colonne.get("prezzo"));                    cacheModel.setValueAt(prezzo, i, cacheModel.colonne.get("prezzo2"));    //prezzo2, serve per memorizzare su salva il prezzo giÃ  calcolato                    cacheModel.fireTableRowsUpdated(i, i);                }            } catch (Exception ex) {                ex.printStackTrace();            }        }        ricalcoloPrezzi = false;    }    public static class articoliFigliModel            extends CachingResultSetTableModel {        private tnxDbPanel panel;        DecimalFormat form = new DecimalFormat("0.00");        public articoliFigliModel(ResultSet aResultSet, tnxDbPanel panel) {            super(aResultSet);            int cols = getColumnCount();            Object[] row = new Object[cols];            for (int j = 0; j < row.length; j++) {                row[j] = "";            }            cache.add(row);            this.panel = panel;        }        public boolean isCellEditable(int r, int c) {            if (c >= 2) {                return true;            }            return false;        }        public Object getValueAt(int r, int c) {            if (r < cache.size() + 1) {                if (c == 2) {                    try {                        return form.format(((Object[]) cache.get(r))[c]);                    } catch (Exception err) {                        return ((Object[]) cache.get(r))[c];                    }                } else {                    return ((Object[]) cache.get(r))[c];                }            } else {                return null;            }        }        public void setValueAt(Object value, int r, int c) {            super.setValueAt(value, r, c);            if (panel.dbStato != panel.DB_INSERIMENTO) {                panel.dbCambiaStato(panel.DB_MODIFICA);            }        }    }    public static class MyTable extends JTable {//  Place cell in edit mode when it 'gains focus'        public void changeSelection(                int row, int column, boolean toggle, boolean extend) {            super.changeSelection(row, column, toggle, extend);            if (editCellAt(row, column)) {                getEditorComponent().requestFocusInWindow();            }        }        //  Select the text when the cell starts editing        //  a) text will be replaced when you start typing in a cell        //  b) text will be selected when you use F2 to start editing        //  c) text will be selected when double clicking to start editing        public boolean editCellAt(int row, int column, EventObject e) {            boolean result = super.editCellAt(row, column, e);            final Component editor = getEditorComponent();            if (editor != null && editor instanceof JTextComponent) {                if (e == null) {                    ((JTextComponent) editor).selectAll();                } else {                    SwingUtilities.invokeLater(new Runnable() {                        public void run() {                            ((JTextComponent) editor).selectAll();                        }                    });                }            }            return result;        }        //  Select the text when the cell starts editing        //  a) text will be replaced when you start typing in a cell        //  b) text will be selected when you use F2 to start editing        //  c) caret is placed at end of text when double clicking to start editing        public Component prepareEditor(                TableCellEditor editor, int row, int column) {            Component c = super.prepareEditor(editor, row, column);            if (c instanceof JTextComponent) {                System.out.println("prepare " + ((JTextField) c).getText());                ((JTextField) c).selectAll();            }            return c;        }    }}