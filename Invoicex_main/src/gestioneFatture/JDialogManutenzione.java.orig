package gestioneFatture;

import dnl.utils.text.table.MapBasedTableModel;
import dnl.utils.text.table.TextTable;
import it.tnx.Db;
import it.tnx.PrintUtilities;
import it.tnx.accessoUtenti.Permesso;
import it.tnx.commons.CastUtils;
import it.tnx.commons.DateUtils;
import it.tnx.commons.DbUtils;
import it.tnx.commons.DebugFastUtils;
import it.tnx.commons.FormatUtils;
import it.tnx.commons.HttpUtils;
import it.tnx.commons.MicroBench;
import it.tnx.commons.SwingUtils;
import it.tnx.commons.cu;
import it.tnx.commons.dbu;
import it.tnx.invoicex.InvoicexUtil;
import it.tnx.invoicex.Magazzino;
import it.tnx.invoicex.PlatformUtils;
import it.tnx.invoicex.data.Giacenza;
import it.tnx.shell.CurrentDir;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.jdesktop.swingworker.SwingWorker;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogManutenzione.java
 *
 * Created on 8-giu-2010, 11.07.31
 */
/**
 *
 * @author mceccarelli
 */
public class JDialogManutenzione extends javax.swing.JDialog {
    
    String sql3 = "select m.id, m.data,m.causale, m.articolo, m.quantita, m.da_tabella, m.da_numero, m.da_anno, m.da_id from righ_ddt_acquisto r  "
            + " join movimenti_magazzino m on r.in_fatt = m.da_id and da_tabella = 'test_fatt_acquisto' "
            + " where in_fatt is not null";

    /**
     * Creates new form JDialogManutenzione
     */
    public JDialogManutenzione(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        data_storicizzazione.setText(DateUtils.formatDateIta(new Date()));

        try {
            InvoicexEvent event = new InvoicexEvent(this);
            event.type = InvoicexEvent.TYPE_GENERIC_PostInitComps;
            main.events.fireInvoicexEvent(event);
        } catch (Exception err) {
            err.printStackTrace();
        }

        tab.getColumnModel().getColumn(2).setCellRenderer(new TableCellRenderer() {
            JLabel lab = new JLabel();

            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                lab.setOpaque(true);
                if (value != null) {
                    lab.setText(value.toString());
                    lab.setBackground(Color.GREEN);
                } else {
                    lab.setText("");
                    lab.setBackground(Color.RED);
                }
                return lab;
            }
        });
        tipoActionPerformed(null);

        try {
            Integer i = cu.i(main.fileIni.getValue("varie", "manutenzione_sel_index"));
            tabpadre.setSelectedIndex(i);
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            tipo1.setSelectedIndex(cu.i0(main.fileIni.getValue("pref", "manutenzione_import_articoli_tipo1", "0")));
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        if (!main.utente.getPermesso(Permesso.PERMESSO_IMPOSTAZIONI, Permesso.PERMESSO_TIPO_SCRITTURA)) {
            this.tabpadre.remove(this.tabSbloccoFatture);
        }
        
        try {
            //controllo se ha movimento più depositi non faccio fare nè azzeramento nè storicizzazione
            List<Map> list = dbu.getListMap(Db.getConn(), "select deposito from movimenti_magazzino group by deposito");
            if (list.size() > 1) {
                butAzzera.setEnabled(false);
                butStoricizza.setEnabled(false);
                labErroreAzzera.setText("Hai movimentato più depositi e la funzione non lo gestisce");
                labErroreStoricizzazione.setText("Hai movimentato più depositi e la funzione non lo gestisce");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabpadre = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        butconverti = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        converti = new javax.swing.JTextArea();
        forza = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        butStoricizza = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        text_storicizza = new javax.swing.JTextArea();
        data_storicizzazione = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        labErroreStoricizzazione = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        butRif = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaRif = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaNum = new javax.swing.JTextArea();
        stampaNum = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tipo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        anno = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();
        controlla = new javax.swing.JButton();
        elimina = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        check_area = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta3 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        butRif1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        textAreaRicSca = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        butconverti2 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        insart = new javax.swing.JTextArea();
        butconverti3 = new javax.swing.JButton();
        tipo1 = new javax.swing.JComboBox();
        jPanel10 = new javax.swing.JPanel();
        elenca_locks = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        locks = new javax.swing.JTextArea();
        azzera_locks = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        butAzzera = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        azzeramag = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        labErroreAzzera = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        elenca_locks2 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        logmysql51 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        tabSbloccoFatture = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        logbloccasblocca = new javax.swing.JTextArea();
        bloccoSblocco = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tipo_doc = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        dal = new org.jdesktop.swingx.JXDatePicker();
        al = new org.jdesktop.swingx.JXDatePicker();
        jLabel9 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenzione");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabpadre.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        tabpadre.setName("tabpadre"); // NOI18N
        tabpadre.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabpadreStateChanged(evt);
            }
        });

        butconverti.setText("Converti");
        butconverti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butconvertiActionPerformed(evt);
            }
        });

        converti.setColumns(20);
        converti.setRows(5);
        jScrollPane7.setViewportView(converti);

        forza.setText("forza");

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(butconverti)
                        .add(18, 18, 18)
                        .add(forza)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butconverti)
                    .add(forza))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Converti database in UTF8", jPanel7);

        butStoricizza.setText("Storicizza");
        butStoricizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStoricizzaActionPerformed(evt);
            }
        });

        text_storicizza.setColumns(20);
        text_storicizza.setRows(5);
        jScrollPane8.setViewportView(text_storicizza);

        data_storicizzazione.setColumns(10);

        jLabel3.setText("alla data");

        labErroreStoricizzazione.setForeground(new java.awt.Color(255, 51, 0));

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(butStoricizza)
                        .add(6, 6, 6)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(data_storicizzazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labErroreStoricizzazione)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butStoricizza)
                    .add(data_storicizzazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(labErroreStoricizzazione))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Storicizzazione movimenti", jPanel8);

        butRif.setText("Aggiorna i riferimenti");
        butRif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRifActionPerformed(evt);
            }
        });

        textAreaRif.setColumns(20);
        textAreaRif.setRows(5);
        jScrollPane5.setViewportView(textAreaRif);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1365, Short.MAX_VALUE)
            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jScrollPane5)
                        .add(jPanel5Layout.createSequentialGroup()
                            .add(butRif)
                            .add(425, 425, 425)))
                    .addContainerGap()))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 402, Short.MAX_VALUE)
            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(butRif)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        tabpadre.addTab("Aggiorna numeri di riferimento dei documenti", jPanel5);

        jButton4.setText("Esegui il controllo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        textAreaNum.setColumns(20);
        textAreaNum.setRows(5);
        jScrollPane4.setViewportView(textAreaNum);

        stampaNum.setText("Stampa");
        stampaNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stampaNumActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jButton4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 1161, Short.MAX_VALUE)
                        .add(stampaNum)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton4)
                    .add(stampaNum))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo numerazione Fatture e DDT di vendita", jPanel4);

        jLabel2.setText("Tipo Doc.");

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DDT", "Fatture" }));
        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });

        jLabel1.setText("Anno");

        anno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id movimento", "id documento", "documento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tab);
        if (tab.getColumnModel().getColumnCount() > 0) {
            tab.getColumnModel().getColumn(0).setPreferredWidth(150);
            tab.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        controlla.setText("controlla");
        controlla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controllaActionPerformed(evt);
            }
        });

        elimina.setText("elimina i movimenti senza documento");
        elimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(anno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(controlla)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(elimina)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(anno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(controlla)
                    .add(elimina))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo movimenti", jPanel1);

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        check_area.setColumns(20);
        check_area.setEditable(false);
        check_area.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        check_area.setRows(5);
        jScrollPane2.setViewportView(check_area);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE)
                    .add(jButton1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo Database", jPanel2);

        jButton2.setText("controllo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ta3.setColumns(20);
        ta3.setRows(5);
        jScrollPane3.setViewportView(ta3);

        jButton3.setText("pulisci");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton3)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton2)
                    .add(jButton3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo movimenti fatture di acquisto", jPanel3);

        butRif1.setText("Ricalcola e aggiorna");
        butRif1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRif1ActionPerformed(evt);
            }
        });

        textAreaRicSca.setColumns(20);
        textAreaRicSca.setRows(5);
        jScrollPane6.setViewportView(textAreaRicSca);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(butRif1)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(butRif1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Ricalcola stato scadenze", jPanel6);

        butconverti2.setText("Anteprima");
        butconverti2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butconverti2ActionPerformed(evt);
            }
        });

        insart.setColumns(20);
        insart.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        insart.setRows(5);
        jScrollPane9.setViewportView(insart);

        butconverti3.setText("Inserisci articoli");
        butconverti3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butconverti3ActionPerformed(evt);
            }
        });

        tipo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fatture di Vendita", "Fatture di Acquisto", "DDT di Vendita", "DDT di Acquisto", "Preventivi/Ordini di Vendita", "Preventivi/Ordini di Acquisto" }));
        tipo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipo1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(tipo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(butconverti2)
                        .add(18, 18, 18)
                        .add(butconverti3)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butconverti2)
                    .add(butconverti3)
                    .add(tipo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Inserisci articoli da Documenti", jPanel9);

        elenca_locks.setText("Elenca locks");
        elenca_locks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elenca_locksActionPerformed(evt);
            }
        });

        locks.setColumns(20);
        locks.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        locks.setRows(5);
        jScrollPane10.setViewportView(locks);

        azzera_locks.setText("Azzera");
        azzera_locks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                azzera_locksActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel10Layout.createSequentialGroup()
                        .add(elenca_locks)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(azzera_locks)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1345, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(elenca_locks)
                    .add(azzera_locks))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Azzera Locks", jPanel10);

        butAzzera.setText("Azzera");
        butAzzera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAzzeraActionPerformed(evt);
            }
        });

        azzeramag.setColumns(20);
        azzeramag.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        azzeramag.setRows(5);
        jScrollPane11.setViewportView(azzeramag);

        jLabel4.setText("Cliccando Azzera verranno generati i movimenti di magazzino necessari per azzerare le giacenze");

        labErroreAzzera.setForeground(new java.awt.Color(255, 51, 0));

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane11)
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jPanel11Layout.createSequentialGroup()
                                .add(butAzzera)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(labErroreAzzera)))
                        .add(0, 886, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(butAzzera)
                    .add(labErroreAzzera))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Azzera Magazzino", jPanel11);

        elenca_locks2.setText("Scarica");
        elenca_locks2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elenca_locks2ActionPerformed(evt);
            }
        });

        logmysql51.setColumns(20);
        logmysql51.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        logmysql51.setRows(5);
        jScrollPane12.setViewportView(logmysql51);

        jLabel5.setText("Clicca qui per scaricare mysql 5.1 interno solo per windows");

        org.jdesktop.layout.GroupLayout jPanel12Layout = new org.jdesktop.layout.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane12)
                    .add(jPanel12Layout.createSequentialGroup()
                        .add(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5)
                            .add(elenca_locks2))
                        .add(0, 1065, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(elenca_locks2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Scarica mysql 5.1 interno per windows", jPanel12);

        logbloccasblocca.setColumns(20);
        logbloccasblocca.setRows(5);
        jScrollPane13.setViewportView(logbloccasblocca);

        bloccoSblocco.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Blocca", "Sblocca" }));

        jLabel6.setText("Lavoro:");

        jLabel7.setText("Tipo documento:");

        tipo_doc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tutti", "Fatture di acquisto", "Fatture di vendita" }));

        jLabel8.setText("Dal");

        dal.setName("dal"); // NOI18N
        dal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dalFocusLost(evt);
            }
        });
        dal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dalActionPerformed(evt);
            }
        });
        dal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dalPropertyChange(evt);
            }
        });

        al.setName("dal"); // NOI18N
        al.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                alFocusLost(evt);
            }
        });
        al.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alActionPerformed(evt);
            }
        });
        al.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                alPropertyChange(evt);
            }
        });

        jLabel9.setText("Al");

        btnStart.setText("Inzia operazione");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout tabSbloccoFattureLayout = new org.jdesktop.layout.GroupLayout(tabSbloccoFatture);
        tabSbloccoFatture.setLayout(tabSbloccoFattureLayout);
        tabSbloccoFattureLayout.setHorizontalGroup(
            tabSbloccoFattureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabSbloccoFattureLayout.createSequentialGroup()
                .addContainerGap()
                .add(tabSbloccoFattureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tabSbloccoFattureLayout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bloccoSblocco, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tipo_doc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(al, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnStart)
                        .add(0, 589, Short.MAX_VALUE))
                    .add(jScrollPane13))
                .addContainerGap())
        );
        tabSbloccoFattureLayout.setVerticalGroup(
            tabSbloccoFattureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabSbloccoFattureLayout.createSequentialGroup()
                .addContainerGap()
                .add(tabSbloccoFattureLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bloccoSblocco, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(jLabel7)
                    .add(tipo_doc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)
                    .add(dal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(al, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9)
                    .add(btnStart))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Blocca/Sblocca Fatture", tabSbloccoFatture);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabpadre)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabpadre)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerformed
        SwingUtils.initJComboFromDb(anno, Db.getConn(), "select anno from " + teste() + " group by anno order by anno desc", "anno", "anno");
}//GEN-LAST:event_tipoActionPerformed

    private void controllaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controllaActionPerformed
        SwingUtils.mouse_wait(this);
        tabm().setRowCount(0);

//        String sql = "select cast(concat('Doc. ',d.serie, d.numero,' del ',DATE_FORMAT(d.data, '%d/%m/%y')) as CHAR) as doc, IF(min(m.id) is null, true, false) as mov from " + teste() + " d left join movimenti_magazzino m";
//        sql += " on d.id = m.da_id and m.da_tabella = '" + teste() + "'";
//        sql += " where year(d.data) = " + anno.getSelectedItem().toString();
//        sql += " group by d.id";
//        sql += " order by d.id desc";
        String sql = "select m.id, m.da_id, cast(concat('Doc. ',d.serie, d.numero,' del ',DATE_FORMAT(d.data, '%d/%m/%y')) as CHAR) as doc "
                + " from movimenti_magazzino m  left join  test_fatt d "
                + " on  m.da_id = d.id and m.da_tabella = '" + teste() + "' "
                + " where m.da_tabella = '" + teste() + "' and year(m.data) = " + anno.getSelectedItem().toString() + " and m.da_id > 0 order by m.da_id desc";
        System.out.println("sql: " + sql);
        List<Object[]> list;
        try {
            list = DbUtils.getListArray(Db.getConn(), sql);
            for (Object[] row : list) {
                tabm().addRow(row);
            }
        } catch (Exception ex) {
            Logger.getLogger(JDialogManutenzione.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtils.mouse_def(this);
    }//GEN-LAST:event_controllaActionPerformed

    private void eliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaActionPerformed
        for (int i = 0; i < tab.getRowCount(); i++) {
            if (tab.getValueAt(i, 2) == null) {
                System.out.println("elimino movimento id: " + tab.getValueAt(i, 0));
                try {
                    DbUtils.tryExecQuery(Db.getConn(), "delete from movimenti_magazzino where id = " + tab.getValueAt(i, 0));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        controllaActionPerformed(null);
    }//GEN-LAST:event_eliminaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ResultSet r = null;
        try {
            r = DbUtils.tryOpenResultSet(Db.getConn(), "show tables");
            while (r.next()) {
                check_area.append(r.getString(1));
                ResultSet rc = DbUtils.tryOpenResultSet(Db.getConn(), "check table " + r.getString(1));
                try {
                    rc.next();
                    System.out.println(rc.getString(4));
                    System.out.println(r.getString(1) + " : checked");
                    check_area.append(" ..." + rc.getString(4) + "\n");
                    check_area.setCaretPosition(check_area.getText().length());
                } finally {
                    rc.getStatement().close();
                    rc.close();
                }
            }
        } catch (Exception err) {
            try {
                r.getStatement().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                r.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ta3.append("sql:\n" + sql3);
        List<Map> list;
        try {
            list = DbUtils.getListMap(Db.getConn(), sql3);
            for (Map m : list) {
                ta3.append("\nrec: " + DebugFastUtils.dumpAsString(m));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            SwingUtils.showErrorMessage(main.getPadreWindow(), ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ta3.append("\npulizia:\n");
        ta3.append("sql:\n" + sql3);
        List<Map> list;
        try {
            list = DbUtils.getListMap(Db.getConn(), sql3);
            for (Map m : list) {
                ta3.append("\nrec: " + DebugFastUtils.dumpAsString(m));
                String sql = "delete from movimenti_magazzino where id = " + CastUtils.toString(m.get("id"));
                ta3.append("\nsql: " + DebugFastUtils.dumpAsString(m));
                int recs = DbUtils.tryExecQueryWithResult(Db.getConn(), sql);
                ta3.append("\nrecs affected: " + recs);
                ta3.append("\n");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            SwingUtils.showErrorMessage(main.getPadreWindow(), ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String msg = "";
        MicroBench mb = new MicroBench();
        mb.start();
        String msgf = main.controlloNumeri("test_fatt");
        String msgd = main.controlloNumeri("test_ddt");
        System.out.println("fine controllo numerazione tempo:" + mb.getDiff(""));
        if (StringUtils.isNotBlank(msgf) || StringUtils.isNotBlank(msgd)) {
            msg = "Attenzione, problemi nella numerazione dei documenti:\n";
            if (StringUtils.isNotBlank(msgf)) {
                msg += "\nFatture di vendita:\n" + msgf;
            }
            if (StringUtils.isNotBlank(msgd)) {
                msg += "\nDDT di vendita:\n" + msgd;
            }
            textAreaNum.setText(msg);
        } else {
            textAreaNum.setText("Numerazione corretta");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void stampaNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stampaNumActionPerformed
        PrintUtilities p = new PrintUtilities(textAreaNum);
        p.scala = 1;
        p.print();
    }//GEN-LAST:event_stampaNumActionPerformed

    private void butRifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRifActionPerformed
        String msg = "";
        MicroBench mb = new MicroBench();
        mb.start();

        SwingUtils.mouse_wait(this);

        aggiornaRif(false);
        aggiornaRif(true);

        SwingUtils.mouse_def(this);

        mb.out("fine rif");
    }//GEN-LAST:event_butRifActionPerformed

    private void butRif1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRif1ActionPerformed
        try {
            textAreaRicSca.append("records aggiornati per totali: " + InvoicexUtil.ricalcolaPagatoDaPagare());
            textAreaRicSca.append("\nrecords aggiornati per numeri: " + InvoicexUtil.ricalcolaTotaleScadenze());
        } catch (Exception e) {
            e.printStackTrace();
            textAreaRicSca.append(e.toString());
        }

    }//GEN-LAST:event_butRif1ActionPerformed

    private void butconvertiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butconvertiActionPerformed
        SwingWorker w = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                //prima di tutto controllo se è già in utf8 dalla tabella clie_forn
                Connection conn = null;
                try {
                    conn = Db.getConn();
                    DbUtils.tryExecQuery(conn, "SET FOREIGN_KEY_CHECKS = 0;");

                    List<Map> ret = DbUtils.getListMap(conn, "show table status where name = 'clie_forn'");
                    String coll = cu.s(ret.get(0).get("Collation"));
                    if (!forza.isSelected() && coll.equalsIgnoreCase("utf8_general_ci")) {
                        converti.append("la tabella clie_forn è già UTF8 quindi non procedo (collate:" + coll + ")" + "\n");
                        return null;
                    }

                    //prendo elenco tabelle e converto in utf8
                    ret = DbUtils.getListMap(conn, "show table status");
                    for (Map r : ret) {
                        String tab = cu.s(r.get("Name"));
                        coll = cu.s(r.get("Collation"));
                        if (StringUtils.isNotBlank(coll)) {
                            //controllo che non sia utf8
                            if (!coll.equalsIgnoreCase("utf8_general_ci")) {
                                //faccio backup
                                //prima faccio dump
                                File dirbackuputf8 = new File(CurrentDir.getCurrentDir() + "/backup_conv_utf8");
                                if (dirbackuputf8.isDirectory() || dirbackuputf8.mkdir()) {
                                    String nomeFileDump = CurrentDir.getCurrentDir() + "/backup_conv_utf8/dump_";
                                    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmm");
                                    Date d = new Date();
                                    String name = tab;
                                    nomeFileDump += name + "_" + sdf.format(d) + ".txt";
                                    FileOutputStream fos = new FileOutputStream(nomeFileDump, false);
                                    it.tnx.Util.dumpTable(name, conn, fos);
                                    System.out.println(name + " : dumped");
                                    fos.close();
                                    //converto
                                    converti.append("conversione " + tab + " : " + coll + "\n");
                                    try {
                                        String sql = "ALTER TABLE " + tab + " CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci";
                                        System.out.println("sql = " + sql);
                                        DbUtils.tryExecQuery(conn, sql);
                                    } catch (Exception e) {
                                        converti.append(e.toString() + "\n");
                                    }
                                } else {
                                    converti.append("errore cartella " + dirbackuputf8.getAbsolutePath() + "\n");
                                    break;
                                }
                            } else {
                                converti.append("non converto " + tab + " perchè già utf8\n");
                            }
                        } else {
                            converti.append("non converto " + tab + " perchè non tabella\n");
                        }
                        converti.setCaretPosition(converti.getText().length());
                    }

                    ret = DbUtils.getListMap(conn, "show table status");
                    for (Map r : ret) {
                        String tab = cu.s(r.get("Name"));
                        coll = cu.s(r.get("Collation"));
                        converti.append("verifica " + tab + " : " + coll + "\n");
                        converti.setCaretPosition(converti.getText().length());
                    }

                    //converto db
                    DbUtils.tryExecQuery(conn, "ALTER DATABASE " + Db.dbNameDB + " COLLATE 'utf8_general_ci'");

                    //verifico db
                    ret = DbUtils.getListMap(conn, "show variables like 'collation_database'");
                    converti.append("verifica " + Db.dbNameDB + " : " + ret.get(0).get("Value") + "\n");

                } catch (Exception e2) {
                    e2.printStackTrace();
                    converti.append(e2.toString() + "\n");
                }

                try {
                    DbUtils.tryExecQuery(conn, "SET FOREIGN_KEY_CHECKS = 1;");
                } catch (Exception e) {
                }
                return null;
            }
        };
        w.execute();

    }//GEN-LAST:event_butconvertiActionPerformed

    private void butStoricizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStoricizzaActionPerformed
        Connection conn = null;

        Date data_stor = new Date();
        String s_data_stor = DateUtils.formatDateTime(data_stor);
        String s_data_stor_mysql = FormatUtils.formatMysqlTimestamp(data_stor);

        int progress = 0;

        try {
//            conn = Db.getConnection();
            conn = Db.getConn();

            //calcolare le giacenze e inserire movimenti di esistenza iniziale
            Date data = cu.toDateIta(data_storicizzazione.getText());
            String s_data = DateUtils.formatDateIta(data);
            List<Giacenza> ret = main.magazzino.getGiacenza(true, null, (Integer) 5, data, true, false, false, Magazzino.Depositi.TUTTI_DETTAGLIO);

            dbu.tryExecQuery(conn, "LOCK TABLES storicizzazioni WRITE"
                    + ", movimenti_magazzino WRITE"
                    + ", movimenti_magazzino_storico WRITE"
                    + "");
            progress = 1;

            //creo record storicizzazione
            String sql = "insert into storicizzazioni set tabella = 'movimenti_magazzino', inizio = '" + s_data_stor_mysql + "'";
            DbUtils.tryExecQuery(conn, sql);
            Integer id_stor = cu.i(dbu.getObject(conn, "select LAST_INSERT_ID()"));
            progress = 2;

            Integer ultimo_id_mov = cu.i0(dbu.getObject(conn, "select max(id) from movimenti_magazzino"));

            //scrivo i movimenti di es iniz sulla base della giacenza
            for (Iterator<Giacenza> it = ret.iterator(); it.hasNext();) {
                Giacenza g = it.next();
//                System.out.println("g = " + g);
                Map m = new HashMap();
                m.put("data", data);
                m.put("causale", 1);
                m.put("deposito", g.getDeposito_id() == null ? 0 : g.getDeposito_id());
                m.put("articolo", g.getCodice_articolo());
                m.put("quantita", g.getGiacenza());
                m.put("note", "storicizzazione del " + s_data_stor + " a data " + s_data);
                m.put("matricola", StringUtils.isBlank(g.getMatricola()) ? null : g.getMatricola());
                m.put("lotto", StringUtils.isBlank(g.getLotto()) ? null : g.getLotto());
                m.put("id_storicizzazione", id_stor);
                sql = "insert into movimenti_magazzino set " + dbu.prepareSqlFromMap(m);
                DbUtils.tryExecQuery(conn, sql);
            }
            progress = 4;

            //sposto i movimenti da storicizzare, vado di 1000 in 1000
            int tot = cu.i0(dbu.getObject(conn, "select count(*) from movimenti_magazzino where data <= " + Db.pc(data, Types.DATE) + " and id <= " + ultimo_id_mov));
            System.out.println("mov da spostare = " + tot);

            sql = "insert into movimenti_magazzino_storico "
                    + " select id, data, causale, deposito, articolo, quantita, note, "
                    + " da_tabella, da_serie, da_numero, da_anno, matricola, da_id, lotto, da_tipo_fattura, "
                    + " modificato_ts, prezzo_medio, da_id_riga, " + id_stor + " as id_stor from movimenti_magazzino where data <= " + Db.pc(data, Types.DATE) + " and id <= " + ultimo_id_mov;
            int ret_tot = DbUtils.tryExecQueryWithResult(conn, sql);
            System.out.println("mov spostati = " + ret_tot);

            progress = 5;

            text_storicizza.setText("movimenti storicizzati: " + ret_tot);

            sql = "delete from movimenti_magazzino where data <= " + Db.pc(data, Types.DATE) + " and id <= " + ultimo_id_mov;
            int ret_tot_del = DbUtils.tryExecQueryWithResult(conn, sql);

            progress = 6;

            sql = "update storicizzazioni set fine = '" + FormatUtils.formatMysqlTimestamp(new Date()) + "' where id = " + id_stor;
            DbUtils.tryExecQuery(conn, sql);

            progress = 7;

            System.out.println("mov spostati del = " + ret_tot_del);
            text_storicizza.setText("movimenti storicizzati: " + ret_tot + "/" + ret_tot_del);

            dbu.tryExecQuery(conn, "UNLOCK TABLES");
            progress = 8;

            //azzero mov eliminati
            sql = "delete from movimenti_magazzino_eliminati";
            DbUtils.tryExecQuery(conn, sql);
        } catch (Exception e) {
            SwingUtils.showExceptionMessage(this, e);
            e.printStackTrace();
            System.out.println("annullare la storicizzazione, bloccata al punto: " + progress);
            SwingUtils.showErrorMessage(this, "annullare la storicizzazione, bloccata al punto: " + progress);
            try {
                dbu.tryExecQuery(conn, "UNLOCK TABLES");
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (Exception e) {
            }
        }
        System.out.println("fine storicizzazione");
    }//GEN-LAST:event_butStoricizzaActionPerformed

    private void butconverti2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butconverti2ActionPerformed
        TreeMap<String, Map> tmap;
        try {
            tmap = getListaArticoli();
            System.out.println("tmap = " + tmap);

            List list = new ArrayList(tmap.values());
            if (list == null || list.size() == 0) {
                insart.setText("nessun articolo da inserire\n");
            } else {
                TextTable tt = new TextTable(new MapBasedTableModel(list));
                tt.setAddRowNumbering(true);
                ByteArrayOutputStream byteout = new ByteArrayOutputStream();
                PrintStream ps = new PrintStream(byteout);
                tt.printTable(ps, 0);
                insart.setText(byteout.toString() + "\n");
            }
        } catch (Exception ex) {
            Logger.getLogger(JDialogManutenzione.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_butconverti2ActionPerformed

    private void butconverti3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butconverti3ActionPerformed
        TreeMap<String, Map> tmap;
        try {
            tmap = getListaArticoli();
            System.out.println("tmap = " + tmap);

            List<Map> list = new ArrayList(tmap.values());
            int conta = 0;

            String listino = cu.s(DbUtils.getObject(Db.getConn(), "select listino_base from dati_azienda"));

            for (Map m : list) {
                try {
                    Map to = new HashMap();
                    String codice = cu.s(m.get("codice_articolo"));
                    to.put("codice", codice);
                    to.put("descrizione", m.get("descrizione"));
                    to.put("um", m.get("um"));
                    System.out.println("to = " + to);
                    String sql = "insert into articoli set " + DbUtils.prepareSqlFromMap(to);
                    System.out.println("sql = " + sql);
                    DbUtils.tryExecQuery(Db.getConn(), sql);
                    //prezzo
                    sql = "delete from articoli_prezzi where articolo = " + Db.pcs(codice) + " and listino = " + Db.pcs(listino);
                    System.out.println("sql = " + sql);
                    DbUtils.tryExecQuery(Db.getConn(), sql);
                    to = new HashMap();
                    to.put("articolo", codice);
                    to.put("listino", listino);
                    to.put("prezzo", m.get("prezzo"));
                    sql = "insert into articoli_prezzi set " + DbUtils.prepareSqlFromMap(to);
                    System.out.println("sql = " + sql);
                    DbUtils.tryExecQuery(Db.getConn(), sql);

                    insart.append("inserito articolo: " + codice + " - " + m.get("descrizione") + "\n");
                    conta++;

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            insart.append("\ninseriti " + conta + " articoli\n");
        } catch (Exception ex) {
            Logger.getLogger(JDialogManutenzione.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butconverti3ActionPerformed

    private void tabpadreStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabpadreStateChanged
        System.out.println("evt = " + evt);
    }//GEN-LAST:event_tabpadreStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            main.fileIni.setValue("varie", "manutenzione_sel_index", tabpadre.getSelectedIndex());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void tipo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipo1ActionPerformed
        main.fileIni.setValue("pref", "manutenzione_import_articoli_tipo1", tipo1.getSelectedIndex());
    }//GEN-LAST:event_tipo1ActionPerformed

    private void elenca_locksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elenca_locksActionPerformed
        try {
            List<Map> list = dbu.getListMap(Db.getConn(), "select * from locks");
            if (list == null || list.size() == 0) {
                locks.setText("nessun lock presente");
            } else {
                TextTable tt = new TextTable(new MapBasedTableModel(list));
                tt.setAddRowNumbering(true);
                ByteArrayOutputStream byteout = new ByteArrayOutputStream();
                PrintStream ps = new PrintStream(byteout);
                tt.printTable(ps, 0);
                locks.setText(byteout.toString() + "\n");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_elenca_locksActionPerformed

    private void azzera_locksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_azzera_locksActionPerformed
        if (SwingUtils.showYesNoMessage(this, "Sicuro di azzerare i locks ?")) {
            String sql = "delete from locks";
            System.out.println("locks elimino locks sql = " + sql);
            try {
                dbu.tryExecQuery(Db.getConn(), sql);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_azzera_locksActionPerformed

    private void butAzzeraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAzzeraActionPerformed
        Magazzino m = new Magazzino();
        ArrayList list;
        try {
            list = m.getGiacenza(null);
        } catch (Exception ex) {
            SwingUtils.showExceptionMessage(this, ex);
            return;
        }
        for (Object o : list) {
            Giacenza g = ((Giacenza) o);
            Integer causale = null;
            String msg = g.getCodice_articolo() + ":" + g.getGiacenza() + " -> ";
            if (g.getGiacenza() > 0) {
                msg += "scarico";
                causale = Magazzino.SCARICO;
            } else if (g.getGiacenza() < 0) {
                msg += "carico";
                causale = Magazzino.CARICO;
            } else {
                msg += "niente, già a 0";
            }
            azzeramag.append(msg + "\n");
            System.out.println(msg);
            Map r = new HashMap();
            r.put("data", new Date());
            r.put("causale", causale);
            r.put("deposito", main.fileIni.getValue("depositi", "predefinito", "0"));
            r.put("articolo", g.getCodice_articolo());
            r.put("quantita", Math.abs(g.getGiacenza()));
            r.put("note", "azzeramento magazzino");
            String sql = "insert into movimenti_magazzino set " + dbu.prepareSqlFromMap(r);
            System.out.println("sql = " + sql);
            try {
                dbu.tryExecQuery(Db.getConn(), sql);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_butAzzeraActionPerformed

    private void elenca_locks2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elenca_locks2ActionPerformed
        if (PlatformUtils.isWindows()) {

            if (!SwingUtils.showYesNoMessage(this, "Attenzione, devo stoppare mysql interno, procedo ?\nSe hai finestra di Invoicex aperte magari prima chiudile")) {
                return;
            }

            SwingUtils.mouse_wait(this);
            SwingWorker w = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    //copio il binario di mysql
                    Date d = new Date();
                    SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");

                    try {
                        logmysql51.append("\ncopio mysql\\bin\\mysqld-nt.exe in mysqld-nt_" + sdf1.format(d) + ".exe");
                        FileUtils.copyFile(new File("mysql\\bin\\mysqld-nt.exe"), new File("mysql\\bin\\mysqld-nt_" + sdf1.format(d) + ".exe"));

                        logmysql51.append("\ncopio mysql\\bin\\mysqladmin.exe ...");
                        FileUtils.copyFile(new File("mysql\\bin\\mysqladmin.exe"), new File("mysql\\bin\\mysqladmin_" + sdf1.format(d) + ".exe"));

                        logmysql51.append("\ncopio mysql\\share\\english\\errmsg.sys ...");
                        FileUtils.copyFile(new File("mysql\\share\\english\\errmsg.sys"), new File("mysql\\share\\english\\errmsg_" + sdf1.format(d) + ".sys"));
                        logmysql51.append("\ncopio mysql\\share\\english\\errmsg.txt ...");
                        FileUtils.copyFile(new File("mysql\\share\\english\\errmsg.txt"), new File("mysql\\share\\english\\errmsg_" + sdf1.format(d) + ".txt"));

                        logmysql51.append("\ncopio mysql\\share\\italian\\errmsg.sys ...");
                        FileUtils.copyFile(new File("mysql\\share\\italian\\errmsg.sys"), new File("mysql\\share\\italian\\errmsg_" + sdf1.format(d) + ".sys"));
                        logmysql51.append("\ncopio mysql\\share\\italian\\errmsg.txt ...");
                        FileUtils.copyFile(new File("mysql\\share\\italian\\errmsg.txt"), new File("mysql\\share\\italian\\errmsg_" + sdf1.format(d) + ".txt"));

                    } catch (Exception e) {
                        logmysql51.append("\n\n" + e.toString());
                        e.printStackTrace();
                    }

                    //stoppo mysql
                    logmysql51.append("\nattendo chiusura mysql interno");
                    main.stopdb(false);
                    while (main.mysql_is_running) {
                        Thread.sleep(1000);
                        logmysql51.append(".");
                    }

                    //scarico il nuovo
                    logmysql51.append("\nscarico mysql_51_win.zip...");
                    HttpUtils.saveBigFile("http://server.invoicex.it/download/invoicex/mysql/mysql_51_win.zip", "mysql_51_win.zip");

                    //scompatto
                    logmysql51.append("\nscompatto...");
                    UnZip.unzip(new File("mysql_51_win.zip"), new File("."));

                    logmysql51.append("\n\n\nFinito !!!\nControlla nella cartella mysql\\bin e riavvia Invoicex");

                    return null;
                }

                @Override
                protected void done() {
                    SwingUtils.mouse_def(JDialogManutenzione.this);
                }

            };
            w.execute();
        } else {
            SwingUtils.showErrorMessage(this, "Sei su " + PlatformUtils.getPlatformName() + " !!!");
        }
    }//GEN-LAST:event_elenca_locks2ActionPerformed

    private void dalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dalFocusLost

    }//GEN-LAST:event_dalFocusLost

    private void dalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dalActionPerformed

    }//GEN-LAST:event_dalActionPerformed

    private void dalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dalPropertyChange
        System.out.println("evt = " + evt);
    }//GEN-LAST:event_dalPropertyChange

    private void alFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_alFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_alFocusLost

    private void alActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alActionPerformed

    private void alPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_alPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_alPropertyChange

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
               

        logbloccasblocca.setText("");
        
        String data_dal = DateUtils.formatDateIta(dal.getDate());
        String data_al  = DateUtils.formatDateIta(al.getDate());
        String lavoro   = String.valueOf(bloccoSblocco.getSelectedItem());
        String tipoDoc  = String.valueOf(tipo_doc.getSelectedItem());
        
        if(data_dal != "" && data_al != ""){
            System.out.println("Data dal: " + data_dal);
            System.out.println("Data al: " + data_al);
            System.out.println("Tipo di operazione: " + lavoro);
            System.out.println("Tipi di documento: " + tipoDoc);
            
            ArrayList<String> query = new ArrayList();
            
            
            if(tipoDoc == "Tutti" || tipoDoc == "Fatture di acquisto"){
                String q = "SELECT id, serie, numero, anno, tipo_fattura, 'test_fatt_acquisto' as tabella "
                        + "FROM test_fatt_acquisto "
                        + "WHERE data BETWEEN " + Db.pc(data_dal, Types.DATE) + " AND " + Db.pc(data_al, Types.DATE);
                
                if(lavoro == "Blocca"){
                    q += " AND isNull(bloccata)";
                } else {
                    q += "AND (!isNull(bloccata) OR bloccata = '' OR bloccata = '0000-00-00')";
                }                
                
                query.add(q);
            }
            
            if(tipoDoc == "Tutti" || tipoDoc == "Fatture di vendita"){
                String q = "SELECT id, serie, numero, anno, tipo_fattura, 'test_fatt' as tabella "
                        + "FROM test_fatt "
                        + "WHERE data BETWEEN " + Db.pc(data_dal, Types.DATE) + " AND " + Db.pc(data_al, Types.DATE);
                
                if(lavoro == "Blocca"){
                    q += " AND isNull(bloccata)";
                } else {
                    q += "AND (!isNull(bloccata) OR bloccata = '' OR bloccata = '0000-00-00')";
                }
                    
                       
                
                query.add(q);
            }
            
            
            String sql = StringUtils.join(query, " UNION ");
            try {

                ArrayList<Map> lista = dbu.getListMap(Db.getConn(), sql);
                int rowCount = lista.size();
                
                logbloccasblocca.append(rowCount + " documenti da elaborare" + System.getProperty("line.separator"));
                logbloccasblocca.append(System.getProperty("line.separator"));
                
                if(rowCount > 0){                    
                    for(Map record : lista){

                        Integer id          = CastUtils.toInteger(record.get("id"));
                        Integer tipodoc     = CastUtils.toInteger(record.get("tipo_fattura"));
                        String seriedoc     = CastUtils.toString(Db.nz(record.get("serie"), ""));
                        String numerodoc    = CastUtils.toString(record.get("numero"));
                        String annodoc      = CastUtils.toString(record.get("anno"));
                        String tabella      = CastUtils.toString(record.get("tabella"));
                        String tipoFattura  = dbFattura.getDescTipoFattura(tipodoc);
                        
                        String descrizione  = seriedoc + numerodoc + "/" + annodoc;
                        
                        String operazione   = lavoro == "Blocca" ? "bloccata" : "sbloccata";
                        String value        = lavoro == "Blocca" ? "CURRENT_DATE" : "null";  
                        
                        String update       = "UPDATE " + tabella + " SET bloccata = " + value + " WHERE id = " + Db.pc(id, Types.INTEGER);
                        
                        Db.executeSql(update);
                        
                        logbloccasblocca.append(tipoFattura + " " + descrizione + " " + operazione + System.getProperty("line.separator"));
                    }
                    
                    logbloccasblocca.append(System.getProperty("line.separator") + rowCount + " documenti elaborati");
                }
                
                
                
                
                
            } catch (Exception ex) {
                Logger.getLogger(JDialogManutenzione.class.getName()).log(Level.SEVERE, null, ex);
            }            
        } else {
            logbloccasblocca.setText("Devi selezionare una data di inizio e fine per attivare l'operazione");
            
        }
        
    }//GEN-LAST:event_btnStartActionPerformed

    public void aggiornaRif(boolean acquisto) {
        String sql = null;
        String suffisso = acquisto ? "_acquisto" : "";
        try {
            //ordi
            sql = "select id as da_ordi from test_ordi" + suffisso + " where year(data) >= " + (DateUtils.getCurrentYear() - 1) + " order by id";
            System.out.println("sql = " + sql);
            List<Map> list1 = DbUtils.getListMap(Db.getConn(), sql);
            for (Map m1 : list1) {
                if (DbUtils.containRows(Db.getConn(), "select id from test_ordi" + suffisso + " where id = " + m1.get("da_ordi"))) {
                    System.out.println("devo aggiornare l'ordine id:" + m1.get("da_ordi"));
                    String convertito = "";
                    sql = "select anno, numero, serie, id, id_padre, da_ordi from righ_fatt" + suffisso + " where da_ordi = " + m1.get("da_ordi") + " group by id_padre";
                    System.out.println("sql = " + sql);
                    List<Map> list2 = DbUtils.getListMap(Db.getConn(), sql);
                    for (Map m2 : list2) {
                        System.out.println("l'ordine id:" + m1.get("da_ordi") + " è in questa fattura:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("id_padre"));
                        convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA : Db.TIPO_DOCUMENTO_FATTURA, CastUtils.toInteger(m2.get("id_padre")), true);
                    }
                    sql = "select anno, numero, serie, id, id_padre, da_ordi from righ_ddt" + suffisso + " where da_ordi = " + m1.get("da_ordi") + " group by id_padre";
                    list2 = DbUtils.getListMap(Db.getConn(), sql);
                    System.out.println("sql = " + sql);
                    for (Map m2 : list2) {
                        System.out.println("l'ordine id:" + m1.get("da_ordi") + " è in questo ddt:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("id_padre"));
                        convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_DDT_ACQUISTO : Db.TIPO_DOCUMENTO_DDT, CastUtils.toInteger(m2.get("id_padre")), true);
                    }

                    String convertito_old = "";
                    try {
                        convertito_old = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select convertito from test_ordi" + suffisso + " where id = " + m1.get("da_ordi")));
                    } catch (Exception e) {
                    }

                    if (convertito != null && !convertito.equals(convertito_old)) {
                        //aggiorno
                        sql = "update test_ordi" + suffisso + " t";
                        sql += " set convertito = " + Db.pc(convertito, "VARCHAR");
                        sql += " where id = " + m1.get("da_ordi");
                        System.out.println("sql = " + sql);
                        DbUtils.tryExecQuery(Db.getConn(), sql);
                        textAreaRif.append("ordine id:" + m1.get("da_ordi") + " cambiato da:\n" + convertito_old + " \nin:\n" + convertito + "\n\n");
                    }
                } else {
                    System.out.println("devo aggiornare l'ordine id:" + m1.get("da_ordi") + " ma non esiste...");
                }
            }

            //ddt
            sql = "select id as da_ddt from test_ddt" + suffisso + " where year(data) >= " + (DateUtils.getCurrentYear() - 1) + " order by id";
            System.out.println("sql = " + sql);
            list1 = DbUtils.getListMap(Db.getConn(), sql);
            for (Map m1 : list1) {
                if (DbUtils.containRows(Db.getConn(), "select id from test_ddt" + suffisso + " where id = " + m1.get("da_ddt"))) {
                    System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt"));
                    String convertito = "";
                    sql = "select anno, numero, serie, id, id_padre, da_ddt from righ_fatt" + suffisso + " where da_ddt = " + m1.get("da_ddt") + " group by id_padre";
                    System.out.println("sql = " + sql);
                    List<Map> list2 = DbUtils.getListMap(Db.getConn(), sql);
                    for (Map m2 : list2) {
                        System.out.println("il ddt id:" + m1.get("da_ddt") + " è in questa fattura:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("id_padre"));
                        convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA : Db.TIPO_DOCUMENTO_FATTURA, CastUtils.toInteger(m2.get("id_padre")), false);
                    }

                    String convertito_old = "";
                    try {
                        convertito_old = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select convertito from test_ddt" + suffisso + " where id = " + m1.get("da_ddt")));
                    } catch (Exception e) {
                    }

                    if (convertito != null && !convertito.equals(convertito_old)) {
                        //aggiorno
                        sql = "update test_ddt" + suffisso + " t";
                        sql += " set convertito = " + Db.pc(convertito, "VARCHAR");
                        sql += " where id = " + m1.get("da_ddt");
                        System.out.println("sql = " + sql);
                        DbUtils.tryExecQuery(Db.getConn(), sql);
                        textAreaRif.append("ddt id:" + m1.get("da_ddt") + " cambiato da:\n" + convertito_old + " \nin:\n" + convertito + "\n\n");
                    }
                } else {
                    System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt") + " ma non esiste...");
                }
            }

            //ddt - fatt (in_fatt su righ_ddt)
            if (main.getPersonalContain("aggrif2")) {
                sql = "select id as da_ddt from test_ddt" + suffisso + " where year(data) >= " + (DateUtils.getCurrentYear() - 1) + " order by id";
                System.out.println("sql = " + sql);
                list1 = DbUtils.getListMap(Db.getConn(), sql);
                for (Map m1 : list1) {
                    if (DbUtils.containRows(Db.getConn(), "select id from test_ddt" + suffisso + " where id = " + m1.get("da_ddt"))) {
                        System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt"));
                        String convertito = "";
                        sql = "select tf.anno, tf.numero, tf.serie, tf.id, id_padre, in_fatt from righ_ddt" + suffisso + " rd join test_fatt" + suffisso + " tf on rd.in_fatt = tf.id  where rd.id_padre = " + m1.get("da_ddt") + "  group by in_fatt";
                        System.out.println("sql = " + sql);
                        List<Map> list2 = DbUtils.getListMap(Db.getConn(), sql);
                        for (Map m2 : list2) {
                            System.out.println("il ddt id:" + m1.get("da_ddt") + " è in questa fattura:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("in_fatt"));
                            convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA : Db.TIPO_DOCUMENTO_FATTURA, CastUtils.toInteger(m2.get("in_fatt")), false);
                        }
                        System.out.println("nuovo convertito  = " + convertito);

                        String convertito_old = "";
                        try {
                            convertito_old = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select convertito from test_ddt" + suffisso + " where id = " + m1.get("da_ddt")));
                        } catch (Exception e) {
                        }

                        if (convertito != null && !convertito.equals(convertito_old)) {
                            //aggiorno
                            sql = "update test_ddt" + suffisso + " t";
                            sql += " set convertito = " + Db.pc(convertito, "VARCHAR");
                            sql += " where id = " + m1.get("da_ddt");
                            System.out.println("sql = " + sql);
                            DbUtils.tryExecQuery(Db.getConn(), sql);
                            textAreaRif.append("ddt id:" + m1.get("da_ddt") + " cambiato da:\n" + convertito_old + " \nin:\n" + convertito + "\n\n");
                        }
                    } else {
                        System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt") + " ma non esiste...");
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogManutenzione dialog = new JDialogManutenzione(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker al;
    private javax.swing.JComboBox anno;
    private javax.swing.JButton azzera_locks;
    private javax.swing.JTextArea azzeramag;
    private javax.swing.JComboBox bloccoSblocco;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton butAzzera;
    private javax.swing.JButton butRif;
    private javax.swing.JButton butRif1;
    private javax.swing.JButton butStoricizza;
    private javax.swing.JButton butconverti;
    private javax.swing.JButton butconverti2;
    private javax.swing.JButton butconverti3;
    private javax.swing.JTextArea check_area;
    private javax.swing.JButton controlla;
    private javax.swing.JTextArea converti;
    private org.jdesktop.swingx.JXDatePicker dal;
    private javax.swing.JTextField data_storicizzazione;
    private javax.swing.JButton elenca_locks;
    private javax.swing.JButton elenca_locks2;
    private javax.swing.JButton elimina;
    private javax.swing.JCheckBox forza;
    private javax.swing.JTextArea insart;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel labErroreAzzera;
    private javax.swing.JLabel labErroreStoricizzazione;
    private javax.swing.JTextArea locks;
    private javax.swing.JTextArea logbloccasblocca;
    private javax.swing.JTextArea logmysql51;
    private javax.swing.JButton stampaNum;
    private javax.swing.JTextArea ta3;
    private javax.swing.JTable tab;
    private javax.swing.JPanel tabSbloccoFatture;
    private javax.swing.JTabbedPane tabpadre;
    private javax.swing.JTextArea textAreaNum;
    private javax.swing.JTextArea textAreaRicSca;
    private javax.swing.JTextArea textAreaRif;
    private javax.swing.JTextArea text_storicizza;
    private javax.swing.JComboBox tipo;
    private javax.swing.JComboBox tipo1;
    private javax.swing.JComboBox tipo_doc;
    // End of variables declaration//GEN-END:variables

    private String teste() {
        if (tipo.getSelectedItem().toString().equals("DDT")) {
            return "test_ddt";
        } else {
            return "test_fatt";
        }
    }

    private DefaultTableModel tabm() {
        return (DefaultTableModel) tab.getModel();
    }

    private TreeMap<String, Map> getListaArticoli() throws Exception {
        String tabr = "righ_fatt";
        //Fatture di Vendita, Fatture di Acquisto, DDT di Vendita, DDT di Acquisto, Preventivi/Ordini di Vendita, Preventivi/Ordini di Acquisto
        if (tipo1.getSelectedItem().equals("Fatture di Acquisto")) {
            tabr = "righ_fatt_acquisto";
        }
        if (tipo1.getSelectedItem().equals("DDT di Vendita")) {
            tabr = "righ_ddt";
        }
        if (tipo1.getSelectedItem().equals("DDT di Acquisto")) {
            tabr = "righ_ddt_acquisto";
        }
        if (tipo1.getSelectedItem().equals("Preventivi/Ordini di Vendita")) {
            tabr = "righ_ordi";
        }
        if (tipo1.getSelectedItem().equals("Preventivi/Ordini di Acquisto")) {
            tabr = "righ_ordi_acquisto";
        }
        List<Map> list = DbUtils.getListMap(Db.getConn(), "select r.codice_articolo, r.descrizione, r.prezzo, r.um \n"
                + " from " + tabr + " r left join articoli a on r.codice_articolo = a.codice \n"
                + " where a.codice is null and LTRIM(RTRIM(IFNULL(r.codice_articolo,''))) != ''\n"
                + " order by r.id_padre");
        TreeMap<String, Map> tmap = new TreeMap<String, Map>();
        for (Map m : list) {
            tmap.put(cu.s(m.get("codice_articolo")), m);
        }
        return tmap;
    }
}
