/** * Invoicex Copyright (c) 2005-2016 Marco Ceccarelli, Tnx srl * * Questo software Ã¨ soggetto, e deve essere distribuito con la licenza GNU * General Public License, Version 2. La licenza accompagna il software o potete * trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the GNU General * Public License, Version 2. The license should have accompanied the software * or you may obtain a copy of the license from the Free Software Foundation at * http://www.fsf.org . * * -- Marco Ceccarelli (m.ceccarelli@tnx.it) Tnx snc (http://www.tnx.it) * */package it.tnx.invoicex.gui;import com.lowagie.text.pdf.PdfReader;import com.lowagie.text.pdf.PdfStamper;import com.webbyit.swing.ModalityInternalFrame;import gestioneFatture.CoordinateBancarie;import gestioneFatture.GenericFrmTest;import gestioneFatture.ImagePreviewPanel;import gestioneFatture.InvoicexEvent;import gestioneFatture.Menu;import gestioneFatture.Storico;import gestioneFatture.Util;import gestioneFatture.dbFattura;import gestioneFatture.dbOrdine;import gestioneFatture.frmClieDest;import gestioneFatture.frmClie_tnxIntePanel;import gestioneFatture.frmImportClientiExcel;import gestioneFatture.frmInsertRapporto;import gestioneFatture.frmListCoorBanc;import gestioneFatture.frmTestDocu;import gestioneFatture.frmTestFatt;import gestioneFatture.frmTestOrdine;import it.tnx.Db;import gestioneFatture.logic.clienti.*;import gestioneFatture.main;import it.tnx.accessoUtenti.Permesso;import it.tnx.commons.CastUtils;import it.tnx.commons.DbUtils;import it.tnx.commons.DebugFastUtils;import it.tnx.commons.FormatUtils;import it.tnx.commons.JUtil;import it.tnx.commons.KeyValuePair;import it.tnx.commons.RunnableWithArgs;import it.tnx.commons.SwingUtils;import it.tnx.commons.cu;import it.tnx.commons.dbu;import it.tnx.commons.swing.DelayedExecutor;import it.tnx.commons.table.EditorUtils;import it.tnx.commons.table.RendererUtils;import it.tnx.commons.table.TableUtils;import it.tnx.dbeans.ResultSet.*;import it.tnx.invoicex.IFunction;import it.tnx.invoicex.InvoicexUtil;import it.tnx.invoicex.gui.utils.JPanelCellKeyValue;import it.tnx.invoicex.sync.Sync;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.awt.Cursor;import java.awt.Dimension;import java.awt.KeyboardFocusManager;import java.awt.Point;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ItemEvent;import java.awt.event.MouseWheelListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.io.File;import java.io.FileOutputStream;import java.net.URL;import java.sql.Connection;import java.sql.ResultSet;import java.sql.Types;import java.text.*;import java.util.EventObject;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.*;import javax.swing.JOptionPane;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.filechooser.FileFilter;import javax.swing.table.*;import javax.swing.text.JTextComponent;import org.apache.commons.lang.StringUtils;import org.pushingpixels.trident.Timeline;import org.pushingpixels.trident.Timeline.TimelineState;import org.pushingpixels.trident.callback.TimelineCallbackAdapter;import org.pushingpixels.trident.ease.Spline;import tnxbeans.*;public class JInternalFrameClientiFornitori extends ModalityInternalFrame {    private static final int grandezzaTooltipImage = 150;    private static final int DOC_ORDINE = 0;    private static final int DOC_FATTURA = 1;    private static final int DOC_DDT = 2;    private DefaultTableModel tabPrezziClienteModel;    tnxbeans.tnxComboField comboToRefresh;    String listinoCliente = null;    public boolean isloading = true;    Component[] controlli = null;    public GenericFrmTest padre = null;    private boolean isShowPrezziCliente = false;    private float viewPos;    private tnxDbPanel lastPanelFocus = null;    private boolean chiudere_al_salvataggio = false;    private HashMap contatti_pre;    List<Map> filters = null;    RunnableWithArgs filtriActionModifica;    RunnableWithArgs filtriActionRimuovi;    DelayedExecutor delay_cliente = new DelayedExecutor(new Runnable() {        public void run() {            SwingUtilities.invokeLater(new Runnable() {                public void run() {                    SwingUtils.mouse_wait();                    dbRefresh();                    tabCent.setSelectedIndex(1);                    SwingUtils.mouse_def();                }            });        }    }, 450);    /**     * Creates new form frmDati_blank     */    public JInternalFrameClientiFornitori() {        initComponents();        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/contact-new.png"))); // NOI18N        InvoicexUtil.resizePanelFlow(panFiltri);        filtriActionRimuovi = new RunnableWithArgs() {            public void run() {                Object[] objs = getArgs();                if (objs != null && objs[1] != null) {                    //rimuovo da filtri                    if (objs != null && objs[0] != null) {                        Map m = (Map) objs[0];                        Object campo = m.get("campo");                        Iterator<Map> iter = filters.iterator();                        while (iter.hasNext()) {                            Map mf = iter.next();                            if (mf.get("campo").equals(campo)) {                                filters.remove(mf);                                break;                            }                        }                    }                    try {                        InvoicexUtil.salvaFiltri(filters, JInternalFrameClientiFornitori.this.getClass().getName());                    } catch (Exception e) {                        e.printStackTrace();                    }                    ActionEvent ae = (ActionEvent) objs[1];                    JComponent source = (JComponent) ae.getSource();                    panFiltri.remove(source.getParent());                    panFiltri.getTopLevelAncestor().validate();                    panFiltri.getTopLevelAncestor().repaint();                    dbRefresh();                    tabCent.setSelectedIndex(1);                }            }        };        filtriActionModifica = new RunnableWithArgs() {            public void run() {                try {                    JDialog dialog = InvoicexUtil.getDialogFiltriClieForn(JInternalFrameClientiFornitori.this, true, filters);                    Object[] objs = getArgs();                    if (objs != null && objs[0] != null) {                        dialog.getClass().getDeclaredMethod("posiziona", Object.class).invoke(dialog, objs[0]);                    }                    if (objs != null && objs[1] != null) {                        ActionEvent ae = (ActionEvent) objs[1];                        JComponent source = (JComponent) ae.getSource();                        InvoicexUtil.mettiSotto(dialog, source);                    }                    dialog.setVisible(true);                    boolean conferma = dialog.getClass().getField("conferma").getBoolean(dialog);                    if (conferma) {                        filters = (List) dialog.getClass().getDeclaredMethod("getFilters").invoke(dialog);                        InvoicexUtil.aggiornaFiltri(panFiltri, filters, linkAggiungiFiltro, this, filtriActionRimuovi);                        try {                            InvoicexUtil.salvaFiltri(filters, JInternalFrameClientiFornitori.this.getClass().getName());                        } catch (Exception e) {                            e.printStackTrace();                        }                        dbRefresh();                        tabCent.setSelectedIndex(1);                    }                } catch (Throwable t) {                    t.printStackTrace();                }            }        };        for (MouseWheelListener listener : jScrollPane2.getMouseWheelListeners()) {            jScrollPane2.removeMouseWheelListener(listener);        }        if (!main.getPersonalContain("medcomp")) {            lab_agenti_alternativi.setVisible(false);            aggiungi_riga_agenti.setVisible(false);            tab_agenti_alternativi.setVisible(false);            scroll_agenti_alternativi.setVisible(false);        }        butStampaPrivacy.setVisible(false);        butStampaDestinazione.setVisible(false);        File testprivacy = new File("reports/privacy.pdf"); //alchemica valgelata        if (testprivacy.exists()) {            butStampaPrivacy.setVisible(true);        }        File testdest = new File("reports/destinatario.pdf");        if (testdest.exists()) {            butStampaDestinazione.setVisible(true);        }        KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();        focusManager.addPropertyChangeListener(                new PropertyChangeListener() {            public void propertyChange(PropertyChangeEvent e) {                if (!(main.getPadrePanel().desktop.getSelectedFrame() == JInternalFrameClientiFornitori.this)) {                    return;                }                String prop = e.getPropertyName();                if ("focusOwner".equals(prop)) {                    try {                        System.out.println("e:" + e.getPropertyName() + " old:" + e.getOldValue() + " new:" + e.getNewValue() + " source:" + e.getSource());                    } catch (Exception e2) {                    }                }//                    if (1==1) return;                if ("focusOwner".equals(prop)) {                    Component comp = (Component) e.getNewValue();                    if (comp == null) {                        return;                    }                    Component comp_par = null;                    if (comp != null && comp.getClass().getName().equals("tnxbeans.tnxMemoField$1")) {                        try {                            comp_par = comp.getParent().getParent().getParent();                            comp = comp.getParent().getParent();                        } catch (Exception e2) {                            e2.printStackTrace();                        }                    } else if (comp != null && comp.getParent() != null && comp.getParent().getClass().getName().equals("tnxbeans.tnxComboField")) {                        try {                            comp_par = comp.getParent().getParent();                            comp = comp.getParent();                        } catch (Exception e2) {                            e2.printStackTrace();                        }                    } else if (comp != null && comp.getParent() != null && comp.getParent() instanceof tnxDbPanel) {                        comp_par = comp.getParent();                    }                    if (comp_par == datiAnagrafici) {                        comp_par = null;                    }                    if (comp_par instanceof tnxDbPanel) {                        System.out.println("comp = " + comp);                        if (lastPanelFocus == null || lastPanelFocus != comp_par) {                            //view((tnxDbPanel)comp.getParent());                            selezionatoggle((tnxDbPanel) comp_par);                            lastPanelFocus = (tnxDbPanel) comp_par;                        }                        Point pcomp = comp_par.getLocation();                        if (comp_par.getParent() != dati) {                            pcomp = SwingUtilities.convertPoint(comp_par, pcomp, dati);                        }                        //int y = comp_par.getLocation().y + comp.getLocation().y;                        int y = pcomp.y + comp.getLocation().y;                        int ys = scroll_dati.getViewport().getViewPosition().y + scroll_dati.getViewport().getHeight();                        int ys2 = scroll_dati.getViewport().getViewPosition().y;                        if (y > ys - 50) {                            view(scroll_dati.getViewport().getViewPosition().y + 150);                        } else if (y < ys2 + 30) {                            view(scroll_dati.getViewport().getViewPosition().y - 150);                        }                    }                }            }            private void selezionatoggle(Container parent) {                Component[] toggles = panel_toggles.getComponents();                Map mtoggle = new HashMap();                mtoggle.put(dati_indirizzo, toggle_indirizzo);                mtoggle.put(dati_contabili, toggle_contabili);                mtoggle.put(dati_contatti, toggle_contatti);                mtoggle.put(dati_fattura_pa, toggle_fatturapa);                mtoggle.put(dati_note_opzioni, toggle_note_opzioni);                JToggleButton toggle_sel = (JToggleButton) mtoggle.get(parent);                for (Component toggle_comp : toggles) {                    if (toggle_comp instanceof JToggleButton) {                        JToggleButton toggle = (JToggleButton) toggle_comp;                        if (toggle == toggle_sel) {                            if (!toggle.isSelected()) {                                toggle.setSelected(true);                            }                        } else if (toggle.isSelected()) {                            toggle.setSelected(false);                        }                    }                }            }        }        );        InvoicexUtil.macButtonSmall(butLogo);        InvoicexUtil.macButtonSmall(butBanca);        InvoicexUtil.macButtonGradient(butNew);        InvoicexUtil.macButtonGradient(butDele);        InvoicexUtil.macButtonGradient(butDuplica);        InvoicexUtil.macButtonGradient(butFind);        InvoicexUtil.macButtonGradient(butFirs);        InvoicexUtil.macButtonGradient(butPrev);        InvoicexUtil.macButtonGradient(butNext);        InvoicexUtil.macButtonGradient(butLast);        InvoicexUtil.macButtonGradient(butStampa);        InvoicexUtil.macButtonGradient(butStampaElenco);        InvoicexUtil.macButtonGradient(butImportExcel);        tabPrezziCliente.setRowHeight(tabPrezziCliente.getRowHeight() + 4);        dati.addCampoAggiuntivo(texNotaCliente);        textObsoleto.setVisible(false);//        if(!main.pluginRitenute){//            lblDataNasc.setVisible(false);//            lblLuogNasc.setVisible(false);//            this.texLuogoNascita.setVisible(false);//            this.texDataNascita.setVisible(false);//        } else {//            this.texLuogoNascita.dbNomeCampo = "luogoNascita";//            this.texLuogoNascita.dbNomeCampo = "dataNascita";//        }//        JTextField tf = new JTextField();//        tf.setBorder(BorderFactory.createEmptyBorder(0, 2, 0, 2));//        tab_agenti_alternativi.setDefaultEditor(Object.class, new DefaultCellEditor(tf));//vedi bug http://babickababa.blogspot.it/2010/12/terminateeditonfocuslost-making.html        //        tab_agenti_alternativi.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);        tab_agenti_alternativi.setSurrendersFocusOnKeystroke(true);        EditorUtils.NumberEditor perceditor = new EditorUtils.NumberEditor();//        perceditor.setBorder(BorderFactory.createEmptyBorder(0, 2, 0, 2));        perceditor.returnNull = true;        tab_agenti_alternativi.getColumn("Provvigione").setCellEditor(perceditor);        tab_agenti_alternativi.getColumn("Provvigione").setCellRenderer(new RendererUtils.NumberRenderer() {            @Override            protected void setValue(Object value) {                super.setValue(value);                String text = getText();                if (StringUtils.isNotBlank(text)) {                    text += "%";                }                setText(text);            }        });        JPanelCellKeyValue panel_agente = new JPanelCellKeyValue();        panel_agente.campo_descrizione = "nome";        panel_agente.campo_id = "id";        panel_agente.tabella = "agenti";        tab_agenti_alternativi.setRowHeight(tab_agenti_alternativi.getRowHeight() + 2);        tabContatti.setRowHeight(tabContatti.getRowHeight() + 2);        final JComboBox combo_agenti = new JComboBox();        KeyValuePair kv = new KeyValuePair(null, "");        SwingUtils.initJComboFromDb(combo_agenti, Db.getConn(), "select id, nome from agenti order by nome", "id", "nome", kv);        combo_agenti.setBorder(BorderFactory.createEmptyBorder());        try {            final HashMap<Object, KeyValuePair> map_agenti = DbUtils.getListMapKV(Db.getConn(), "select id, nome from agenti");            tab_agenti_alternativi.getColumn("Agente").setCellRenderer(new DefaultTableCellRenderer() {                @Override                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                    JLabel lab = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                    if (value instanceof KeyValuePair) {                        if (value != null && ((KeyValuePair) value).key != null) {                            System.out.println("map agenti get = [" + ((KeyValuePair) value).key + "]");                            //lab.setText(cu.toString(map_agenti.get(((KeyValuePair)value)).key));                        }                    } else {                        lab.setText(cu.toString(map_agenti.get(value)));                    }                    return lab;                }            });        } catch (Exception e) {            e.printStackTrace();        }        tab_agenti_alternativi.getColumn("Agente").setCellEditor(new DefaultCellEditor(combo_agenti) {            @Override            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                JComboBox combo_agenti = (JComboBox) super.getTableCellEditorComponent(table, value, isSelected, row, column);                //init                KeyValuePair kv = new KeyValuePair(null, "");                combo_agenti.removeAllItems();                SwingUtils.initJComboFromDb(combo_agenti, Db.getConn(), "select id, nome from agenti order by nome", "id", "nome", kv);                int count = combo_agenti.getItemCount();                for (int ic = count - 1; ic >= 0; ic--) {                    Integer idc = cu.toInteger(((KeyValuePair) combo_agenti.getItemAt(ic)).key);                    //cerco se Ã¨ giÃ  inserito nella jtable                    for (int it = 0; it < table.getRowCount(); it++) {                        if (it == row) {                            continue;                        }                        Object ot = table.getValueAt(it, column);                        Integer idt = null;                        if (ot != null && ot instanceof KeyValuePair && ((KeyValuePair) ot).key != null) {                            idt = cu.toInteger(((KeyValuePair) ot).key);                        } else {                            idt = cu.toInteger(ot);                        }                        if (idc != null && idt != null && idc.equals(idt)) {                            combo_agenti.removeItemAt(ic);                            break;                        }                    }                }                if (value == null) {                    return combo_agenti;                }                for (int ic = 0; ic < combo_agenti.getItemCount(); ic++) {                    if (combo_agenti.getItemAt(ic) instanceof KeyValuePair) {                        kv = (KeyValuePair) combo_agenti.getItemAt(ic);                        if (kv != null && kv.getKey() != null && kv.getKey().equals(value)) {                            combo_agenti.setSelectedIndex(ic);                            break;                        }                    }                }                return combo_agenti;            }        });//        tab_agenti_alternativi.getColumn("Agente").setCellEditor(new TableCellEditorKeyValue(panel_agente));//        tab_agenti_alternativi.getColumn("Agente").setCellRenderer(new TableCellRendererKeyValue(tab_agenti_alternativi, panel_agente));//        final JComboBox combo_agenti = new JComboBox();//        KeyValuePair kv = new KeyValuePair(null, "");//        SwingUtils.initJComboFromDb(combo_agenti, Db.getConn(), "select id, nome from agenti order by nome", "id", "nome", kv);//        combo_agenti.setBorder(BorderFactory.createEmptyBorder());//        EditorUtils.ComboEditor editor_agenti = new EditorUtils.ComboEditor(combo_agenti);//        DefaultCellEditor editor_agenti = new DefaultCellEditor(combo_agenti);//        tab_agenti_alternativi.getColumn("Agente").setCellEditor(editor_agenti);//        DefaultTableCellRenderer renderer_agenti = new DefaultTableCellRenderer() {////            @Override//            public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1) {//                for (int ic = 0; i < combo_agenti.getItemCount(); ic++) {//                    if (combo_agenti.getItemAt(ic) instanceof KeyValuePair) {//                        KeyValuePair kv = (KeyValuePair)combo_agenti.getItemAt(ic);//                        if (kv.getKey().equals(o)) {//                            combo_agenti.setSelectedIndex(ic);//                            break;//                        }//                    }//                }//                return combo_agenti;//            }//            //        };        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_indirizzo", false)) {            menColAggIndirizzo.setSelected(true);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_agente", false)) {            menColAggAgente.setSelected(true);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_nazione", false)) {            menColAggNazione.setSelected(true);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_contatto_principale", false)) {            menColAggContattoPrincipale.setSelected(true);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_cat", false)) {            menColAggCat.setSelected(true);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_listino", false)) {            menColAggListino.setSelected(true);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_note", false)) {            menColAggNote.setSelected(true);        }                controlli = new Component[]{texCodi, comTipo, texRagiSoci, texCodiFisc, texIndi, texCap, texLoca, texProv, comList, texPiva, texWeb, texEmai};        InvoicexUtil.fireEvent(this, InvoicexEvent.TYPE_FRMCLIE_CONSTR_POST_INIT_COMPS);//        final it.tnx.SwingWorker worker = new it.tnx.SwingWorker() {////            public Object construct() {        texGiornoPagamento.setEnabled(false);        //istanzio classse per riempire campi secondari banche        frmClie_tnxIntePanel tnxIntePanel = new frmClie_tnxIntePanel();        tnxIntePanel.labBancAbi = labBancAbi;        tnxIntePanel.labBancCab = labBancCab;        tnxIntePanel.texBancAbi = texBancAbi;        tnxIntePanel.texBancCab = texBancCab;        dati.riempiCampiSecondari = tnxIntePanel;        if (main.getPersonalContain("consegna_e_scarico")) {            dati.aggiungiDbPanelCollegato(dbpanel_consegna_e_scarico);        } else {            dbpanel_consegna_e_scarico.setVisible(false);        }        //apro la combo pagamenti        comPaga.setPrototypeDisplayValue("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");        comPaga.dbOpenList(Db.getConn(), "select codice, codice from pagamenti order by codice", null, false);        //altre combo        comList.setPrototypeDisplayValue("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");        comList.dbOpenList(Db.getConn(), "select descrizione, codice from tipi_listino order by descrizione", null, false);        comPaese.setPrototypeDisplayValue("nome paese nome paese nome paese");        comPaese.dbOpenList(Db.getConn(), "select nome, codice1 from stati order by nome", null, false);        comAgente.setPrototypeDisplayValue("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");        comAgente.dbOpenList(Db.getConn(), "select nome, id from agenti order by nome", null, false);        comTipoCausaleTrasporto.dbOpenList(Db.getConn(), "select nome, id from tipi_causali_trasporto order by nome", null, false);        comTipoConsegna.dbOpenList(Db.getConn(), "select nome, id from tipi_consegna order by nome", null, false);        comConsegna.dbOpenList(Db.getConn(), "select nome, id from tipi_consegna order by nome", null, false);        comScarico.dbOpenList(Db.getConn(), "select nome, id from tipi_scarico order by nome", null, false);        comTipo.dbAddElement("Cliente", "C");        comTipo.dbAddElement("Fornitore", "F");        comTipo.dbAddElement("Cliente/Fornitore", "E");        comTipo.dbAddElement("Provvisorio", "P");        AutoCompletionEditable.enable(comTipo);        comTipo2.dbOpenList(Db.getConn(), "select descrizione, id from tipi_clie_forn order by descrizione", null, false);        //associo il panel ai dati        dati.dbNomeTabella = "clie_forn";        Vector chiave = new Vector();        chiave.add("codice");        dati.dbChiave = chiave;        dati.butSave = butSave;        dati.butUndo = butUndo;        dati.butFind = butFind;        dati.butDele = butDele;        dati.butNew = butNew;        dati.butDuplica = butDuplica;        dati.tipo_permesso = it.tnx.accessoUtenti.Permesso.PERMESSO_ANAGRAFICA_CLIENTI;        dati.messaggio_nuovo_manuale = true;        dati.aggiungiDbPanelCollegato(datiAnagrafici);        dati.aggiungiDbPanelCollegato(dati_indirizzo);        dati.aggiungiDbPanelCollegato(dati_contatti);        dati.aggiungiDbPanelCollegato(dati_contabili);        dati.aggiungiDbPanelCollegato(dati_fattura_pa);        dati.aggiungiDbPanelCollegato(dati_note_opzioni);        comIvaStandard.setPrototypeDisplayValue("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");        comIvaStandard.dbAddElement("");        comIvaStandard.dbOpenList(Db.getConn(), "SELECT descrizione, codice FROM codici_iva");        dati.addCampoAggiuntivo(note_generiche);        dati.addCampoAggiuntivo(note_fatt);        dati.addCampoAggiuntivo(note_ddt);        dati.addCampoAggiuntivo(note_ordi);        dati.addCampoAggiuntivo(note_prev);        dati.addCampoAggiuntivo(note_acq_fatt);        dati.addCampoAggiuntivo(note_acq_ddt);        dati.addCampoAggiuntivo(note_acq_ordi);        dati.addCampoAggiuntivo(note_acq_prev);        dati.dbOpen(Db.getConn(), "select * from clie_forn order by ragione_sociale limit 1");//        dati.dbRefresh();        // Controlli aggiuntivi su pulsanti per aggiungere documenti        try {            if (!main.utente.getPermesso(Permesso.PERMESSO_FATTURE_VENDITA, Permesso.PERMESSO_TIPO_SCRITTURA)) {                addFatt.setEnabled(false);            }            if (!main.utente.getPermesso(Permesso.PERMESSO_DDT_VENDITA, Permesso.PERMESSO_TIPO_SCRITTURA)) {                addDdt.setEnabled(false);            }            if (!main.utente.getPermesso(Permesso.PERMESSO_ORDINI_VENDITA, Permesso.PERMESSO_TIPO_SCRITTURA)) {                addOrd.setEnabled(false);            }        } catch (Exception e) {            e.printStackTrace();        }        //apro la griglia        //this.griglia.dbEditabile = true;        griglia.dbChiave = chiave;        griglia.flagUsaThread = false;        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();        colsWidthPerc.put("codice", new Double(10));        colsWidthPerc.put("ragione_sociale", new Double(30));        colsWidthPerc.put("telefono", new Double(13));        //colsWidthPerc.put("fax", new Double(13));        colsWidthPerc.put("email", new Double(10));        //colsWidthPerc.put("web", new Double(10));        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_indirizzo", false)) {            colsWidthPerc.put("indirizzo", new Double(15));            colsWidthPerc.put("cap", new Double(5));            colsWidthPerc.put("localita", new Double(10));            colsWidthPerc.put("provincia", new Double(3));        } else {            colsWidthPerc.put("indirizzo", 0d);            colsWidthPerc.put("cap", 0d);            colsWidthPerc.put("localita", 0d);            colsWidthPerc.put("provincia", 0d);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_agente", false)) {            colsWidthPerc.put("agente", 10d);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_nazione", false)) {            colsWidthPerc.put("nazione", 10d);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_contatto_principale", false)) {            colsWidthPerc.put("contatto principale", 10d);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_cat", false)) {            colsWidthPerc.put("categoria", 10d);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_listino", false)) {            colsWidthPerc.put("listino", 10d);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_note", false)) {            colsWidthPerc.put("note", 15d);        }        colsWidthPerc.put("cod fis", new Double(10));        colsWidthPerc.put("partita iva", new Double(10));        colsWidthPerc.put("pagamento", new Double(10));        griglia.columnsSizePerc = colsWidthPerc;        griglia.dbPanel = dati;        //ricarico filtri se salvati        try {            filters = InvoicexUtil.caricaFiltri(this.getClass().getName());            InvoicexUtil.aggiornaFiltri(panFiltri, filters, linkAggiungiFiltro, filtriActionModifica, filtriActionRimuovi);        } catch (Exception e) {            e.printStackTrace();        }        griglia_rapporti.flagUsaThread = false;        java.util.Hashtable colsWidthPercRapporti = new java.util.Hashtable();        colsWidthPercRapporti.put("id", new Double(0));        colsWidthPercRapporti.put("cliente", new Double(0));        colsWidthPercRapporti.put("data", new Double(20));        colsWidthPercRapporti.put("data avviso", new Double(20));        colsWidthPercRapporti.put("testo", new Double(60));        griglia_rapporti.columnsSizePerc = colsWidthPercRapporti;        griglia_rapporti.dbOpen(Db.getConn(), "select id, cliente, data, data_avviso as 'data avviso', testo from clie_forn_rapporti where cliente = '" + cu.toInteger(texCodi.getText()) + "'");        dbRefresh();        //sistemo alcune cose        //this.comTipo.addItem("CL");        //this.comTipo.addItem("FO");        //events        if (!main.getPersonalContain("adesivi")) {            tabCent.remove(3);        } else {            dati.dbForzaModificati();        }        if (main.iniPrezziCliente == true) {            dati.addDbListener(new DbListener() {                public void statusFired(DbEvent event) {                    if (event.getStatus() == dati.STATUS_REFRESHING || event.getStatus() == dati.STATUS_ADDING) {                        showPrezziCliente();                    } else if (event.getStatus() == dati.STATUS_SAVING) {                        savePrezziCliente();                    }                }            });        } else {            tabCent.remove(2);        }        dati.addDbListener(new DbListener() {            public void statusFired(DbEvent event) {                if ((event.getStatus() == dati.STATUS_REFRESHING && !dati.isSaving()) || event.getStatus() == dati.STATUS_ADDING) {                    azzera_controlli(controlli);                    setNewStato();                    caricaAgentiAlternativi();                    caricaContatti();                } else if (event.getStatus() == dati.STATUS_SAVING) {                    azzera_controlli(controlli);                }            }        });        dati.dbRefresh();        comPagaItemStateChanged(null);        isloading = false;        this.texNotaCliente.setVisible(false);        InvoicexUtil.msgNew(this, dati, new IFunction() {            public void run() {                butNewActionPerformed(null);            }        }, comTipo, "Nessun cliente presente, prosegui con l'inserimento");//                return null;//            }//        };////        worker.start();    }    public void addNew(GenericFrmTest frmPadre) {        butNewActionPerformed(null);        this.padre = frmPadre;        this.tabCent.setSelectedIndex(0);        chiudere_al_salvataggio = true;    }    public void edit(GenericFrmTest frmPadre, String clie_forn) {        this.padre = frmPadre;        this.tabCent.setSelectedIndex(0);        chiudere_al_salvataggio = true;        while (isloading) {            try {                Thread.sleep(100);            } catch (Exception e) {            }        }        trova(clie_forn);    }    private void azzera_controlli(Component[] component) {        for (Component c : component) {            if (c == comList) {                System.out.println("c = " + c);            }            c.setBackground(UIManager.getDefaults().getColor("TextField.background"));        }    }    public void openForm(int documento, final String codiceCliente) {        openForm(documento, codiceCliente, null);    }    public void openForm(int documento, final String codiceCliente, String tipo_documento_db) {        if (documento == DOC_ORDINE) {            frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_INSERIMENTO, "", 0, "P", 0, dbOrdine.TIPO_ORDINE, -1);            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            frm.texClie.setText(codiceCliente);            frm.texClie.aggiornaComboAbbinata();            frm.texCliente.setText(frm.comClie.getText() + " [" + codiceCliente + "]");            frm.selezionaCliente();        } else if (documento == DOC_DDT) {            frmTestDocu frm = new frmTestDocu(frmTestDocu.DB_INSERIMENTO, "", 0, "P", 0, -1);            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            frm.texClie.setText(codiceCliente);            frm.texClie.aggiornaComboAbbinata();            frm.texCliente.setText(frm.comClie.getText() + " [" + codiceCliente + "]");            frm.selezionaCliente();        } else if (documento == DOC_FATTURA) {            //controllo se sono aperti altri frmTestFatt            final frmTestFatt frm = new frmTestFatt();            int tipo_fattura = dbFattura.TIPO_FATTURA_IMMEDIATA;            if (tipo_documento_db != null) {                if (tipo_documento_db.equals(Db.TIPO_FATTURA_ACCOMPAGNATORIA)) {                    tipo_fattura = dbFattura.TIPO_FATTURA_ACCOMPAGNATORIA;                } else if (tipo_documento_db.equals(Db.TIPO_FATTURA_NOTA_DI_CREDITO)) {                    tipo_fattura = dbFattura.TIPO_FATTURA_NOTA_DI_CREDITO;                }            }            frm.init(frmTestFatt.DB_INSERIMENTO, "", 0, "P", 0, tipo_fattura, -1);            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            try {                frm.eseguiDopo(new Runnable() {                    public void run() {                        try {                            frm.texClie.setText(codiceCliente);                            frm.texClie.aggiornaComboAbbinata();                            frm.texCliente.setText(frm.comClie.getText() + " [" + codiceCliente + "]");                            frm.selezionaCliente();                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                });            } catch (Throwable t) {                t.printStackTrace();            }        }    }    private boolean controlla(Component[] component) {        String msg = "";        //controllo esistenza altro cliente/fornitore        if (dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO)                && (texRagiSoci.getText().length() > 0 || texPiva.getText().length() > 0 || texCodiFisc.getText().length() > 0)) {            String sql = "select codice, ragione_sociale, piva_cfiscale, cfiscale from clie_forn where (";            String w = "";            if (texRagiSoci.getText().length() > 0) {                w += " ragione_sociale like " + Db.pc(texRagiSoci.getText(), Types.VARCHAR);            }            if (texPiva.getText().length() > 0) {                if (w.length() > 0) {                    w += " or ";                }                w += " piva_cfiscale like " + Db.pc(texPiva.getText(), Types.VARCHAR);            }            if (texCodiFisc.getText().length() > 0) {                if (w.length() > 0) {                    w += " or ";                }                w += " cfiscale like " + Db.pc(texCodiFisc.getText(), Types.VARCHAR);            }            sql += w + ") and IFNULL(obsoleto, '0') != '1' limit 1";            try {                List<Map> list = DbUtils.getListMap(Db.getConn(), sql);                if (list.size() > 0) {                    Map m = list.get(0);                    msg += "Sembra sia giÃ  presente questa anagrafica:\n";                    msg += "Codice: " + m.get("codice") + "\n";                    msg += "Rag. Soc.: " + m.get("ragione_sociale") + "\n";                    msg += "P. Iva: " + m.get("piva_cfiscale") + "\n";                    msg += "C. Fiscale: " + m.get("cfiscale") + "\n";                    msg += "\nSicuro di continuare con l' inserimento ?";                    if (!SwingUtils.showYesNoMessage(this, msg)) {                        return false;                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }        for (Component c : component) {            String campo = "";            if (c instanceof tnxTextField) {                tnxTextField t = (tnxTextField) c;                String s = t.getText();                if (s.length() == 0) {                    if (StringUtils.isNotEmpty(t.dbDescCampo)) {                        campo = t.dbDescCampo;                    } else {                        campo = t.dbNomeCampo;                    }                    msg += campo + "\n";                    t.setBackground(Color.RED.brighter());                } else {                    t.setBackground(UIManager.getDefaults().getColor("TextField.background"));                }            } else if (c instanceof tnxComboField) {                tnxComboField t = (tnxComboField) c;                String s = t.getText();                if (s.length() == 0) {                    if (StringUtils.isNotEmpty(t.dbDescCampo)) {                        campo = t.dbDescCampo;                    } else {                        campo = t.dbNomeCampo;                    }                    msg += campo + "\n";                    t.setBackground(Color.RED.brighter());                } else {                    t.setBackground(UIManager.getDefaults().getColor("TextField.background"));                }            }        }        //controllo piva e cfiscale        String altricontrolli = "";        if (texCodiFisc.getText().length() > 0 && texCodiFisc.getText().equalsIgnoreCase(texPiva.getText())) {            //partita iva e codice fiscale uguali        } else {            String ccf = JUtil.ControllaCF(texCodiFisc.getText());            if (ccf != null && ccf.length() > 0) {                altricontrolli += ccf + "\n";                texCodiFisc.setBackground(Color.YELLOW.brighter());            }        }        String cpiva = JUtil.ControllaPIVA(texPiva.getText());        if (cpiva != null && cpiva.length() > 0) {            altricontrolli += cpiva + "\n";            texPiva.setBackground(Color.YELLOW.brighter());        }        //listino        String sql = "select * from tipi_listino";        sql += " where codice = " + Db.pc(CastUtils.toString(comList.getSelectedKey()), java.sql.Types.VARCHAR);        ResultSet resu = Db.openResultSet(sql);        try {            if (resu.next() == false) {                altricontrolli += "Il listino non Ã¨ stato scelto oppure non esiste piÃ¹\n";                comList.setBackground(Color.YELLOW.brighter());            }        } catch (Exception err) {            err.printStackTrace();        }        //email e sito        if (texEmai.getText().length() > 0 && texEmai.getText().indexOf("@") <= 0) {            altricontrolli += "L' indirizzo email non Ã¨ valido\n";            texEmai.setBackground(Color.YELLOW.brighter());        }        if (texWeb.getText().length() > 0 && texWeb.getText().indexOf("www.") < 0) {            altricontrolli += "L' indirizzo web non sembra essere valido\n";            texWeb.setBackground(Color.YELLOW.brighter());        }        if (msg.length() > 0 || altricontrolli.length() > 0) {            if (msg.length() > 0) {                msg = msg.substring(0, msg.length() - 1);                msg = "I seguenti campi non sono riempiti:\n" + msg;            }            if (altricontrolli.length() > 0) {                if (msg.length() > 0) {                    msg += "\n\n";                }                msg += "I seguenti campi presentano delle anomalie:\n" + altricontrolli;            }            msg += "\n" + "Continuare ?";            if (SwingUtils.showYesNoMessage(this, msg)) {                return true;            }            return false;        } else {            return true;        }    }    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents    private void initComponents() {        java.awt.GridBagConstraints gridBagConstraints;        jPopupMenu1 = new javax.swing.JPopupMenu();        popMenuAdd = new javax.swing.JMenuItem();        popMenuDel = new javax.swing.JMenuItem();        popMenuMod = new javax.swing.JMenuItem();        pop = new javax.swing.JPopupMenu();        menColAgg = new javax.swing.JMenu();        menColAggIndirizzo = new javax.swing.JCheckBoxMenuItem();        menColAggAgente = new javax.swing.JCheckBoxMenuItem();        menColAggNazione = new javax.swing.JCheckBoxMenuItem();        menColAggContattoPrincipale = new javax.swing.JCheckBoxMenuItem();        menColAggCat = new javax.swing.JCheckBoxMenuItem();        menColAggListino = new javax.swing.JCheckBoxMenuItem();        menColAggNote = new javax.swing.JCheckBoxMenuItem();        popupContatti = new javax.swing.JPopupMenu();        popMenuContattiAdd = new javax.swing.JMenuItem();        popMenuContattiMod = new javax.swing.JMenuItem();        popMenuContattiDel = new javax.swing.JMenuItem();        panAlto = new javax.swing.JPanel();        jToolBar1 = new javax.swing.JToolBar();        butNew = new javax.swing.JButton();        jLabel1 = new javax.swing.JLabel();        butDele = new javax.swing.JButton();        jLabel13 = new javax.swing.JLabel();        butFind = new javax.swing.JButton();        jLabel14 = new javax.swing.JLabel();        butDuplica = new javax.swing.JButton();        jLabel131 = new javax.swing.JLabel();        butFirs = new javax.swing.JButton();        butPrev = new javax.swing.JButton();        butNext = new javax.swing.JButton();        butLast = new javax.swing.JButton();        jLabel15 = new javax.swing.JLabel();        butStampaElenco = new javax.swing.JButton();        butStampa = new javax.swing.JButton();        butStampaPrivacy = new javax.swing.JButton();        butStampaDestinazione = new javax.swing.JButton();        butImportExcel = new javax.swing.JButton();        jToolBar2 = new javax.swing.JToolBar();        comFiltro1 = new javax.swing.JComboBox();        jToolBar3 = new javax.swing.JToolBar();        jLabel3 = new javax.swing.JLabel();        texSearch = new javax.swing.JTextField();        jButton3 = new javax.swing.JButton();        jSeparator2 = new javax.swing.JToolBar.Separator();        addFatt = new javax.swing.JButton();        addFatt1 = new javax.swing.JButton();        addFatt2 = new javax.swing.JButton();        addOrd = new javax.swing.JButton();        addDdt = new javax.swing.JButton();        panFiltri = new javax.swing.JPanel();        linkAggiungiFiltro = new org.jdesktop.swingx.JXHyperlink();        tabCent = new javax.swing.JTabbedPane();        panDati = new javax.swing.JPanel();        jPanel4 = new javax.swing.JPanel();        jPanel6 = new javax.swing.JPanel();        datiAnagrafici = new tnxbeans.tnxDbPanel();        jLabel2211 = new javax.swing.JLabel();        texRagiSoci = new tnxbeans.tnxTextField();        jLabel2111 = new javax.swing.JLabel();        texCodi = new tnxbeans.tnxTextField();        chkObsoleto = new javax.swing.JCheckBox();        jLabel226 = new javax.swing.JLabel();        comTipo = new tnxbeans.tnxComboField();        jLabel227 = new javax.swing.JLabel();        comTipo2 = new tnxbeans.tnxComboField();        textObsoleto = new tnxbeans.tnxTextField();        texCodiList = new tnxbeans.tnxTextField();        texCodiList.setVisible(false);        jPanel5 = new javax.swing.JPanel();        panel_toggles = new javax.swing.JPanel();        toggle_indirizzo = new javax.swing.JToggleButton();        jSeparator5 = new javax.swing.JSeparator();        toggle_contatti = new javax.swing.JToggleButton();        jSeparator3 = new javax.swing.JSeparator();        toggle_contabili = new javax.swing.JToggleButton();        jSeparator4 = new javax.swing.JSeparator();        toggle_fatturapa = new javax.swing.JToggleButton();        jSeparator6 = new javax.swing.JSeparator();        toggle_note_opzioni = new javax.swing.JToggleButton();        jSeparator1 = new javax.swing.JSeparator();        scroll_dati = new javax.swing.JScrollPane();        dati = new MyPanel();        dati_indirizzo = new tnxbeans.tnxDbPanel();        jLabel25 = new javax.swing.JLabel();        texIndi = new tnxbeans.tnxTextField();        jLabel212 = new javax.swing.JLabel();        texCap = new tnxbeans.tnxTextField();        jLabel222 = new javax.swing.JLabel();        texLoca = new tnxbeans.tnxTextField();        jLabel232 = new javax.swing.JLabel();        texProv = new tnxbeans.tnxTextField();        jLabel23 = new javax.swing.JLabel();        comPaese = new tnxbeans.tnxComboField();        butDest = new javax.swing.JButton();        dati_contatti = new tnxbeans.tnxDbPanel();        jLabel21 = new javax.swing.JLabel();        texFax = new tnxbeans.tnxTextField();        jLabel231 = new javax.swing.JLabel();        texTele = new tnxbeans.tnxTextField();        jLabel234 = new javax.swing.JLabel();        texCell = new tnxbeans.tnxTextField();        jLabel223 = new javax.swing.JLabel();        texEmai = new tnxbeans.tnxTextField();        jLabel233 = new javax.swing.JLabel();        texWeb = new tnxbeans.tnxTextField();        jScrollPane2 = new javax.swing.JScrollPane();        tabContatti = new JTable() {    public boolean isCellEditable(int row, int col) {        return false;    }};;        jLabel235 = new javax.swing.JLabel();        butAddContatti = new javax.swing.JButton();        jLabel20 = new javax.swing.JLabel();        cheIncludiEmail = new tnxbeans.tnxCheckBox();        dati_contabili = new tnxbeans.tnxDbPanel();        jLabel224 = new javax.swing.JLabel();        comPaga = new tnxbeans.tnxComboField();        texGiornoPagamento = new tnxbeans.tnxTextField();        jLabel213 = new javax.swing.JLabel();        butBanca = new javax.swing.JButton();        jLabel215 = new javax.swing.JLabel();        texBancAbi = new tnxbeans.tnxTextField();        texBancCab = new tnxbeans.tnxTextField();        labBancCab = new javax.swing.JLabel();        labBancAbi = new javax.swing.JLabel();        texBancCc = new tnxbeans.tnxTextField();        jLabel216 = new javax.swing.JLabel();        jLabel218 = new javax.swing.JLabel();        texBancCc2 = new tnxbeans.tnxTextField();        jLabel7 = new javax.swing.JLabel();        comIvaStandard = new tnxbeans.tnxComboField();        labGiornoPagamento = new javax.swing.JLabel();        jLabel2 = new javax.swing.JLabel();        texPiva = new tnxbeans.tnxTextField();        jLabel26 = new javax.swing.JLabel();        texCodiFisc = new tnxbeans.tnxTextField();        jLabel219 = new javax.swing.JLabel();        texScon1 = new tnxbeans.tnxTextField();        texScon2 = new tnxbeans.tnxTextField();        texScon3 = new tnxbeans.tnxTextField();        jLabel217 = new javax.swing.JLabel();        texScon4 = new tnxbeans.tnxTextField();        texScon5 = new tnxbeans.tnxTextField();        jLabel22 = new javax.swing.JLabel();        comList = new tnxbeans.tnxComboField();        updateListini = new tnxbeans.tnxCheckBox();        jLabel225 = new javax.swing.JLabel();        comAgente = new tnxbeans.tnxComboField();        jLabel228 = new javax.swing.JLabel();        jLabel229 = new javax.swing.JLabel();        jLabel8 = new javax.swing.JLabel();        jLabel9 = new javax.swing.JLabel();        jLabel10 = new javax.swing.JLabel();        jLabel11 = new javax.swing.JLabel();        provPred = new tnxbeans.tnxTextField();        provPredForn = new tnxbeans.tnxTextField();        segna_posto_contabili_pre = new javax.swing.JLabel();        segna_posto_contabili_post = new javax.swing.JLabel();        segna_posto_contabili_post2 = new javax.swing.JLabel();        segna_posto_contabili_provvigioni1 = new javax.swing.JLabel();        scroll_agenti_alternativi = new javax.swing.JScrollPane();        tab_agenti_alternativi = new javax.swing.JTable();        lab_agenti_alternativi = new javax.swing.JLabel();        aggiungi_riga_agenti = new javax.swing.JButton();        dati_fattura_pa = new tnxbeans.tnxDbPanel();        jLabel27 = new javax.swing.JLabel();        texIndi1 = new tnxbeans.tnxTextField();        jLabel214 = new javax.swing.JLabel();        texCap1 = new tnxbeans.tnxTextField();        linkcodiceufficio = new org.jdesktop.swingx.JXHyperlink();        jLabel38 = new javax.swing.JLabel();        jLabel39 = new javax.swing.JLabel();        jLabel40 = new javax.swing.JLabel();        split_payment = new tnxbeans.tnxCheckBox();        jLabel41 = new javax.swing.JLabel();        dati_note_opzioni = new tnxbeans.tnxDbPanel();        jLabel241 = new javax.swing.JLabel();        raggruppa1 = new tnxbeans.tnxCheckBox();        raggruppa2 = new tnxbeans.tnxCheckBox();        jLabel4 = new javax.swing.JLabel();        texLogo = new tnxbeans.tnxTextField();        butLogo = new javax.swing.JButton();        tnxCheckBox1 = new tnxbeans.tnxCheckBox();        dbpanel_consegna_e_scarico = new tnxbeans.tnxDbPanel();        jLabel12 = new javax.swing.JLabel();        comConsegna = new tnxbeans.tnxComboField();        jLabel16 = new javax.swing.JLabel();        comScarico = new tnxbeans.tnxComboField();        jLabel242 = new javax.swing.JLabel();        note1 = new tnxbeans.tnxMemoField();        jTabbedPane1 = new javax.swing.JTabbedPane();        jPanel9 = new javax.swing.JPanel();        note_generiche = new tnxbeans.tnxMemoField();        jLabel17 = new javax.swing.JLabel();        jPanel7 = new javax.swing.JPanel();        jTabbedPane2 = new javax.swing.JTabbedPane();        jPanel10 = new javax.swing.JPanel();        note_fatt = new tnxbeans.tnxMemoField();        jPanel11 = new javax.swing.JPanel();        jButton1 = new javax.swing.JButton();        note_ddt = new tnxbeans.tnxMemoField();        note_ordi = new tnxbeans.tnxMemoField();        note_prev = new tnxbeans.tnxMemoField();        jLabel18 = new javax.swing.JLabel();        jPanel8 = new javax.swing.JPanel();        jTabbedPane3 = new javax.swing.JTabbedPane();        jPanel12 = new javax.swing.JPanel();        note_acq_fatt = new tnxbeans.tnxMemoField();        jPanel13 = new javax.swing.JPanel();        jButton2 = new javax.swing.JButton();        note_acq_ddt = new tnxbeans.tnxMemoField();        note_acq_ordi = new tnxbeans.tnxMemoField();        note_acq_prev = new tnxbeans.tnxMemoField();        jLabel19 = new javax.swing.JLabel();        jLabel24 = new javax.swing.JLabel();        jLabel28 = new javax.swing.JLabel();        comTipoCausaleTrasporto = new tnxbeans.tnxComboField();        comTipoConsegna = new tnxbeans.tnxComboField();        panElen = new javax.swing.JPanel();        jScrollPane1 = new javax.swing.JScrollPane();        griglia = new tnxbeans.tnxDbGrid();        panPrezzi = new javax.swing.JPanel();        jScrollPane3 = new javax.swing.JScrollPane();        tabPrezziCliente = new ClientiMyTable();        jPanel3 = new javax.swing.JPanel();        labIntePrezzi = new javax.swing.JLabel();        jPanel1 = new javax.swing.JPanel();        jLabel5 = new javax.swing.JLabel();        jScrollPane4 = new javax.swing.JScrollPane();        griglia_rapporti = new tnxbeans.tnxDbGrid();        jLabel6 = new javax.swing.JLabel();        btnDelRigt = new javax.swing.JButton();        btnAddRow = new javax.swing.JButton();        butModiRow = new javax.swing.JButton();        texAreaNoteCliente = new javax.swing.JScrollPane();        texTesto = new javax.swing.JTextArea();        texNotaCliente = new tnxbeans.tnxTextField();        jPanel2 = new javax.swing.JPanel();        butUndo = new javax.swing.JButton();        butSave = new javax.swing.JButton();        popMenuAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        popMenuAdd.setText("Nuovo Rapporto");        popMenuAdd.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuAddActionPerformed(evt);            }        });        jPopupMenu1.add(popMenuAdd);        popMenuDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-remove.png"))); // NOI18N        popMenuDel.setText("Elimina");        popMenuDel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuDelActionPerformed(evt);            }        });        jPopupMenu1.add(popMenuDel);        popMenuMod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        popMenuMod.setText("Modifica");        popMenuMod.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuModActionPerformed(evt);            }        });        jPopupMenu1.add(popMenuMod);        menColAgg.setText("Colonne Aggiuntive");        menColAggIndirizzo.setText("Indirizzo");        menColAggIndirizzo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggIndirizzoActionPerformed(evt);            }        });        menColAgg.add(menColAggIndirizzo);        menColAggAgente.setText("Agente");        menColAggAgente.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggAgenteActionPerformed(evt);            }        });        menColAgg.add(menColAggAgente);        menColAggNazione.setText("Nazione");        menColAggNazione.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggNazioneActionPerformed(evt);            }        });        menColAgg.add(menColAggNazione);        menColAggContattoPrincipale.setText("Contatto principale");        menColAggContattoPrincipale.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggContattoPrincipaleActionPerformed(evt);            }        });        menColAgg.add(menColAggContattoPrincipale);        menColAggCat.setText("Categoria");        menColAggCat.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggCatActionPerformed(evt);            }        });        menColAgg.add(menColAggCat);        menColAggListino.setText("Listino");        menColAggListino.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggListinoActionPerformed(evt);            }        });        menColAgg.add(menColAggListino);        menColAggNote.setText("Note");        menColAggNote.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggNoteActionPerformed(evt);            }        });        menColAgg.add(menColAggNote);        pop.add(menColAgg);        popMenuContattiAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Add User-16.png"))); // NOI18N        popMenuContattiAdd.setText("Nuovo");        popMenuContattiAdd.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuContattiAddActionPerformed(evt);            }        });        popupContatti.add(popMenuContattiAdd);        popMenuContattiMod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Edit-16.png"))); // NOI18N        popMenuContattiMod.setText("Modifica");        popMenuContattiMod.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuContattiModActionPerformed(evt);            }        });        popupContatti.add(popMenuContattiMod);        popMenuContattiDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Delete Sign-16.png"))); // NOI18N        popMenuContattiDel.setText("Elimina");        popMenuContattiDel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuContattiDelActionPerformed(evt);            }        });        popupContatti.add(popMenuContattiDel);        setClosable(true);        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);        setIconifiable(true);        setMaximizable(true);        setResizable(true);        setTitle("Clienti / Fornitori");        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameClosing(evt);            }            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {            }        });        panAlto.setLayout(new java.awt.GridBagLayout());        jToolBar1.setFloatable(false);        jToolBar1.setRollover(true);        butNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNew.setText("Nuovo");        butNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butNew.setMargin(new java.awt.Insets(2, 2, 2, 2));        butNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butNew.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNewActionPerformed(evt);            }        });        jToolBar1.add(butNew);        jLabel1.setText(" ");        jToolBar1.add(jLabel1);        butDele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        butDele.setText("Elimina");        butDele.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butDele.setMargin(new java.awt.Insets(2, 2, 2, 2));        butDele.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butDele.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDeleActionPerformed(evt);            }        });        jToolBar1.add(butDele);        jLabel13.setText(" ");        jToolBar1.add(jLabel13);        butFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N        butFind.setText("Trova");        butFind.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butFind.setMargin(new java.awt.Insets(2, 2, 2, 2));        butFind.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butFind.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butFindActionPerformed(evt);            }        });        jToolBar1.add(butFind);        jLabel14.setText(" ");        jToolBar1.add(jLabel14);        butDuplica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-copy.png"))); // NOI18N        butDuplica.setText("Duplica");        butDuplica.setFocusable(false);        butDuplica.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butDuplica.setMargin(new java.awt.Insets(2, 2, 2, 2));        butDuplica.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butDuplica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDuplicaActionPerformed(evt);            }        });        jToolBar1.add(butDuplica);        jLabel131.setText(" ");        jToolBar1.add(jLabel131);        butFirs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-first.png"))); // NOI18N        butFirs.setMargin(new java.awt.Insets(2, 2, 2, 2));        butFirs.setMaximumSize(new java.awt.Dimension(30, 42));        butFirs.setMinimumSize(new java.awt.Dimension(30, 42));        butFirs.setPreferredSize(new java.awt.Dimension(30, 42));        butFirs.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butFirsActionPerformed(evt);            }        });        jToolBar1.add(butFirs);        butPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-previous.png"))); // NOI18N        butPrev.setMargin(new java.awt.Insets(2, 2, 2, 2));        butPrev.setMaximumSize(new java.awt.Dimension(30, 42));        butPrev.setMinimumSize(new java.awt.Dimension(30, 42));        butPrev.setPreferredSize(new java.awt.Dimension(30, 42));        butPrev.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butPrevActionPerformed(evt);            }        });        jToolBar1.add(butPrev);        butNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-next.png"))); // NOI18N        butNext.setMargin(new java.awt.Insets(2, 2, 2, 2));        butNext.setMaximumSize(new java.awt.Dimension(30, 42));        butNext.setMinimumSize(new java.awt.Dimension(30, 42));        butNext.setPreferredSize(new java.awt.Dimension(30, 42));        butNext.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNextActionPerformed(evt);            }        });        jToolBar1.add(butNext);        butLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-last.png"))); // NOI18N        butLast.setMargin(new java.awt.Insets(2, 2, 2, 2));        butLast.setMaximumSize(new java.awt.Dimension(30, 42));        butLast.setMinimumSize(new java.awt.Dimension(30, 42));        butLast.setPreferredSize(new java.awt.Dimension(30, 42));        butLast.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butLastActionPerformed(evt);            }        });        jToolBar1.add(butLast);        jLabel15.setText(" ");        jToolBar1.add(jLabel15);        butStampaElenco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampaElenco.setText("Stampa elenco");        butStampaElenco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butStampaElenco.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampaElenco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butStampaElenco.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaElencoActionPerformed(evt);            }        });        jToolBar1.add(butStampaElenco);        butStampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampa.setText("Stampa");        butStampa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butStampa.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butStampa.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaActionPerformed(evt);            }        });        jToolBar1.add(butStampa);        butStampaPrivacy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampaPrivacy.setText("Privacy");        butStampaPrivacy.setFocusable(false);        butStampaPrivacy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butStampaPrivacy.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampaPrivacy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butStampaPrivacy.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaPrivacyActionPerformed(evt);            }        });        jToolBar1.add(butStampaPrivacy);        butStampaDestinazione.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampaDestinazione.setText("Destinazione");        butStampaDestinazione.setFocusable(false);        butStampaDestinazione.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butStampaDestinazione.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampaDestinazione.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butStampaDestinazione.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaDestinazioneActionPerformed(evt);            }        });        jToolBar1.add(butStampaDestinazione);        butImportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-jump.png"))); // NOI18N        butImportExcel.setText("Import da Excel");        butImportExcel.setFocusable(false);        butImportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butImportExcel.setMargin(new java.awt.Insets(2, 2, 2, 2));        butImportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butImportExcel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butImportExcelActionPerformed(evt);            }        });        jToolBar1.add(butImportExcel);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 1;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(jToolBar1, gridBagConstraints);        jToolBar2.setFloatable(false);        comFiltro1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Visualizza Tutti", "Visualizza Clienti e Fornitori", "Visualizza Clienti", "Visualizza Fornitori", "Visualizza Provvisori" }));        comFiltro1.setMaximumSize(new java.awt.Dimension(400, 40));        comFiltro1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comFiltro1ActionPerformed(evt);            }        });        jToolBar2.add(comFiltro1);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 2;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(jToolBar2, gridBagConstraints);        jToolBar3.setFloatable(false);        jToolBar3.setRollover(true);        jLabel3.setText(" Cerca ");        jToolBar3.add(jLabel3);        texSearch.setColumns(20);        texSearch.setToolTipText("Filtra elenco per ragione sociale");        texSearch.setMaximumSize(new java.awt.Dimension(200, 20));        texSearch.setMinimumSize(new java.awt.Dimension(100, 20));        texSearch.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texSearchKeyPressed(evt);            }            public void keyReleased(java.awt.event.KeyEvent evt) {                texSearchKeyReleased(evt);            }        });        jToolBar3.add(texSearch);        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N        jButton3.setText("Mostra Tutti");        jButton3.setBorderPainted(false);        jButton3.setFocusable(false);        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        jButton3.setMaximumSize(new java.awt.Dimension(110, 20));        jButton3.setPreferredSize(new java.awt.Dimension(110, 20));        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        jButton3.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                jButton3ActionPerformed(evt);            }        });        jToolBar3.add(jButton3);        jToolBar3.add(jSeparator2);        addFatt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addFatt.setText("Fattura");        addFatt.setToolTipText("di Vendita");        addFatt.setBorderPainted(false);        addFatt.setFocusable(false);        addFatt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addFatt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addFatt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addFattActionPerformed(evt);            }        });        jToolBar3.add(addFatt);        addFatt1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addFatt1.setText("Fattura accompagnatoria");        addFatt1.setToolTipText("di Vendita");        addFatt1.setBorderPainted(false);        addFatt1.setFocusable(false);        addFatt1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addFatt1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addFatt1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addFatt1ActionPerformed(evt);            }        });        jToolBar3.add(addFatt1);        addFatt2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addFatt2.setText("Nota di credito");        addFatt2.setToolTipText("di Vendita");        addFatt2.setBorderPainted(false);        addFatt2.setFocusable(false);        addFatt2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addFatt2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addFatt2.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addFatt2ActionPerformed(evt);            }        });        jToolBar3.add(addFatt2);        addOrd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addOrd.setText("Ordine");        addOrd.setToolTipText("di Vendita");        addOrd.setBorderPainted(false);        addOrd.setFocusable(false);        addOrd.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addOrd.setMaximumSize(new java.awt.Dimension(130, 20));        addOrd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addOrd.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addOrdActionPerformed(evt);            }        });        jToolBar3.add(addOrd);        addDdt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addDdt.setText("DDT");        addDdt.setToolTipText("di Vendita");        addDdt.setBorderPainted(false);        addDdt.setFocusable(false);        addDdt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addDdt.setMaximumSize(new java.awt.Dimension(110, 20));        addDdt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addDdt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addDdtActionPerformed(evt);            }        });        jToolBar3.add(addDdt);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 3;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(jToolBar3, gridBagConstraints);        linkAggiungiFiltro.setText("aggiungi filtro");        linkAggiungiFiltro.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                linkAggiungiFiltroActionPerformed(evt);            }        });        panFiltri.add(linkAggiungiFiltro);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 4;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(panFiltri, gridBagConstraints);        getContentPane().add(panAlto, java.awt.BorderLayout.NORTH);        tabCent.setName("dati"); // NOI18N        tabCent.addChangeListener(new javax.swing.event.ChangeListener() {            public void stateChanged(javax.swing.event.ChangeEvent evt) {                tabCentStateChanged(evt);            }        });        panDati.setName("dati"); // NOI18N        panDati.setLayout(new java.awt.BorderLayout());        jPanel4.setLayout(new java.awt.BorderLayout());        jPanel6.setLayout(new java.awt.BorderLayout());        datiAnagrafici.setBorder(javax.swing.BorderFactory.createTitledBorder("Anagrafica"));        jLabel2211.setFont(jLabel2211.getFont().deriveFont(jLabel2211.getFont().getStyle() | java.awt.Font.BOLD, jLabel2211.getFont().getSize()+1));        jLabel2211.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2211.setText("Ragione sociale");        texRagiSoci.setDbDescCampo("Ragione Sociale");        texRagiSoci.setDbNomeCampo("ragione_sociale");        texRagiSoci.setFont(texRagiSoci.getFont().deriveFont(texRagiSoci.getFont().getStyle() | java.awt.Font.BOLD, texRagiSoci.getFont().getSize()+1));        texRagiSoci.setName("ragione_sociale"); // NOI18N        jLabel2111.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2111.setText("Codice");        texCodi.setColumns(10);        texCodi.setDbDescCampo("Codice");        texCodi.setDbNomeCampo("codice");        chkObsoleto.setText("Obsoleto ?");        chkObsoleto.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);        chkObsoleto.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                chkObsoletoActionPerformed(evt);            }        });        jLabel226.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel226.setText("Tipo");        comTipo.setDbDescCampo("Tipo");        comTipo.setDbNomeCampo("tipo");        comTipo.setDbNullSeVuoto(true);        comTipo.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                comTipoItemStateChanged(evt);            }        });        jLabel227.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel227.setText("Categoria");        jLabel227.setToolTipText("Categoria");        comTipo2.setDbDescCampo("Categoria");        comTipo2.setDbNomeCampo("tipo2");        comTipo2.setDbNullSeVuoto(true);        comTipo2.setDbTrovaMentreScrive(true);        textObsoleto.setBackground(new java.awt.Color(255, 204, 204));        textObsoleto.setDbNomeCampo("obsoleto");        texCodiList.setBackground(new java.awt.Color(255, 204, 204));        texCodiList.setDbComboAbbinata(comList);        texCodiList.setDbNomeCampo("codice_listino");        org.jdesktop.layout.GroupLayout datiAnagraficiLayout = new org.jdesktop.layout.GroupLayout(datiAnagrafici);        datiAnagrafici.setLayout(datiAnagraficiLayout);        datiAnagraficiLayout.setHorizontalGroup(            datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiAnagraficiLayout.createSequentialGroup()                .addContainerGap()                .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(datiAnagraficiLayout.createSequentialGroup()                        .add(jLabel2211)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texRagiSoci, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                    .add(datiAnagraficiLayout.createSequentialGroup()                        .add(jLabel2111)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texCodi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(18, 18, 18)                        .add(jLabel226)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(18, 18, 18)                        .add(jLabel227)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comTipo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(textObsoleto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texCodiList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 114, Short.MAX_VALUE)                        .add(chkObsoleto)))                .addContainerGap())        );        datiAnagraficiLayout.setVerticalGroup(            datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, datiAnagraficiLayout.createSequentialGroup()                .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(jLabel2111)                        .add(texCodi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(jLabel226)                        .add(comTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(jLabel227)                        .add(comTipo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(textObsoleto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(texCodiList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(chkObsoleto))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel2211)                    .add(texRagiSoci, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(2, 2, 2))        );        jPanel6.add(datiAnagrafici, java.awt.BorderLayout.CENTER);        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);        jPanel5.setLayout(new java.awt.BorderLayout());        panel_toggles.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 2));        toggle_indirizzo.setText("Indirizzo");        toggle_indirizzo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_indirizzoActionPerformed(evt);            }        });        panel_toggles.add(toggle_indirizzo);        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator5.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator5);        toggle_contatti.setText("Contatti");        toggle_contatti.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_contattiActionPerformed(evt);            }        });        panel_toggles.add(toggle_contatti);        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator3.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator3);        toggle_contabili.setText("Contabili");        toggle_contabili.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_contabiliActionPerformed(evt);            }        });        panel_toggles.add(toggle_contabili);        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator4.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator4);        toggle_fatturapa.setText("Fattura PA");        toggle_fatturapa.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_fatturapaActionPerformed(evt);            }        });        panel_toggles.add(toggle_fatturapa);        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator6.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator6);        toggle_note_opzioni.setText("Note e Opzioni");        toggle_note_opzioni.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_note_opzioniActionPerformed(evt);            }        });        panel_toggles.add(toggle_note_opzioni);        jPanel5.add(panel_toggles, java.awt.BorderLayout.CENTER);        jPanel5.add(jSeparator1, java.awt.BorderLayout.SOUTH);        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);        panDati.add(jPanel4, java.awt.BorderLayout.NORTH);        scroll_dati.setBorder(null);        dati.setName("dati"); // NOI18N        dati_indirizzo.setBorder(javax.swing.BorderFactory.createTitledBorder("Indirizzo"));        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel25.setText("Via / Piazza / LocalitÃ ");        texIndi.setDbDescCampo("Indirizzo");        texIndi.setDbNomeCampo("indirizzo");        jLabel212.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel212.setText("CAP");        texCap.setColumns(7);        texCap.setDbDescCampo("CAP");        texCap.setDbNomeCampo("cap");        texCap.setDbTipoCampo("");        jLabel222.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel222.setText("Comune");        texLoca.setDbDescCampo("LocalitÃ ");        texLoca.setDbNomeCampo("localita");        jLabel232.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel232.setText("Provincia");        texProv.setColumns(3);        texProv.setDbDescCampo("Provincia");        texProv.setDbNomeCampo("provincia");        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel23.setText("Paese");        comPaese.setDbNomeCampo("paese");        comPaese.setDbNullSeVuoto(true);        comPaese.setDbTipoCampo("");        comPaese.setDbTrovaMentreScrive(true);        butDest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        butDest.setText("Gestione altre destinazioni");        butDest.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDestActionPerformed(evt);            }        });        org.jdesktop.layout.GroupLayout dati_indirizzoLayout = new org.jdesktop.layout.GroupLayout(dati_indirizzo);        dati_indirizzo.setLayout(dati_indirizzoLayout);        dati_indirizzoLayout.setHorizontalGroup(            dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_indirizzoLayout.createSequentialGroup()                .addContainerGap()                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_indirizzoLayout.createSequentialGroup()                        .add(jLabel23)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comPaese, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(butDest)                        .addContainerGap())                    .add(dati_indirizzoLayout.createSequentialGroup()                        .add(jLabel222)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texLoca, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(18, 18, 18)                        .add(jLabel232)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texProv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addContainerGap())                    .add(dati_indirizzoLayout.createSequentialGroup()                        .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_indirizzoLayout.createSequentialGroup()                                .add(jLabel212)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texCap, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(0, 0, Short.MAX_VALUE))                            .add(dati_indirizzoLayout.createSequentialGroup()                                .add(jLabel25)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texIndi, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                        .add(10, 10, 10))))        );        dati_indirizzoLayout.linkSize(new java.awt.Component[] {jLabel212, jLabel222, jLabel23, jLabel25}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_indirizzoLayout.setVerticalGroup(            dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_indirizzoLayout.createSequentialGroup()                .add(2, 2, 2)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel25)                    .add(texIndi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(texCap, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel212))                .add(6, 6, 6)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel222)                    .add(texLoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel232)                    .add(texProv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel23)                    .add(comPaese, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(butDest))                .add(2, 2, 2))        );        dati_contatti.setBorder(javax.swing.BorderFactory.createTitledBorder("Contatti"));        dati_contatti.setMaximumSize(new java.awt.Dimension(1000, 1000));        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel21.setText("Fax");        texFax.setColumns(20);        texFax.setDbNomeCampo("fax");        jLabel231.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel231.setText("Telefono");        texTele.setColumns(20);        texTele.setDbNomeCampo("telefono");        jLabel234.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel234.setText("Cellulare");        texCell.setColumns(20);        texCell.setDbNomeCampo("cellulare");        jLabel223.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel223.setText("Email");        texEmai.setColumns(30);        texEmai.setDbDescCampo("Email");        texEmai.setDbNomeCampo("email");        jLabel233.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel233.setText("Sito Web");        texWeb.setColumns(30);        texWeb.setDbDescCampo("Sito Web");        texWeb.setDbNomeCampo("web");        tabContatti.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {            },            new String [] {                "Tipo", "Nome", "Tel", "Email", "Invia"            }        ));        tabContatti.setToolTipText("Doppio click per modificare");        tabContatti.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                tabContattiMouseClicked(evt);            }            public void mousePressed(java.awt.event.MouseEvent evt) {                tabContattiMousePressed(evt);            }            public void mouseReleased(java.awt.event.MouseEvent evt) {                tabContattiMouseReleased(evt);            }        });        jScrollPane2.setViewportView(tabContatti);        jLabel235.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel235.setText("Persone di riferimento");        butAddContatti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Add User-16.png"))); // NOI18N        butAddContatti.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butAddContattiActionPerformed(evt);            }        });        jLabel20.setText("Azienda");        cheIncludiEmail.setText("Includi nell'invio email");        cheIncludiEmail.setToolTipText("L'indirizzo non verrÃ  incluso fra i destinatari dell'invio email.");        cheIncludiEmail.setDbDescCampo("Includi in invio email");        cheIncludiEmail.setDbNomeCampo("includi_invio_email");        cheIncludiEmail.setDbTipoCampo("");        cheIncludiEmail.setMaximumSize(new java.awt.Dimension(230, 25));        org.jdesktop.layout.GroupLayout dati_contattiLayout = new org.jdesktop.layout.GroupLayout(dati_contatti);        dati_contatti.setLayout(dati_contattiLayout);        dati_contattiLayout.setHorizontalGroup(            dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_contattiLayout.createSequentialGroup()                .addContainerGap()                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)                    .add(dati_contattiLayout.createSequentialGroup()                        .add(jLabel234)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(texCell, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dati_contattiLayout.createSequentialGroup()                        .add(jLabel21)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(texFax, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dati_contattiLayout.createSequentialGroup()                        .add(jLabel231)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(jLabel20)                            .add(texTele, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_contattiLayout.createSequentialGroup()                        .add(jLabel223)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(cheIncludiEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(texEmai, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_contattiLayout.createSequentialGroup()                        .add(jLabel233)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(texWeb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(jScrollPane2)                    .add(dati_contattiLayout.createSequentialGroup()                        .add(jLabel235)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(butAddContatti)                        .add(0, 0, Short.MAX_VALUE)))                .addContainerGap())        );        dati_contattiLayout.linkSize(new java.awt.Component[] {jLabel21, jLabel223, jLabel231, jLabel233, jLabel234}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contattiLayout.linkSize(new java.awt.Component[] {texCell, texEmai, texFax, texTele, texWeb}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contattiLayout.setVerticalGroup(            dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_contattiLayout.createSequentialGroup()                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(butAddContatti)                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel235)                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel20))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)                    .add(dati_contattiLayout.createSequentialGroup()                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(texTele, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel231))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(texFax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel21))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(texCell, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel234))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel223)                            .add(texEmai, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(cheIncludiEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(5, 5, 5)                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel233)                            .add(texWeb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        dati_contattiLayout.linkSize(new java.awt.Component[] {butAddContatti, jLabel235}, org.jdesktop.layout.GroupLayout.VERTICAL);        dati_contabili.setBorder(javax.swing.BorderFactory.createTitledBorder("Contabili"));        dati_contabili.setMaximumSize(new java.awt.Dimension(1000, 1000));        jLabel224.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel224.setText("Pagamento predefinito");        comPaga.setDbNomeCampo("pagamento");        comPaga.setDbNullSeVuoto(true);        comPaga.setName("pagamento"); // NOI18N        comPaga.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                comPagaItemStateChanged(evt);            }        });        texGiornoPagamento.setColumns(4);        texGiornoPagamento.setDbNomeCampo("giorno_pagamento");        texGiornoPagamento.setDbTipoCampo("numerico");        jLabel213.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel213.setText("ABI");        butBanca.setText("...");        butBanca.setToolTipText("Seleziona dalla lista delle banche/filiali");        butBanca.setMargin(new java.awt.Insets(2, 4, 2, 4));        butBanca.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butBancaActionPerformed(evt);            }        });        jLabel215.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel215.setText("CAB");        texBancAbi.setColumns(6);        texBancAbi.setDbNomeCampo("banca_abi");        texBancAbi.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texBancAbiFocusLost(evt);            }        });        texBancCab.setColumns(6);        texBancCab.setDbNomeCampo("banca_cab");        texBancCab.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texBancCabFocusLost(evt);            }        });        labBancCab.setFont(labBancCab.getFont());        labBancCab.setForeground(new java.awt.Color(109, 109, 109));        labBancCab.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        labBancCab.setText("..");        labBancAbi.setFont(labBancAbi.getFont());        labBancAbi.setForeground(new java.awt.Color(109, 109, 109));        labBancAbi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        labBancAbi.setText("..");        texBancCc.setColumns(20);        texBancCc.setDbNomeCampo("banca_cc");        jLabel216.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel216.setText("Numero Conto");        jLabel218.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel218.setText("IBAN");        texBancCc2.setColumns(30);        texBancCc2.setDbNomeCampo("banca_cc_iban");        texBancCc2.setmaxChars(27);        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel7.setText("IVA Standard");        comIvaStandard.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));        comIvaStandard.setDbNomeCampo("iva_standard");        comIvaStandard.setDbNullSeVuoto(true);        comIvaStandard.setDbTipoCampo("CHAR");        comIvaStandard.setDbTrovaMentreScrive(true);        labGiornoPagamento.setFont(labGiornoPagamento.getFont().deriveFont(labGiornoPagamento.getFont().getSize()-1f));        labGiornoPagamento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        labGiornoPagamento.setText("giorno");        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2.setText("Partita IVA");        texPiva.setColumns(20);        texPiva.setDbDescCampo("Partita IVA");        texPiva.setDbNomeCampo("piva_cfiscale");        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel26.setText("Codice Fiscale");        texCodiFisc.setColumns(20);        texCodiFisc.setDbDescCampo("Codice Fiscale");        texCodiFisc.setDbNomeCampo("cfiscale");        jLabel219.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel219.setText("di testata");        texScon1.setColumns(6);        texScon1.setText("sconto1");        texScon1.setToolTipText("primo sconto");        texScon1.setDbDefault("vuoto");        texScon1.setDbDescCampo("");        texScon1.setDbNomeCampo("sconto1t");        texScon1.setDbNullSeVuoto(true);        texScon1.setDbTipoCampo("numerico");        texScon2.setColumns(6);        texScon2.setText("sconto2");        texScon2.setToolTipText("secondo sconto");        texScon2.setDbDefault("vuoto");        texScon2.setDbDescCampo("");        texScon2.setDbNomeCampo("sconto2t");        texScon2.setDbNullSeVuoto(true);        texScon2.setDbTipoCampo("numerico");        texScon3.setColumns(6);        texScon3.setText("sconto3");        texScon3.setToolTipText("terzo sconto");        texScon3.setDbDefault("vuoto");        texScon3.setDbDescCampo("");        texScon3.setDbNomeCampo("sconto3t");        texScon3.setDbNullSeVuoto(true);        texScon3.setDbTipoCampo("numerico");        jLabel217.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel217.setText("di riga");        texScon4.setColumns(6);        texScon4.setText("sconto1");        texScon4.setToolTipText("primo sconto");        texScon4.setDbDefault("vuoto");        texScon4.setDbDescCampo("");        texScon4.setDbNomeCampo("sconto1r");        texScon4.setDbNullSeVuoto(true);        texScon4.setDbTipoCampo("numerico");        texScon5.setColumns(6);        texScon5.setText("sconto2");        texScon5.setToolTipText("secondo sconto");        texScon5.setDbDefault("vuoto");        texScon5.setDbDescCampo("");        texScon5.setDbNomeCampo("sconto2r");        texScon5.setDbNullSeVuoto(true);        texScon5.setDbTipoCampo("numerico");        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel22.setText("Listino prezzi");        comList.setDbDescCampo("Listino assegnato");        comList.setDbNomeCampo("codice_listino");        comList.setDbNullSeVuoto(true);        comList.setDbRiempire(false);        comList.setDbSalvare(false);        comList.setDbTextAbbinato(texCodiList);        comList.setDbTipoCampo("VARCHAR");        comList.setDbTrovaMentreScrive(true);        comList.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comListActionPerformed(evt);            }        });        updateListini.setText("Aggiorna prezzi listini");        updateListini.setToolTipText("Seleziona se vuoi che il listino clienti venga aggiornato all'inserimento dei prezzi");        updateListini.setDbDescCampo("Aggiorna listino prezzi");        updateListini.setDbNomeCampo("flag_update_listino");        updateListini.setDbTipoCampo("");        updateListini.setFont(updateListini.getFont().deriveFont(updateListini.getFont().getSize()-1f));        updateListini.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);        updateListini.setIconTextGap(2);        updateListini.setMaximumSize(new java.awt.Dimension(230, 25));        updateListini.setVerticalAlignment(javax.swing.SwingConstants.TOP);        updateListini.setVerticalTextPosition(javax.swing.SwingConstants.TOP);        jLabel225.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel225.setText("Agente predefinito");        comAgente.setDbDescCampo("");        comAgente.setDbNomeCampo("agente");        comAgente.setDbNullSeVuoto(true);        comAgente.setDbTipoCampo("numerico");        comAgente.setDbTrovaMentreScrive(true);        jLabel228.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel228.setText("Coordinate bancarie predefinite");        jLabel229.setFont(jLabel229.getFont());        jLabel229.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel229.setText("Sconti predefiniti");        jLabel8.setText("Provvigione predefinita");        jLabel8.setToolTipText("<html>\nLa provvigiona inserita verrÃ  proposta appena selezionato il Cliente nella creazione di un nuovo documento<br>\n(questa ha prioritÃ  rispetto alla provvigione specificata nell'Agente)\n</html>");        jLabel9.setText("%");        jLabel10.setText("Provvigione predefinita per articoli da questo fornitore");        jLabel10.setToolTipText("<html>\nLa provvigione inserita verrÃ  proposta in inserimento articoli se l'articolo viene abitualmente acquistato da questo fornitore, vedi in anagrafica Articolo.<br>\n(questa provvigione ha prioritÃ  rispetto alla provvigione specificata nell'Agente e/o sul Cliente)\n</html>");        jLabel11.setText("%");        provPred.setColumns(5);        provPred.setDbNomeCampo("provvigione_predefinita_cliente");        provPred.setDbNullSeVuoto(true);        provPred.setDbTipoCampo("numerico");        provPred.setmaxChars(5);        provPredForn.setColumns(5);        provPredForn.setDbNomeCampo("provvigione_predefinita_fornitore");        provPredForn.setDbNullSeVuoto(true);        provPredForn.setDbTipoCampo("numerico");        provPredForn.setmaxChars(5);        segna_posto_contabili_pre.setToolTipText("");        segna_posto_contabili_post.setPreferredSize(new java.awt.Dimension(2, 2));        segna_posto_contabili_post2.setPreferredSize(new java.awt.Dimension(2, 2));        segna_posto_contabili_provvigioni1.setText(" ");        tab_agenti_alternativi.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null},                {null, null},                {null, null},                {null, null},                {null, null},                {null, null},                {null, null},                {null, null},                {null, null},                {null, null}            },            new String [] {                "Agente", "Provvigione"            }        ) {            Class[] types = new Class [] {                java.lang.Object.class, java.lang.Double.class            };            public Class getColumnClass(int columnIndex) {                return types [columnIndex];            }        });        tab_agenti_alternativi.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusGained(java.awt.event.FocusEvent evt) {                tab_agenti_alternativiFocusGained(evt);            }        });        scroll_agenti_alternativi.setViewportView(tab_agenti_alternativi);        if (tab_agenti_alternativi.getColumnModel().getColumnCount() > 0) {            tab_agenti_alternativi.getColumnModel().getColumn(0).setPreferredWidth(150);            tab_agenti_alternativi.getColumnModel().getColumn(1).setPreferredWidth(50);        }        lab_agenti_alternativi.setText("Agenti alternativi");        aggiungi_riga_agenti.setText("aggiungi riga");        aggiungi_riga_agenti.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                aggiungi_riga_agentiActionPerformed(evt);            }        });        org.jdesktop.layout.GroupLayout dati_contabiliLayout = new org.jdesktop.layout.GroupLayout(dati_contabili);        dati_contabili.setLayout(dati_contabiliLayout);        dati_contabiliLayout.setHorizontalGroup(            dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_contabiliLayout.createSequentialGroup()                .addContainerGap()                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel2)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texPiva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(18, 18, 18)                                .add(jLabel26)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texCodiFisc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel224)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comPaga, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(18, 18, 18)                                .add(labGiornoPagamento)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texGiornoPagamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel228)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(butBanca))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel22)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(19, 19, 19)                                .add(updateListini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(segna_posto_contabili_post, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel7)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comIvaStandard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel229)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel217)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel219)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))                        .add(56, 56, 56))                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(10, 10, 10)                                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel215)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancCab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(labBancCab))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel216)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancCc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel218)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancCc2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel213)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancAbi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(labBancAbi))))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel225)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comAgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(18, 18, 18)                                .add(jLabel8)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(provPred, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(jLabel9))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel10)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(provPredForn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(jLabel11)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(segna_posto_contabili_provvigioni1)))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(lab_agenti_alternativi)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 67, Short.MAX_VALUE)                                .add(aggiungi_riga_agenti))                            .add(scroll_agenti_alternativi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(segna_posto_contabili_pre)                            .add(segna_posto_contabili_post2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .add(0, 0, Short.MAX_VALUE))))        );        dati_contabiliLayout.linkSize(new java.awt.Component[] {jLabel213, jLabel215, jLabel216, jLabel218}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contabiliLayout.linkSize(new java.awt.Component[] {jLabel2, jLabel22, jLabel224}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contabiliLayout.linkSize(new java.awt.Component[] {jLabel217, jLabel219}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contabiliLayout.setVerticalGroup(            dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_contabiliLayout.createSequentialGroup()                .add(segna_posto_contabili_pre)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel2)                    .add(texPiva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel26)                    .add(texCodiFisc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(2, 2, 2)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel22)                            .add(comList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(updateListini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel224)                    .add(comPaga, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(labGiornoPagamento)                    .add(texGiornoPagamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(8, 8, 8)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel228)                    .add(butBanca))                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(2, 2, 2)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel213)                            .add(texBancAbi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(labBancAbi))                        .add(2, 2, 2)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel215)                            .add(texBancCab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(labBancCab))                        .add(2, 2, 2)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(texBancCc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel216))                        .add(2, 2, 2)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel218)                            .add(texBancCc2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel7)                            .add(comIvaStandard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                            .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                                .add(jLabel229)                                .add(jLabel219)                                .add(texScon1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                                .add(texScon3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(texScon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel217)                            .add(texScon4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(texScon5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel225)                            .add(comAgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(jLabel8)                            .add(jLabel9)                            .add(provPred, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel10)                            .add(jLabel11)                            .add(provPredForn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(segna_posto_contabili_provvigioni1)))                    .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_contabiliLayout.createSequentialGroup()                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(lab_agenti_alternativi)                            .add(aggiungi_riga_agenti))                        .add(1, 1, 1)                        .add(scroll_agenti_alternativi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(segna_posto_contabili_post, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(segna_posto_contabili_post2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addContainerGap(42, Short.MAX_VALUE))        );        dati_fattura_pa.setBorder(javax.swing.BorderFactory.createTitledBorder("Fattura PA"));        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel27.setText("Codice Ufficio");        texIndi1.setDbDescCampo("Codice Ufficio PA");        texIndi1.setDbNomeCampo("xmlpa_codice_ufficio");        jLabel214.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel214.setText("Riferimento amministrazione");        texCap1.setColumns(20);        texCap1.setDbDescCampo("Riferimento amministrazione");        texCap1.setDbNomeCampo("xmlpa_riferimento");        texCap1.setDbTipoCampo("");        linkcodiceufficio.setText("info");        linkcodiceufficio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);        linkcodiceufficio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        linkcodiceufficio.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                linkcodiceufficioActionPerformed(evt);            }        });        jLabel38.setFont(jLabel38.getFont().deriveFont(jLabel38.getFont().getSize()-1f));        jLabel38.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));        jLabel38.setText("Il codice verrÃ  riportato in fase di export nella finestra di creazione file xml");        jLabel39.setFont(jLabel39.getFont().deriveFont(jLabel39.getFont().getSize()-1f));        jLabel39.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));        jLabel40.setFont(jLabel40.getFont().deriveFont(jLabel40.getFont().getSize()-1f));        jLabel40.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));        jLabel40.setText("codice identificativo del cedente / prestatore ai fini amministrativo-contabili ");        split_payment.setText("Split payment");        split_payment.setDbNomeCampo("split_payment");        jLabel41.setFont(jLabel41.getFont().deriveFont(jLabel41.getFont().getSize()-1f));        jLabel41.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));        jLabel41.setText("art. 1, comma 629, lett. b) della L. n. 190/2014 (Legge di StabilitÃ  2015)");        org.jdesktop.layout.GroupLayout dati_fattura_paLayout = new org.jdesktop.layout.GroupLayout(dati_fattura_pa);        dati_fattura_pa.setLayout(dati_fattura_paLayout);        dati_fattura_paLayout.setHorizontalGroup(            dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_fattura_paLayout.createSequentialGroup()                .addContainerGap()                .add(dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_fattura_paLayout.createSequentialGroup()                        .add(jLabel214)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texCap1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(jLabel39)                            .add(jLabel40)))                    .add(dati_fattura_paLayout.createSequentialGroup()                        .add(jLabel27)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texIndi1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(linkcodiceufficio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(jLabel38))                    .add(dati_fattura_paLayout.createSequentialGroup()                        .add(split_payment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(18, 18, 18)                        .add(jLabel41)))                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        dati_fattura_paLayout.setVerticalGroup(            dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_fattura_paLayout.createSequentialGroup()                .add(2, 2, 2)                .add(dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel27)                    .add(texIndi1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(linkcodiceufficio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel38))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(texCap1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel214)                    .add(jLabel39)                    .add(jLabel40))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_fattura_paLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(split_payment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel41))                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        dati_note_opzioni.setBorder(javax.swing.BorderFactory.createTitledBorder("Note e Opzioni"));        dati_note_opzioni.setMaximumSize(new java.awt.Dimension(1000, 1000));        dati_note_opzioni.setName("dati_note_opzioni"); // NOI18N        jLabel241.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel241.setText("Note");        raggruppa1.setText("Raggruppa DDT ");        raggruppa1.setToolTipText("In questo modo quando si converte piÃ¹ DDT in fattura verranno raggruppati secondo il codice articolo e sommate le quantita");        raggruppa1.setDbDescCampo("Raggruppa DDT");        raggruppa1.setDbNomeCampo("opzione_raggruppa_ddt");        raggruppa1.setDbTipoCampo("");        raggruppa1.setMaximumSize(new java.awt.Dimension(230, 25));        raggruppa2.setText("Stampa prezzi in DDT");        raggruppa2.setToolTipText("Seleziona se stampare o meno i prezzi nei DDT");        raggruppa2.setDbDescCampo("Stampa prezzi in DDT");        raggruppa2.setDbNomeCampo("opzione_prezzi_ddt");        raggruppa2.setDbTipoCampo("");        raggruppa2.setMaximumSize(new java.awt.Dimension(230, 25));        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel4.setText("Logo");        texLogo.setDbNomeCampo("logo");        butLogo.setText("...");        butLogo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butLogo.setMargin(new java.awt.Insets(2, 4, 2, 4));        butLogo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butLogoActionPerformed(evt);            }        });        tnxCheckBox1.setText("Stampa Destinazione diversa su Distinta Riba");        tnxCheckBox1.setToolTipText("Selezionando questa opzione stampa la Destinazione diversa nella Distinta delle RIBA");        tnxCheckBox1.setDbDescCampo("Opzione Dest. Diversa Riba");        tnxCheckBox1.setDbNomeCampo("opzione_riba_dest_diversa");        tnxCheckBox1.setDbTipoCampo("");        tnxCheckBox1.setMaximumSize(new java.awt.Dimension(230, 25));        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel12.setText("ModalitÃ  di consegna");        comConsegna.setDbDescCampo("ModalitÃ  di consegna");        comConsegna.setDbNomeCampo("modalita_consegna");        comConsegna.setDbNullSeVuoto(true);        comConsegna.setDbTipoCampo("");        comConsegna.setDbTrovaMentreScrive(true);        comConsegna.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comConsegnaActionPerformed(evt);            }        });        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel16.setText("ModalitÃ  di scarico");        comScarico.setDbDescCampo("ModalitÃ  di scarico");        comScarico.setDbNomeCampo("modalita_scarico");        comScarico.setDbNullSeVuoto(true);        comScarico.setDbTipoCampo("");        comScarico.setDbTrovaMentreScrive(true);        comScarico.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comScaricoActionPerformed(evt);            }        });        jLabel242.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel242.setText("Note consegna");        note1.setDbNomeCampo("note_consegna");        org.jdesktop.layout.GroupLayout dbpanel_consegna_e_scaricoLayout = new org.jdesktop.layout.GroupLayout(dbpanel_consegna_e_scarico);        dbpanel_consegna_e_scarico.setLayout(dbpanel_consegna_e_scaricoLayout);        dbpanel_consegna_e_scaricoLayout.setHorizontalGroup(            dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                .addContainerGap()                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)                        .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                            .add(jLabel12)                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                            .add(comConsegna, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                        .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                            .add(jLabel16)                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                            .add(comScarico, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                    .add(org.jdesktop.layout.GroupLayout.TRAILING, dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                        .add(jLabel242)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(note1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))        );        dbpanel_consegna_e_scaricoLayout.linkSize(new java.awt.Component[] {jLabel12, jLabel16}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dbpanel_consegna_e_scaricoLayout.setVerticalGroup(            dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel12)                    .add(comConsegna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(4, 4, 4)                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(comScarico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel16))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(note1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel242))                .addContainerGap())        );        jTabbedPane1.setMinimumSize(new java.awt.Dimension(344, 200));        jPanel9.setLayout(new java.awt.BorderLayout());        note_generiche.setDbNomeCampo("note");        jPanel9.add(note_generiche, java.awt.BorderLayout.CENTER);        jLabel17.setFont(jLabel17.getFont().deriveFont((jLabel17.getFont().getStyle() | java.awt.Font.ITALIC)));        jLabel17.setText("Queste note non verranno riportate sui documenti");        jLabel17.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));        jPanel9.add(jLabel17, java.awt.BorderLayout.PAGE_START);        jTabbedPane1.addTab("Note generiche", jPanel9);        jPanel7.setLayout(new java.awt.BorderLayout());        jPanel10.setLayout(new java.awt.BorderLayout());        note_fatt.setDbNomeCampo("note_fatt");        jPanel10.add(note_fatt, java.awt.BorderLayout.CENTER);        jButton1.setText("Copia su altri");        jButton1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                jButton1ActionPerformed(evt);            }        });        jPanel11.add(jButton1);        jPanel10.add(jPanel11, java.awt.BorderLayout.EAST);        jTabbedPane2.addTab("Fatture", null, jPanel10, "");        note_ddt.setDbNomeCampo("note_docu");        jTabbedPane2.addTab("DDT", note_ddt);        note_ordi.setDbNomeCampo("note_ordi");        jTabbedPane2.addTab("Ordini", note_ordi);        note_prev.setDbNomeCampo("note_prev");        jTabbedPane2.addTab("Preventivi", note_prev);        jPanel7.add(jTabbedPane2, java.awt.BorderLayout.CENTER);        jLabel18.setFont(jLabel18.getFont().deriveFont((jLabel18.getFont().getStyle() | java.awt.Font.ITALIC)));        jLabel18.setText("Queste note verranno automaticamente riportate sui nuovi documenti");        jLabel18.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));        jPanel7.add(jLabel18, java.awt.BorderLayout.PAGE_START);        jTabbedPane1.addTab("Documenti di vendita", jPanel7);        jPanel8.setLayout(new java.awt.BorderLayout());        jPanel12.setLayout(new java.awt.BorderLayout());        note_acq_fatt.setDbNomeCampo("note_fatt_acq");        jPanel12.add(note_acq_fatt, java.awt.BorderLayout.CENTER);        jButton2.setText("Copia su altri");        jButton2.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                jButton2ActionPerformed(evt);            }        });        jPanel13.add(jButton2);        jPanel12.add(jPanel13, java.awt.BorderLayout.EAST);        jTabbedPane3.addTab("Fatture", jPanel12);        note_acq_ddt.setDbNomeCampo("note_docu_acq");        jTabbedPane3.addTab("DDT", note_acq_ddt);        note_acq_ordi.setDbNomeCampo("note_ordi_acq");        jTabbedPane3.addTab("Ordini", note_acq_ordi);        note_acq_prev.setDbNomeCampo("note_prev_acq");        jTabbedPane3.addTab("Preventivi", note_acq_prev);        jPanel8.add(jTabbedPane3, java.awt.BorderLayout.CENTER);        jLabel19.setFont(jLabel19.getFont().deriveFont((jLabel19.getFont().getStyle() | java.awt.Font.ITALIC)));        jLabel19.setText("Queste note verranno automaticamente riportate sui nuovi documenti");        jLabel19.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));        jPanel8.add(jLabel19, java.awt.BorderLayout.PAGE_START);        jTabbedPane1.addTab("Documenti di acquisto", jPanel8);        jLabel24.setText("Causale trasporto");        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel28.setText("Tipo consegna");        comTipoCausaleTrasporto.setDbNomeCampo("tipo_causale_trasporto");        comTipoConsegna.setDbNomeCampo("tipo_consegna");        org.jdesktop.layout.GroupLayout dati_note_opzioniLayout = new org.jdesktop.layout.GroupLayout(dati_note_opzioni);        dati_note_opzioni.setLayout(dati_note_opzioniLayout);        dati_note_opzioniLayout.setHorizontalGroup(            dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_note_opzioniLayout.createSequentialGroup()                .addContainerGap()                .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(jLabel241)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_note_opzioniLayout.createSequentialGroup()                                .add(jLabel4)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texLogo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(0, 0, 0)                                .add(butLogo))                            .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(raggruppa1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(raggruppa2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(dati_note_opzioniLayout.createSequentialGroup()                                .add(jLabel24)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comTipoCausaleTrasporto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_note_opzioniLayout.createSequentialGroup()                                .add(jLabel28)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comTipoConsegna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dbpanel_consegna_e_scarico, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                .addContainerGap())        );        dati_note_opzioniLayout.linkSize(new java.awt.Component[] {jLabel241, jLabel4}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_note_opzioniLayout.linkSize(new java.awt.Component[] {jLabel24, jLabel28}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_note_opzioniLayout.setVerticalGroup(            dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_note_opzioniLayout.createSequentialGroup()                .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(2, 2, 2)                        .add(jLabel241))                    .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel4)                            .add(texLogo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(butLogo))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(raggruppa1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(raggruppa2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel24)                            .add(comTipoCausaleTrasporto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel28)                            .add(comTipoConsegna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(dbpanel_consegna_e_scarico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addContainerGap(150, Short.MAX_VALUE))        );        dati_note_opzioniLayout.linkSize(new java.awt.Component[] {butLogo, texLogo}, org.jdesktop.layout.GroupLayout.VERTICAL);        jTabbedPane1.getAccessibleContext().setAccessibleName("Fatture");        org.jdesktop.layout.GroupLayout datiLayout = new org.jdesktop.layout.GroupLayout(dati);        dati.setLayout(datiLayout);        datiLayout.setHorizontalGroup(            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiLayout.createSequentialGroup()                .add(0, 0, 0)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioni, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_indirizzo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_contatti, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_contabili, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_fattura_pa, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                .add(0, 0, 0))        );        datiLayout.setVerticalGroup(            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiLayout.createSequentialGroup()                .add(0, 0, 0)                .add(dati_indirizzo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, 0)                .add(dati_contatti, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, 0)                .add(dati_contabili, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, 0)                .add(dati_fattura_pa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, 0)                .add(dati_note_opzioni, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, Short.MAX_VALUE))        );        dati_fattura_pa.getAccessibleContext().setAccessibleName("");        scroll_dati.setViewportView(dati);        panDati.add(scroll_dati, java.awt.BorderLayout.CENTER);        tabCent.addTab("dati", panDati);        panElen.setName("elenco"); // NOI18N        panElen.setLayout(new java.awt.BorderLayout());        griglia.addMouseListener(new java.awt.event.MouseAdapter() {            public void mousePressed(java.awt.event.MouseEvent evt) {                grigliaMousePressed(evt);            }            public void mouseReleased(java.awt.event.MouseEvent evt) {                grigliaMouseReleased(evt);            }        });        jScrollPane1.setViewportView(griglia);        panElen.add(jScrollPane1, java.awt.BorderLayout.CENTER);        tabCent.addTab("elenco", panElen);        panPrezzi.setToolTipText("");        panPrezzi.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusGained(java.awt.event.FocusEvent evt) {                panPrezziFocusGained(evt);            }        });        panPrezzi.setLayout(new java.awt.BorderLayout());        tabPrezziCliente.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N        tabPrezziCliente.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {            },            new String [] {                "Codice Articolo", "Descrizione", "Prezzo Base", "Prezzo Cliente"            }        ) {            Class[] types = new Class [] {                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class            };            boolean[] canEdit = new boolean [] {                false, false, false, true            };            public Class getColumnClass(int columnIndex) {                return types [columnIndex];            }            public boolean isCellEditable(int rowIndex, int columnIndex) {                return canEdit [columnIndex];            }        });        jScrollPane3.setViewportView(tabPrezziCliente);        panPrezzi.add(jScrollPane3, java.awt.BorderLayout.CENTER);        labIntePrezzi.setText("...");        jPanel3.add(labIntePrezzi);        panPrezzi.add(jPanel3, java.awt.BorderLayout.NORTH);        tabCent.addTab("Prezzi Articoli", panPrezzi);        jLabel5.setText("Note:");        griglia_rapporti.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                "Title 1", "Title 2", "Title 3", "Title 4"            }        ));        griglia_rapporti.setComponentPopupMenu(jPopupMenu1);        griglia_rapporti.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                griglia_rapportiMouseClicked(evt);            }        });        jScrollPane4.setViewportView(griglia_rapporti);        jLabel6.setText("Rapporti:");        btnDelRigt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-remove.png"))); // NOI18N        btnDelRigt.setText("Elimina");        btnDelRigt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnDelRigtActionPerformed(evt);            }        });        btnAddRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        btnAddRow.setText("Inserisci");        btnAddRow.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnAddRowActionPerformed(evt);            }        });        butModiRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        butModiRow.setText("Modifica");        butModiRow.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butModiRowActionPerformed(evt);            }        });        texTesto.setColumns(20);        texTesto.setRows(5);        texTesto.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyReleased(java.awt.event.KeyEvent evt) {                texTestoKeyReleased(evt);            }        });        texAreaNoteCliente.setViewportView(texTesto);        texNotaCliente.setDbNomeCampo("nota_cliente");        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);        jPanel1.setLayout(jPanel1Layout);        jPanel1Layout.setHorizontalGroup(            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()                .addContainerGap()                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()                        .add(jLabel6)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 107, Short.MAX_VALUE)                        .add(butModiRow)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(btnAddRow)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(btnDelRigt))                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()                        .add(jLabel5)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(texNotaCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(org.jdesktop.layout.GroupLayout.LEADING, texAreaNoteCliente)                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))                .add(445, 445, 445))        );        jPanel1Layout.linkSize(new java.awt.Component[] {btnAddRow, btnDelRigt, butModiRow}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        jPanel1Layout.setVerticalGroup(            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(jPanel1Layout.createSequentialGroup()                .addContainerGap()                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel5)                    .add(texNotaCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(texAreaNoteCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(jLabel6)                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(btnDelRigt)                        .add(btnAddRow)                        .add(butModiRow)))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)                .addContainerGap())        );        tabCent.addTab("Note & Rapporti", jPanel1);        getContentPane().add(tabCent, java.awt.BorderLayout.CENTER);        butUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Delete Sign-16.png"))); // NOI18N        butUndo.setText("Annulla");        butUndo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butUndoActionPerformed(evt);            }        });        jPanel2.add(butUndo);        butSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/res/Checkmark-16.png"))); // NOI18N        butSave.setText("Salva");        butSave.setName("salva"); // NOI18N        butSave.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butSaveActionPerformed(evt);            }        });        jPanel2.add(butSave);        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);        pack();    }// </editor-fold>//GEN-END:initComponents    private void comFiltro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comFiltro1ActionPerformed        dbRefresh();    }//GEN-LAST:event_comFiltro1ActionPerformed    private void comPagaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comPagaItemStateChanged        texGiornoPagamento.setEnabled(false);        try {            ResultSet r = Db.lookUp(String.valueOf(comPaga.getSelectedKey()), "codice", "pagamenti");            if (r != null) {                if (Db.nz(r.getString("flag_richiedi_giorno"), "N").equalsIgnoreCase("S")) {                    texGiornoPagamento.setEnabled(true);                }            }        } catch (Exception err) {            err.printStackTrace();        }    }//GEN-LAST:event_comPagaItemStateChanged    private void comListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comListActionPerformed    }//GEN-LAST:event_comListActionPerformed    private void tabCentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabCentStateChanged        if (tabCent.getSelectedIndex() == 2) {            this.showPrezziCliente();        }    }//GEN-LAST:event_tabCentStateChanged    private void panPrezziFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panPrezziFocusGained    }//GEN-LAST:event_panPrezziFocusGained    private void butStampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaActionPerformed//        it.tnx.PrintUtilities.printComponent(this.dati);        int h = getHeight();        setSize(getWidth(), h + (dati.getHeight() - scroll_dati.getHeight()));        Map colori = new HashMap();        List<Component> comps = SwingUtils.getAllComponents(panDati);        for (Component c : comps) {            colori.put(c, c.getBackground());            c.setBackground(Color.WHITE);        }        it.tnx.PrintUtilities.printComponent(panDati);        for (Component c : comps) {            c.setBackground((Color) colori.get(c));        }        setSize(getWidth(), h);    }//GEN-LAST:event_butStampaActionPerformed    private void butStampaElencoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaElencoActionPerformed        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));        String inte = "Elenco Clienti/Fornitori";        if (comFiltro1.getSelectedIndex() > 0) {            inte = "Elenco " + StringUtils.substringAfter(String.valueOf(comFiltro1.getSelectedItem()), "Visualizza ");        }        String nomeFilePdf = this.griglia.stampaTabella(inte, null);        Util.start(nomeFilePdf);        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butStampaElencoActionPerformed    private void texBancCabFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texBancCabFocusLost        trovaCab();    }//GEN-LAST:event_texBancCabFocusLost    private void texBancAbiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texBancAbiFocusLost        trovaAbi();    }//GEN-LAST:event_texBancAbiFocusLost    private void butBancaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBancaActionPerformed        CoordinateBancarie coords = new CoordinateBancarie();        coords.setField_texBancAbi(this.texBancAbi);        coords.setField_labBancAbi(this.labBancAbi);        coords.setField_texBancCab(this.texBancCab);        coords.setField_labBancCab(this.labBancCab);        frmListCoorBanc frm = new frmListCoorBanc(coords);        main.getPadre().openFrame(frm, 700, 500, 150, 50);    }//GEN-LAST:event_butBancaActionPerformed    private void butDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDestActionPerformed        try {            frmClieDest temp = new frmClieDest(new Integer(this.texCodi.getText()).intValue(), this.texRagiSoci.getText());            main.getPadre().openFrame(temp, 500, 650);        } catch (Exception e) {            SwingUtils.showErrorMessage(main.getPadre(), "Il codice cliente non Ã¨ valido");        }    }//GEN-LAST:event_butDestActionPerformed    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed        this.griglia.dbGoLast();    }//GEN-LAST:event_butLastActionPerformed    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed        this.griglia.dbGoNext();    }//GEN-LAST:event_butNextActionPerformed    private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed        this.griglia.dbGoPrevious();    }//GEN-LAST:event_butPrevActionPerformed    private void butFirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirsActionPerformed        this.griglia.dbGoFirst();    }//GEN-LAST:event_butFirsActionPerformed    public void updateObsoleto() {        try {            int value = Integer.parseInt(textObsoleto.getText());            if (value == 1) {                chkObsoleto.setSelected(true);            } else {                chkObsoleto.setSelected(false);            }        } catch (Exception e) {        }    }    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing        if (butSave.isEnabled()) {            if (SwingUtils.showYesNoMessage(this, "Sicuro di uscire senza salvare ?")) {                dispose();            }        } else {            dispose();        }    }//GEN-LAST:event_formInternalFrameClosing    private void butDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleActionPerformed        if (griglia.getSelectedRowCount() > 1) {            SwingUtils.showErrorMessage(this, "Non Ã¨ possibile eliminare piÃ¹ Clienti alla volta");            return;        }        //prima controllo se c'? ancora qualche fattura collegata        boolean clientePresente = false;        String id_clifor = texCodi.getText();        if (texCodi.getText().trim().length() > 0) {            String sql = "select cliente from test_fatt where cliente = " + Db.pc(this.texCodi.getText(), java.sql.Types.INTEGER);            ResultSet r = Db.openResultSet(sql);            try {                if (r.next()) {                    clientePresente = true;                    javax.swing.JOptionPane.showMessageDialog(this, "Il cliente non puo' essere eliminato perche' presente in una o piu' fatture", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);                } else {                    sql = "select cliente from test_ddt where cliente = " + Db.pc(this.texCodi.getText(), java.sql.Types.INTEGER);                    r = Db.openResultSet(sql);                    if (r.next()) {                        clientePresente = true;                        javax.swing.JOptionPane.showMessageDialog(this, "Il cliente non puo' essere eliminato perche' presente in uno o piu' ddt", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);                    }                }            } catch (Exception err) {                err.printStackTrace();            }        }        if (clientePresente == false) {            int ret = JOptionPane.showConfirmDialog(this, "Sicuro di eliminare ?", "Attenzione", JOptionPane.YES_NO_OPTION);            if (ret == JOptionPane.YES_OPTION) {                Storico.scrivi("elimina cliente/fornitore", texCodi.getText() + " " + texRagiSoci.getText());                String codiceListino = (String) dati.dbGetField("codice_listino");                InvoicexUtil.fireEvent(this, InvoicexEvent.TYPE_FRMCLIE_PRE_DELETE);                this.dati.dbDelete();                this.griglia.dbRefresh();                this.griglia.dbSelezionaRiga();                if (main.iniPrezziCliente == true) {                    if (codiceListino.startsWith("C")) {                        //elimino automaticamente il listino abbinato a questo cliente                        String sql = "delete from tipi_listino where codice = " + Db.pc(codiceListino, java.sql.Types.VARCHAR);                        Db.executeSql(sql);                        sql = "delete from articoli_prezzi where listino = " + Db.pc(codiceListino, java.sql.Types.VARCHAR);                        Db.executeSql(sql);                    }                }                //elimino contatti colelgati al cliente                try {                    dbu.tryExecQuery(Db.getConn(), "delete from clie_forn_contatti where id_clifor = " + dbu.sql(id_clifor));                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }//GEN-LAST:event_butDeleActionPerformed    private void butFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFindActionPerformed        boolean ret = this.griglia.dbFindNext();        if (ret == false) {            int ret2 = JOptionPane.showConfirmDialog(this, "Posizione non trovata\nVuoi riprovare dall'inizio ?", "Attenzione", JOptionPane.YES_NO_OPTION);            if (ret2 == JOptionPane.OK_OPTION) {                boolean ret3 = this.griglia.dbFindFirst();            }        }    }//GEN-LAST:event_butFindActionPerformed    private void butUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUndoActionPerformed        dati.dbUndo();        if (this.comboToRefresh != null || chiudere_al_salvataggio) {            this.dispose();        }    }//GEN-LAST:event_butUndoActionPerformed    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed        File ftest = new File(texLogo.getText());        if (texLogo.getText().length() > 0 && !ftest.exists()) {            SwingUtils.showWarningMessage(this, "Il file del logo non esiste!");        }        if (texLogo.getText().length() > 0 && ftest.length() > 1000000) {            SwingUtils.showWarningMessage(this, "Il file del logo Ã¨ troppo grande, deve essere massimo 1Mb");            return;        }        texLogo.setText(texLogo.getText().replace("\\", "\\\\"));        //controlli vari//        //controlli validitÃ //        if (texPiva.getText().length() != 11 && texPiva.getText().length() > 0) {//            if (!SwingUtils.showYesNoMessage(this, "La lunghezza della Partita IVA non Ã¨ rispettata (deve essere 11 caratteri), continuare ?")) {//                return;//            }//        }//        if ((texCodiFisc.getText().length() != 16 && texCodiFisc.getText().length() != 11) && texCodiFisc.getText().length() > 0) {//            if (!SwingUtils.showYesNoMessage(this, "La lunghezza del Codice Fiscale non Ã¨ rispettata (deve essere 16 o 11 caratteri), continuare ?")) {//                return;//            }//        }        if (!controlla(controlli)) {            return;        }        this.dati.dbSave();        //salvo agenti alternativi        salvaAgentiAlternativi();        salvaContatti();        //salvare i prezzi listino        this.griglia.dbRefresh();        if (this.comboToRefresh != null) {            this.comboToRefresh.dbRefreshItems();        }        if (this.comboToRefresh != null || chiudere_al_salvataggio) {            this.dispose();        }        main.events.fireInvoicexEvent(new InvoicexEvent(this, InvoicexEvent.TYPE_SAVE));        if (padre != null) {            padre.selezionaCliente(texCodi.getText());        } else if (chiudere_al_salvataggio) {            System.err.println("Non riesco a recuperare la form di provenienza (padre = null)");            Thread.dumpStack();            SwingUtils.showErrorMessage(this, "Non riesco a recuperare la form di provenienza (padre = null)");        }    }//GEN-LAST:event_butSaveActionPerformed    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed        this.dati.dbNew();        //azzero prov pred e prov pred forn        provPred.setText("");        provPredForn.setText("");        //azzero banca e filaile        this.labBancAbi.setText("");        this.labBancCab.setText("");        java.sql.Statement stat;        ResultSet resu;        //apre il resultset per ultimo +1        try {            stat = Db.getConn().createStatement();            String sql = "select codice from clie_forn order by codice desc limit 1";            resu = stat.executeQuery(sql);            if (resu.next() == true) {                this.texCodi.setText(String.valueOf(resu.getInt(1) + 1));            } else {                this.texCodi.setText("1");            }        } catch (Exception err) {            javax.swing.JOptionPane.showMessageDialog(null, err.toString());        }        this.comPaese.dbTrovaRiga("ITALY");        if (main.iniPrezziCliente == true) {            try {                if (this.texCodi.getText().trim().length() > 0) {                    Cliente c = new Cliente(Integer.parseInt(this.texCodi.getText()));                    String listinoCliente = c.getListinoCliente(true);                    this.comList.dbRefreshItems();                    this.comList.dbTrovaKey(listinoCliente);                    this.texCodiList.setText(listinoCliente);                }            } catch (Exception err) {                err.printStackTrace();            }        }        cheIncludiEmail.setSelected(true);        comTipo.requestFocusInWindow();    }//GEN-LAST:event_butNewActionPerformed    private void texSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSearchKeyPressed    }//GEN-LAST:event_texSearchKeyPressed    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed        texSearch.setText("");        dbRefresh();    }//GEN-LAST:event_jButton3ActionPerformed    private void addFattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFattActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_FATTURA, codCliente);    }//GEN-LAST:event_addFattActionPerformed    private void addOrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrdActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_ORDINE, codCliente);    }//GEN-LAST:event_addOrdActionPerformed    private void addDdtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDdtActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_DDT, codCliente);    }//GEN-LAST:event_addDdtActionPerformed    private void texSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSearchKeyReleased        delay_cliente.update();    }//GEN-LAST:event_texSearchKeyReleased    private void chkObsoletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkObsoletoActionPerformed        if (chkObsoleto.isSelected()) {            textObsoleto.setText(String.valueOf(1));        } else {            textObsoleto.setText(String.valueOf(0));        }    }//GEN-LAST:event_chkObsoletoActionPerformed    private void butLogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLogoActionPerformed        JFileChooser fileChoose = new JFileChooser();        FileFilter filter1 = new FileFilter() {            @Override            public boolean accept(File pathname) {                if (pathname.getAbsolutePath().endsWith(".jpg")                        || pathname.getAbsolutePath().endsWith(".jpeg")                        || pathname.getAbsolutePath().endsWith(".gif")                        || pathname.getAbsolutePath().endsWith(".bmp")                        || pathname.getAbsolutePath().endsWith(".png")                        || pathname.isDirectory()) {                    return true;                } else {                    return false;                }            }            @Override            public String getDescription() {                return "File Immagine (*.jpg, *.jpeg, *.gif, *.png, *.bmp)";            }        };        fileChoose.addChoosableFileFilter(filter1);        fileChoose.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);        ImagePreviewPanel preview = new ImagePreviewPanel();        fileChoose.setAccessory(preview);        fileChoose.addPropertyChangeListener(preview);        //        JFileChooser fileChoose = SwingUtils.getFileOpen(this);        //fileChoose.setCurrentDirectory(new java.io.File("c:\\"));        int ret = fileChoose.showOpenDialog(this);        if (ret == javax.swing.JFileChooser.APPROVE_OPTION) {            //apro il file            this.texLogo.setText(fileChoose.getSelectedFile().getAbsolutePath());            texLogo.setToolTipText(updateLogoPreview(texLogo.getText()));        }    }//GEN-LAST:event_butLogoActionPerformed    private void btnDelRigtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelRigtActionPerformed        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));        for (int sel : griglia_rapporti.getSelectedRows()) {            String id = String.valueOf(griglia_rapporti.getValueAt(sel, griglia_rapporti.getColumnByName("id")));            if (id.equals("null")) {                JOptionPane.showMessageDialog(this, "Seleziona almeno una riga da cancellare", "Selezione errata", JOptionPane.ERROR_MESSAGE);            } else {                Db.executeSql("DELETE FROM clie_forn_rapporti WHERE id = (" + id + ")");            }        }        griglia_rapporti.dbRefresh();        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_btnDelRigtActionPerformed    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed        int idCliente = Integer.parseInt(this.texCodi.getText());        frmInsertRapporto frm = new frmInsertRapporto(null, idCliente, texRagiSoci.getText(), "N", 0);        main.getPadre().openFrame(frm, 580, 360);    }//GEN-LAST:event_btnAddRowActionPerformed    private void butModiRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butModiRowActionPerformed        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));        for (int sel : griglia_rapporti.getSelectedRows()) {            String id = String.valueOf(griglia_rapporti.getValueAt(sel, griglia_rapporti.getColumnByName("id")));            if (id.equals("null")) {                JOptionPane.showMessageDialog(this, "Seleziona almeno una riga da cancellare", "Selezione errata", JOptionPane.ERROR_MESSAGE);            } else {                int idCliente = Integer.parseInt(this.texCodi.getText());                frmInsertRapporto frm = new frmInsertRapporto(null, idCliente, texRagiSoci.getText(), "M", Integer.valueOf(id));                main.getPadre().openFrame(frm, 530, 360);            }        }        griglia_rapporti.dbRefresh();        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butModiRowActionPerformed    private void texTestoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texTestoKeyReleased        this.texNotaCliente.setText(this.texTesto.getText());        this.butSave.setEnabled(true);        this.butUndo.setEnabled(true);    }//GEN-LAST:event_texTestoKeyReleased    private void popMenuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuAddActionPerformed        this.btnAddRowActionPerformed(null);    }//GEN-LAST:event_popMenuAddActionPerformed    private void popMenuDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuDelActionPerformed        this.btnDelRigtActionPerformed(null);    }//GEN-LAST:event_popMenuDelActionPerformed    private void popMenuModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuModActionPerformed        this.butModiRowActionPerformed(null);    }//GEN-LAST:event_popMenuModActionPerformed    private void griglia_rapportiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_griglia_rapportiMouseClicked        try {            if (evt.getClickCount() == 2) {                this.butModiRowActionPerformed(null);            } else {                //tasto destro                //if (e.getModifiers()==InputEvent.BUTTON3_MASK) popGrig.show(tabNomi,e.getX(),e.getY());            }        } catch (Exception err) {            javax.swing.JOptionPane.showMessageDialog(null, err.toString());            err.printStackTrace();        }    }//GEN-LAST:event_griglia_rapportiMouseClicked    private void butImportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butImportExcelActionPerformed        frmImportClientiExcel frm = new frmImportClientiExcel(this);        frm.pack();        main.getPadre().openFrame(frm, frm.getWidth(), frm.getHeight());}//GEN-LAST:event_butImportExcelActionPerformed    private void butDuplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDuplicaActionPerformed        if (griglia.getRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un Cliente o Fornitore prima!");            return;        }        String sql;        String sqlC = "";        String sqlV = "";        int newNumero = 0;        int idDuplicata = 0;        int numDup = griglia.getSelectedRows().length;        int res;        //chiedo conferma per eliminare il documento        if (numDup > 1) {            SwingUtils.showErrorMessage(this, "Puoi duplicare solo un Cliente/Fornitore alla volta");            return;        } else {            res = JOptionPane.OK_OPTION;        }        if (res == JOptionPane.OK_OPTION) {            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));            for (int sel : griglia.getSelectedRows()) {                int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(sel, griglia.getColumnByName("codice"))));//                //cerco ultimo numero ordine//                newNumero = 1;//                sqlC = "";//                sqlV = "";//                sql = "SELECT MAX(codice) as maxnum FROM clie_forn";//                try {//                    ResultSet tempUltimo = Db.openResultSet(sql);//                    if (tempUltimo.next() == true) {//                        newNumero = tempUltimo.getInt("maxnum") + 1;//                    }//                } catch (Exception err) {//                    err.printStackTrace();//                }                //    SwingUtils.showInfoMessage(this, "newnumero:" + newNumero);                //inserisco nuovo salvandomi i dati su hashtable                sql = "select * from clie_forn";                sql += " where codice = " + Db.pc(dbNumero, Types.VARCHAR);                try {                    System.out.println("listmap duplica:" + sql);                    List<Map> list = DbUtils.getListMap(Db.getConn(), sql);                    Map m = list.get(0);//                    m.put("codice", newNumero);                    m.remove("codice"); //adesso auto inc                    if (main.iniPrezziCliente == true) {                        try {                            Cliente c = new Cliente(newNumero);                            String listinoCliente = c.getListinoCliente(true);                            comList.dbRefreshItems();                            m.put("codice_listino", listinoCliente);                        } catch (Exception err) {                            err.printStackTrace();                        }                    }                    sql = "insert into clie_forn set ";                    sql += DbUtils.prepareSqlFromMap(m);                    System.out.println("duplica:" + sql);                    newNumero = Db.executeSqlRetIdDialogExc(Db.getConn(), sql, true, false);                    //copio i contatti                    try {                        List<Map> contatti = dbu.getListMap(Db.getConn(), "select * from clie_forn_contatti where id_clifor = " + dbu.sql(dbNumero));                        if (contatti != null && contatti.size() > 0) {                            for (Map contatto : contatti) {                                contatto.remove("id");                                contatto.put("id_clifor", newNumero);                                sql = "insert into clie_forn_contatti set " + dbu.prepareSqlFromMap(contatto);                                Db.executeSql(sql);                            }                        }                    } catch (Exception e) {                        SwingUtils.showExceptionMessage(this, e);                    }                    dbRefresh();                    //aprire il nuovo                    //cerco il dbId                    for (int row = 0; row < griglia.getRowCount(); row++) {                        if (CastUtils.toInteger0(griglia.getValueAt(row, griglia.getColumnByName("codice"))) == newNumero) {                            griglia.getSelectionModel().setSelectionInterval(row, row);                            griglia.scrollToRow(row);                            griglia.dbSelezionaRiga();                            SwingUtils.showInfoMessage(this, "Duplicato il Cliente/Fornitore " + dbNumero + " sul nuovo " + newNumero);                            break;                        }                    }                } catch (Exception err) {                    err.printStackTrace();                }            }            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));        }}//GEN-LAST:event_butDuplicaActionPerformed    private void toggle_contattiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_contattiActionPerformed        view(dati_contatti);    }//GEN-LAST:event_toggle_contattiActionPerformed    private void toggle_contabiliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_contabiliActionPerformed        view(dati_contabili);    }//GEN-LAST:event_toggle_contabiliActionPerformed    private void toggle_indirizzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_indirizzoActionPerformed        view(dati_indirizzo);    }//GEN-LAST:event_toggle_indirizzoActionPerformed    private void toggle_note_opzioniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_note_opzioniActionPerformed        view(dati_note_opzioni);    }//GEN-LAST:event_toggle_note_opzioniActionPerformed    private void comTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comTipoItemStateChanged        if (evt.getStateChange() == ItemEvent.SELECTED) {            controllaAgentePerTipoAnag();        }    }//GEN-LAST:event_comTipoItemStateChanged    private void comConsegnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comConsegnaActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_comConsegnaActionPerformed    private void comScaricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comScaricoActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_comScaricoActionPerformed    private void aggiungi_riga_agentiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungi_riga_agentiActionPerformed        ((DefaultTableModel) tab_agenti_alternativi.getModel()).addRow(new Object[tab_agenti_alternativi.getColumnCount()]);    }//GEN-LAST:event_aggiungi_riga_agentiActionPerformed    private void tab_agenti_alternativiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tab_agenti_alternativiFocusGained        dati.dbForzaModificati();    }//GEN-LAST:event_tab_agenti_alternativiFocusGained    private void butStampaPrivacyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaPrivacyActionPerformed        try {            PdfReader read = new PdfReader("reports/privacy.pdf");            FileOutputStream fout = new FileOutputStream("reports/privacy-out.pdf");            PdfStamper stamp = new PdfStamper(read, fout);            stamp.setFormFlattening(true);            Map m = stamp.getAcroFields().getFields();            System.out.println("m = " + m);            stamp.getAcroFields().setField("nome", texRagiSoci.getText());            stamp.getAcroFields().setField("indirizzo1", texIndi.getText());            stamp.getAcroFields().setField("indirizzo2", texCap.getText() + " - " + texLoca.getText() + " - " + texProv.getText());            stamp.getAcroFields().setField("partita_iva", texPiva.getText());            stamp.getAcroFields().setField("codice_fiscale", texCodiFisc.getText());            stamp.getAcroFields().setField("cell", texCell.getText());            stamp.getAcroFields().setField("tel", texTele.getText());            stamp.getAcroFields().setField("email", texEmai.getText());            stamp.close();            read.close();            fout.close();            SwingUtils.open(new File("reports/privacy-out.pdf"));        } catch (Exception e) {            e.printStackTrace();            SwingUtils.showExceptionMessage(this, e);        }    }//GEN-LAST:event_butStampaPrivacyActionPerformed    private void butStampaDestinazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaDestinazioneActionPerformed        try {            PdfReader read = new PdfReader("reports/destinatario.pdf");            FileOutputStream fout = new FileOutputStream("reports/destinatario-out.pdf");            PdfStamper stamp = new PdfStamper(read, fout);            stamp.setFormFlattening(true);            Map m = stamp.getAcroFields().getFields();            System.out.println("m = " + m);            stamp.getAcroFields().setField("nome", texRagiSoci.getText());            stamp.getAcroFields().setField("indirizzo1", texIndi.getText());            stamp.getAcroFields().setField("indirizzo2", texCap.getText() + " - " + texLoca.getText());            stamp.getAcroFields().setField("indirizzo3", texProv.getText());            stamp.getAcroFields().setField("cap_loc_prov", texCap.getText() + " - " + texLoca.getText() + " (" + texProv.getText() + ")");            Map mc = DbUtils.getListMap(Db.getConn(), "select * from clie_forn where codice = " + texCodi.getText()).get(0);            InvoicexUtil.altricampipdf(stamp, mc);            stamp.close();            read.close();            fout.close();            SwingUtils.open(new File("reports/destinatario-out.pdf"));        } catch (Exception e) {            e.printStackTrace();            SwingUtils.showExceptionMessage(this, e);        }    }//GEN-LAST:event_butStampaDestinazioneActionPerformed    private void menColAggIndirizzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggIndirizzoActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_indirizzo", menColAggIndirizzo.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_indirizzo", false)) {            colsWidthPerc.put("indirizzo", new Double(18));            colsWidthPerc.put("cap", new Double(7));            colsWidthPerc.put("localita", new Double(12));            colsWidthPerc.put("provincia", new Double(4));        } else {            colsWidthPerc.put("indirizzo", 0);            colsWidthPerc.put("cap", 0d);            colsWidthPerc.put("localita", 0d);            colsWidthPerc.put("provincia", 0d);        }        griglia.columnsSizePercOrig = null;        griglia.dbRefresh();    }//GEN-LAST:event_menColAggIndirizzoActionPerformed    private void grigliaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMousePressed        if (evt.isPopupTrigger()) {            System.out.println("popup");            pop.show(griglia, evt.getX(), evt.getY());        }    }//GEN-LAST:event_grigliaMousePressed    private void grigliaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMouseReleased        if (evt.isPopupTrigger()) {            System.out.println("popup");            pop.show(griglia, evt.getX(), evt.getY());        }    }//GEN-LAST:event_grigliaMouseReleased    private void toggle_fatturapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_fatturapaActionPerformed        view(dati_fattura_pa);    }//GEN-LAST:event_toggle_fatturapaActionPerformed    private void linkcodiceufficioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkcodiceufficioActionPerformed        try {            SwingUtils.openUrl(new URL("http://www.fatturapa.gov.it/export/fatturazione/it/c-21.htm"));        } catch (Exception err) {            SwingUtils.showExceptionMessage(this, err);        }    }//GEN-LAST:event_linkcodiceufficioActionPerformed    private void addFatt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFatt1ActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_FATTURA, codCliente, Db.TIPO_FATTURA_ACCOMPAGNATORIA);    }//GEN-LAST:event_addFatt1ActionPerformed    private void addFatt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFatt2ActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_FATTURA, codCliente, Db.TIPO_FATTURA_NOTA_DI_CREDITO);    }//GEN-LAST:event_addFatt2ActionPerformed    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed        note_ddt.setText(note_fatt.getText());        note_ordi.setText(note_fatt.getText());        note_prev.setText(note_fatt.getText());        dati.dbForzaModificati();        SwingUtils.showInfoMessage(this, "Copiato su DDT, Preventivi e Ordini");    }//GEN-LAST:event_jButton1ActionPerformed    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed        note_acq_ddt.setText(note_acq_fatt.getText());        note_acq_ordi.setText(note_acq_fatt.getText());        note_acq_prev.setText(note_acq_fatt.getText());        dati.dbForzaModificati();        SwingUtils.showInfoMessage(this, "Copiato su DDT, Preventivi e Ordini");    }//GEN-LAST:event_jButton2ActionPerformed    private void butAddContattiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAddContattiActionPerformed        JInternalFrameContatto frame = new JInternalFrameContatto(this);        frame.add();        main.getPadre().getDesktopPane().add(frame);        frame.show();    }//GEN-LAST:event_butAddContattiActionPerformed    private void tabContattiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabContattiMouseClicked        if (evt.getClickCount() >= 2) {            editContatto();        }    }//GEN-LAST:event_tabContattiMouseClicked    private void popMenuContattiAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuContattiAddActionPerformed        butAddContattiActionPerformed(null);    }//GEN-LAST:event_popMenuContattiAddActionPerformed    private void popMenuContattiDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuContattiDelActionPerformed        if (SwingUtils.showYesNoMessage(this, "Sicuro di eliminare il contatto ?")) {            ((CachingResultSetTableModel) tabContatti.getModel()).deleteRow(tabContatti.getSelectedRow());            dati.dbForzaModificati();        }    }//GEN-LAST:event_popMenuContattiDelActionPerformed    private void popMenuContattiModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuContattiModActionPerformed        editContatto();    }//GEN-LAST:event_popMenuContattiModActionPerformed    private void tabContattiMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabContattiMousePressed        if (evt.isPopupTrigger()) {            popupContatti.show(tabContatti, evt.getX(), evt.getY());        }    }//GEN-LAST:event_tabContattiMousePressed    private void tabContattiMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabContattiMouseReleased        if (evt.isPopupTrigger()) {            popupContatti.show(tabContatti, evt.getX(), evt.getY());        }    }//GEN-LAST:event_tabContattiMouseReleased    private void linkAggiungiFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkAggiungiFiltroActionPerformed        try {            JDialog dialog = InvoicexUtil.getDialogFiltriClieForn(this, true, filters);            dialog.pack();            InvoicexUtil.mettiSotto(dialog, linkAggiungiFiltro);            dialog.setVisible(true);            boolean conferma = dialog.getClass().getField("conferma").getBoolean(dialog);            if (conferma) {                filters = (List) dialog.getClass().getDeclaredMethod("getFilters").invoke(dialog);                InvoicexUtil.aggiornaFiltri(panFiltri, filters, linkAggiungiFiltro, filtriActionModifica, filtriActionRimuovi);                try {                    InvoicexUtil.salvaFiltri(filters, this.getClass().getName());                } catch (Exception e) {                    e.printStackTrace();                }                dbRefresh();                tabCent.setSelectedIndex(1);            }        } catch (Throwable t) {            t.printStackTrace();        }    }//GEN-LAST:event_linkAggiungiFiltroActionPerformed    private void menColAggAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggAgenteActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_agente", menColAggAgente.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_agente", false)) {            colsWidthPerc.put("agente", 10d);        }        griglia.columnsSizePercOrig = null;        dbRefresh();    }//GEN-LAST:event_menColAggAgenteActionPerformed    private void menColAggNazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggNazioneActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_nazione", menColAggNazione.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_nazione", false)) {            colsWidthPerc.put("nazione", 10d);        }        griglia.columnsSizePercOrig = null;        dbRefresh();    }//GEN-LAST:event_menColAggNazioneActionPerformed    private void menColAggContattoPrincipaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggContattoPrincipaleActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_contatto_principale", menColAggContattoPrincipale.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_contatto_principale", false)) {            colsWidthPerc.put("contatto principale", 10d);        }        griglia.columnsSizePercOrig = null;        dbRefresh();    }//GEN-LAST:event_menColAggContattoPrincipaleActionPerformed    private void menColAggCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggCatActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_cat", menColAggCat.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_cat", false)) {            colsWidthPerc.put("categoria", 10d);        }        griglia.columnsSizePercOrig = null;        dbRefresh();    }//GEN-LAST:event_menColAggCatActionPerformed    private void menColAggListinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggListinoActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_listino", menColAggListino.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_listino", false)) {            colsWidthPerc.put("listino", 10d);        }        griglia.columnsSizePercOrig = null;        dbRefresh();    }//GEN-LAST:event_menColAggListinoActionPerformed    private void menColAggNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggNoteActionPerformed        main.fileIni.setValue("pref", "ColAgg_clifor_note", menColAggNote.isSelected());        java.util.Hashtable colsWidthPerc = griglia.columnsSizePerc;        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_note", false)) {            colsWidthPerc.put("note", 15d);        }        griglia.columnsSizePercOrig = null;        dbRefresh();    }//GEN-LAST:event_menColAggNoteActionPerformed    public void controllaAgentePerTipoAnag() {        System.out.println(comTipo.getSelectedKey());        String tipo = "C";        try {            tipo = cu.s(comTipo.getSelectedKey());        } catch (Exception e) {        }        if (tipo.trim().equals("")) {            tipo = "E";        }        if (comTipo.getSelectedKey().equals("C")) {            comAgente.setEnabled(true);            provPred.setEnabled(true);            provPredForn.setEnabled(false);        } else if (comTipo.getSelectedKey().equals("F")) {            comAgente.setEnabled(false);            provPred.setEnabled(false);            provPredForn.setEnabled(true);        } else {            comAgente.setEnabled(true);            provPred.setEnabled(true);            provPredForn.setEnabled(true);        }    }    private void setNewStato() {        try {            System.out.println("text obsoleto:" + textObsoleto.getText());            int value = 0;            try {                value = Integer.parseInt(textObsoleto.getText());            } catch (NumberFormatException e) {            }            if (value == 1) {                chkObsoleto.setSelected(true);            } else {                chkObsoleto.setSelected(false);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (main.getPersonalContain("adesivi")) {                texTesto.setText(texNotaCliente.getText());                griglia_rapporti.dbOpen(Db.getConn(), "select id, cliente, data, data_avviso as 'data avviso', testo from clie_forn_rapporti where cliente = " + this.texCodi.getText());            }        }    }    public String updateLogoPreview(String file) {        if (file.equals("")) {            File f = new File(main.wd + "icone/nologo.png");            file = f.getAbsolutePath();        }        String text = "";        File ftest = new File(file);        if (ftest.exists()) {            ImageIcon icon = new ImageIcon(file);            int lar = icon.getIconWidth();            int alt = icon.getIconHeight();            int newalt = (grandezzaTooltipImage * alt) / lar;            text += "<html><img src='file:///" + ftest.getAbsolutePath() + "' width='" + grandezzaTooltipImage + "' height = '" + newalt + "'></html>";        } else {            text += "<html><b>file inesistente</b></html>";        }        return text;    }    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JButton addDdt;    private javax.swing.JButton addFatt;    private javax.swing.JButton addFatt1;    private javax.swing.JButton addFatt2;    private javax.swing.JButton addOrd;    private javax.swing.JButton aggiungi_riga_agenti;    private javax.swing.JButton btnAddRow;    private javax.swing.JButton btnDelRigt;    private javax.swing.JButton butAddContatti;    private javax.swing.JButton butBanca;    private javax.swing.JButton butDele;    private javax.swing.JButton butDest;    private javax.swing.JButton butDuplica;    private javax.swing.JButton butFind;    private javax.swing.JButton butFirs;    private javax.swing.JButton butImportExcel;    private javax.swing.JButton butLast;    private javax.swing.JButton butLogo;    private javax.swing.JButton butModiRow;    private javax.swing.JButton butNew;    private javax.swing.JButton butNext;    private javax.swing.JButton butPrev;    private javax.swing.JButton butSave;    private javax.swing.JButton butStampa;    private javax.swing.JButton butStampaDestinazione;    private javax.swing.JButton butStampaElenco;    private javax.swing.JButton butStampaPrivacy;    private javax.swing.JButton butUndo;    private tnxbeans.tnxCheckBox cheIncludiEmail;    private javax.swing.JCheckBox chkObsoleto;    private tnxbeans.tnxComboField comAgente;    private tnxbeans.tnxComboField comConsegna;    private javax.swing.JComboBox comFiltro1;    private tnxbeans.tnxComboField comIvaStandard;    private tnxbeans.tnxComboField comList;    private tnxbeans.tnxComboField comPaese;    private tnxbeans.tnxComboField comPaga;    private tnxbeans.tnxComboField comScarico;    private tnxbeans.tnxComboField comTipo;    private tnxbeans.tnxComboField comTipo2;    private tnxbeans.tnxComboField comTipoCausaleTrasporto;    private tnxbeans.tnxComboField comTipoConsegna;    public tnxbeans.tnxDbPanel dati;    private tnxbeans.tnxDbPanel datiAnagrafici;    public tnxbeans.tnxDbPanel dati_contabili;    private tnxbeans.tnxDbPanel dati_contatti;    private tnxbeans.tnxDbPanel dati_fattura_pa;    private tnxbeans.tnxDbPanel dati_indirizzo;    private tnxbeans.tnxDbPanel dati_note_opzioni;    private tnxbeans.tnxDbPanel dbpanel_consegna_e_scarico;    public tnxbeans.tnxDbGrid griglia;    public tnxbeans.tnxDbGrid griglia_rapporti;    private javax.swing.JButton jButton1;    private javax.swing.JButton jButton2;    private javax.swing.JButton jButton3;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel10;    private javax.swing.JLabel jLabel11;    private javax.swing.JLabel jLabel12;    private javax.swing.JLabel jLabel13;    private javax.swing.JLabel jLabel131;    private javax.swing.JLabel jLabel14;    private javax.swing.JLabel jLabel15;    private javax.swing.JLabel jLabel16;    private javax.swing.JLabel jLabel17;    private javax.swing.JLabel jLabel18;    private javax.swing.JLabel jLabel19;    private javax.swing.JLabel jLabel2;    private javax.swing.JLabel jLabel20;    private javax.swing.JLabel jLabel21;    private javax.swing.JLabel jLabel2111;    private javax.swing.JLabel jLabel212;    private javax.swing.JLabel jLabel213;    private javax.swing.JLabel jLabel214;    private javax.swing.JLabel jLabel215;    private javax.swing.JLabel jLabel216;    private javax.swing.JLabel jLabel217;    private javax.swing.JLabel jLabel218;    private javax.swing.JLabel jLabel219;    private javax.swing.JLabel jLabel22;    private javax.swing.JLabel jLabel2211;    private javax.swing.JLabel jLabel222;    private javax.swing.JLabel jLabel223;    private javax.swing.JLabel jLabel224;    private javax.swing.JLabel jLabel225;    private javax.swing.JLabel jLabel226;    private javax.swing.JLabel jLabel227;    private javax.swing.JLabel jLabel228;    private javax.swing.JLabel jLabel229;    private javax.swing.JLabel jLabel23;    private javax.swing.JLabel jLabel231;    private javax.swing.JLabel jLabel232;    private javax.swing.JLabel jLabel233;    private javax.swing.JLabel jLabel234;    private javax.swing.JLabel jLabel235;    private javax.swing.JLabel jLabel24;    private javax.swing.JLabel jLabel241;    private javax.swing.JLabel jLabel242;    private javax.swing.JLabel jLabel25;    private javax.swing.JLabel jLabel26;    private javax.swing.JLabel jLabel27;    private javax.swing.JLabel jLabel28;    private javax.swing.JLabel jLabel3;    private javax.swing.JLabel jLabel38;    private javax.swing.JLabel jLabel39;    private javax.swing.JLabel jLabel4;    private javax.swing.JLabel jLabel40;    private javax.swing.JLabel jLabel41;    private javax.swing.JLabel jLabel5;    private javax.swing.JLabel jLabel6;    private javax.swing.JLabel jLabel7;    private javax.swing.JLabel jLabel8;    private javax.swing.JLabel jLabel9;    private javax.swing.JPanel jPanel1;    private javax.swing.JPanel jPanel10;    private javax.swing.JPanel jPanel11;    private javax.swing.JPanel jPanel12;    private javax.swing.JPanel jPanel13;    private javax.swing.JPanel jPanel2;    private javax.swing.JPanel jPanel3;    private javax.swing.JPanel jPanel4;    private javax.swing.JPanel jPanel5;    private javax.swing.JPanel jPanel6;    private javax.swing.JPanel jPanel7;    private javax.swing.JPanel jPanel8;    private javax.swing.JPanel jPanel9;    private javax.swing.JPopupMenu jPopupMenu1;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JScrollPane jScrollPane2;    private javax.swing.JScrollPane jScrollPane3;    private javax.swing.JScrollPane jScrollPane4;    private javax.swing.JSeparator jSeparator1;    private javax.swing.JToolBar.Separator jSeparator2;    private javax.swing.JSeparator jSeparator3;    private javax.swing.JSeparator jSeparator4;    private javax.swing.JSeparator jSeparator5;    private javax.swing.JSeparator jSeparator6;    private javax.swing.JTabbedPane jTabbedPane1;    private javax.swing.JTabbedPane jTabbedPane2;    private javax.swing.JTabbedPane jTabbedPane3;    private javax.swing.JToolBar jToolBar1;    private javax.swing.JToolBar jToolBar2;    private javax.swing.JToolBar jToolBar3;    private javax.swing.JLabel labBancAbi;    private javax.swing.JLabel labBancCab;    private javax.swing.JLabel labGiornoPagamento;    private javax.swing.JLabel labIntePrezzi;    public javax.swing.JLabel lab_agenti_alternativi;    public org.jdesktop.swingx.JXHyperlink linkAggiungiFiltro;    private org.jdesktop.swingx.JXHyperlink linkcodiceufficio;    private javax.swing.JMenu menColAgg;    private javax.swing.JCheckBoxMenuItem menColAggAgente;    private javax.swing.JCheckBoxMenuItem menColAggCat;    private javax.swing.JCheckBoxMenuItem menColAggContattoPrincipale;    private javax.swing.JCheckBoxMenuItem menColAggIndirizzo;    private javax.swing.JCheckBoxMenuItem menColAggListino;    private javax.swing.JCheckBoxMenuItem menColAggNazione;    private javax.swing.JCheckBoxMenuItem menColAggNote;    private tnxbeans.tnxMemoField note1;    private tnxbeans.tnxMemoField note_acq_ddt;    private tnxbeans.tnxMemoField note_acq_fatt;    private tnxbeans.tnxMemoField note_acq_ordi;    private tnxbeans.tnxMemoField note_acq_prev;    private tnxbeans.tnxMemoField note_ddt;    private tnxbeans.tnxMemoField note_fatt;    private tnxbeans.tnxMemoField note_generiche;    private tnxbeans.tnxMemoField note_ordi;    private tnxbeans.tnxMemoField note_prev;    private javax.swing.JPanel panAlto;    private javax.swing.JPanel panDati;    private javax.swing.JPanel panElen;    public javax.swing.JPanel panFiltri;    private javax.swing.JPanel panPrezzi;    private javax.swing.JPanel panel_toggles;    public javax.swing.JPopupMenu pop;    private javax.swing.JMenuItem popMenuAdd;    private javax.swing.JMenuItem popMenuContattiAdd;    private javax.swing.JMenuItem popMenuContattiDel;    private javax.swing.JMenuItem popMenuContattiMod;    private javax.swing.JMenuItem popMenuDel;    private javax.swing.JMenuItem popMenuMod;    private javax.swing.JPopupMenu popupContatti;    private tnxbeans.tnxTextField provPred;    private tnxbeans.tnxTextField provPredForn;    private tnxbeans.tnxCheckBox raggruppa1;    private tnxbeans.tnxCheckBox raggruppa2;    private javax.swing.JScrollPane scroll_agenti_alternativi;    private javax.swing.JScrollPane scroll_dati;    public javax.swing.JLabel segna_posto_contabili_post;    public javax.swing.JLabel segna_posto_contabili_post2;    public javax.swing.JLabel segna_posto_contabili_pre;    public javax.swing.JLabel segna_posto_contabili_provvigioni1;    public tnxbeans.tnxCheckBox split_payment;    private javax.swing.JTabbedPane tabCent;    private javax.swing.JTable tabContatti;    private javax.swing.JTable tabPrezziCliente;    public javax.swing.JTable tab_agenti_alternativi;    private javax.swing.JScrollPane texAreaNoteCliente;    private tnxbeans.tnxTextField texBancAbi;    private tnxbeans.tnxTextField texBancCab;    private tnxbeans.tnxTextField texBancCc;    private tnxbeans.tnxTextField texBancCc2;    private tnxbeans.tnxTextField texCap;    private tnxbeans.tnxTextField texCap1;    private tnxbeans.tnxTextField texCell;    public tnxbeans.tnxTextField texCodi;    private tnxbeans.tnxTextField texCodiFisc;    private tnxbeans.tnxTextField texCodiList;    private tnxbeans.tnxTextField texEmai;    private tnxbeans.tnxTextField texFax;    private tnxbeans.tnxTextField texGiornoPagamento;    private tnxbeans.tnxTextField texIndi;    private tnxbeans.tnxTextField texIndi1;    private tnxbeans.tnxTextField texLoca;    private tnxbeans.tnxTextField texLogo;    private tnxbeans.tnxTextField texNotaCliente;    private tnxbeans.tnxTextField texPiva;    private tnxbeans.tnxTextField texProv;    private tnxbeans.tnxTextField texRagiSoci;    public tnxbeans.tnxTextField texScon1;    public tnxbeans.tnxTextField texScon2;    public tnxbeans.tnxTextField texScon3;    public tnxbeans.tnxTextField texScon4;    public tnxbeans.tnxTextField texScon5;    private javax.swing.JTextField texSearch;    private tnxbeans.tnxTextField texTele;    private javax.swing.JTextArea texTesto;    private tnxbeans.tnxTextField texWeb;    private tnxbeans.tnxTextField textObsoleto;    private tnxbeans.tnxCheckBox tnxCheckBox1;    private javax.swing.JToggleButton toggle_contabili;    private javax.swing.JToggleButton toggle_contatti;    private javax.swing.JToggleButton toggle_fatturapa;    private javax.swing.JToggleButton toggle_indirizzo;    private javax.swing.JToggleButton toggle_note_opzioni;    private tnxbeans.tnxCheckBox updateListini;    // End of variables declaration//GEN-END:variables    private void trovaAbi() {        try {            this.labBancAbi.setText(Db.lookUp(this.texBancAbi.getText(), "abi", "banche_abi").getString(2));        } catch (Exception err) {            this.labBancAbi.setText("");        }    }    private void trovaCab() {        try {            String sql = "";            sql += "select banche_cab.cap,";            sql += " banche_cab.indirizzo,";            sql += " comuni.comune,";            sql += " comuni.provincia";            sql += " from banche_cab left join comuni on banche_cab.codice_comune = comuni.codice";            sql += " where banche_cab.abi = " + Db.pc(this.texBancAbi.getText(), "VARCHAR");            sql += " and banche_cab.cab = " + Db.pc(this.texBancCab.getText(), "VARCHAR");            ResultSet temp = Db.openResultSet(sql);            temp.next();            this.labBancCab.setText(Db.nz(temp.getString(3), "") + ", " + Db.nz(temp.getString(2), ""));        } catch (Exception err) {            this.labBancCab.setText("");        }    }    private void showPrezziCliente() {        isShowPrezziCliente = true;        if (main.iniPrezziCliente == true) {            int cols = 4;            String listinoBase = main.getListinoBase();            if (listinoBase.equals("-1")) {                javax.swing.JOptionPane.showMessageDialog(null, "Non e' definito il listino Base, andare in Anagrafica Listini e selezionarne uno come base.", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);                return;            }            if (this.texCodi.getText().trim().length() == 0) {                return;            }            Cliente c = new Cliente(Integer.parseInt(this.texCodi.getText()));            listinoCliente = c.getListinoCliente(true);            labIntePrezzi.setText("<html>Ragione Sociale: " + texRagiSoci.getText() + "<br>Listino Base: " + listinoBase + "<br>Listino Cliente: " + listinoCliente + "</html>");            String sql = "select a.codice, a.descrizione, ap.prezzo as prezzoBase, apc.prezzo as prezzoCliente ";            sql += " from articoli a left join articoli_prezzi ap on a.codice = ap.articolo and ap.listino = " + Db.pc(listinoBase, Types.VARCHAR);            sql += " left join articoli_prezzi apc on a.codice = apc.articolo and apc.listino = " + Db.pc(listinoCliente, Types.VARCHAR);            sql += " order by a.codice";            System.out.println("sql listini:\n" + sql);            ResultSet articoli = Db.openResultSet(sql);            DefaultTableModel model = (DefaultTableModel) tabPrezziCliente.getModel();            model.addTableModelListener(new TableModelListener() {                public void tableChanged(TableModelEvent e) {                    if (!dati.isRefreshing && !isShowPrezziCliente) {                        dati.dbForzaModificati();                    }                }            });            model.setRowCount(0);            try {                while (articoli.next()) {                    Object[] row = new Object[cols];                    row[0] = articoli.getString(1);                    row[1] = articoli.getString(2);                    if (articoli.getObject("prezzoBase") == null) {                        row[2] = null;                    } else {                        row[2] = new Double(articoli.getDouble("prezzoBase"));                    }                    if (articoli.getObject("prezzoCliente") == null) {                        row[3] = null;                    } else {                        row[3] = new Double(articoli.getDouble("prezzoCliente"));                    }                    model.addRow(row);                }//                prezziClienteModel cacheModel = new prezziClienteModel(cache, colNames, dati);//                this.tabPrezziCliente.setModel(cacheModel);                //render sulla griglia per valuta                DefaultTableCellRenderer currencyRender = new DefaultTableCellRenderer() {                    @Override                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                        JLabel lab = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                        lab.setText(FormatUtils.formatEuroItaMax5(CastUtils.toDouble0(value)));                        lab.setHorizontalAlignment(JLabel.RIGHT);                        return lab;                    }                };                JTextField textEditor = new JTextField();                textEditor.setHorizontalAlignment(JTextField.RIGHT);                DefaultCellEditor currencyEditor = new DefaultCellEditor(textEditor) {                    @Override                    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                        JTextField text = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);                        text.setText(FormatUtils.formatEuroItaMax5(CastUtils.toDouble0(value)));                        text.setHorizontalAlignment(JTextField.RIGHT);                        return text;                    }                    @Override                    public Object getCellEditorValue() {                        return CastUtils.toDouble0(super.getCellEditorValue());                    }                };                this.tabPrezziCliente.getColumn("Prezzo Base").setCellRenderer(currencyRender);                this.tabPrezziCliente.getColumn("Prezzo Cliente").setCellRenderer(currencyRender);                this.tabPrezziCliente.getColumn("Prezzo Cliente").setCellEditor(currencyEditor);            } catch (java.sql.SQLException sqlErr) {                sqlErr.printStackTrace();            }        }        isShowPrezziCliente = false;    }    private void savePrezziCliente() {        String sql;        NumberFormat form = NumberFormat.getInstance();        String prezzo;        //prima dovrei controllare i prezzi inseriti        //prima elimino i prezzi da reinserire        sql = "delete from articoli_prezzi";        sql += " where listino = " + Db.pc(listinoCliente, java.sql.Types.VARCHAR);        if (Db.executeSql(sql) == true) {            for (int i = 0; i < this.tabPrezziCliente.getRowCount(); i++) {                if (tabPrezziCliente.getValueAt(i, 3) != null && tabPrezziCliente.getValueAt(i, 3).toString().length() > 0) {//                    try {//                        prezzo = String.valueOf(form.parse(tabPrezziCliente.getValueAt(i, 3).toString()));//                    } catch (Exception err) {//                        err.printStackTrace();//                        prezzo = "0";//                    }                    Double prezzod = 0d;                    try {                        prezzod = (Double) tabPrezziCliente.getValueAt(i, 3);                    } catch (Exception e) {                        e.printStackTrace();                    }                    sql = "insert into articoli_prezzi (articolo, listino, prezzo) values (";                    sql += Db.pc(tabPrezziCliente.getValueAt(i, 0), java.sql.Types.VARCHAR);                    sql += ", " + Db.pc(listinoCliente, java.sql.Types.VARCHAR);                    sql += ", " + Db.pc(prezzod, java.sql.Types.DECIMAL);                    sql += ")";                    Db.executeSql(sql);                }            }        } else {            javax.swing.JOptionPane.showMessageDialog(this, "Impossibile eliminare i prezzi precedenti", "Errore", javax.swing.JOptionPane.ERROR_MESSAGE);        }    }    public void trova(String codice) {        dati.ultimoCampo = "codice";        dati.ultimoValore = codice;        System.out.println("find exact:" + griglia.dbFindExact());    }    private String getCampiGriglia() {        String campi = "cf.codice";        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_cat", false)) {            campi += ", tcf.descrizione as categoria";        }        campi += ", cf.ragione_sociale,cf.telefono,cf.email, cf.indirizzo"                + ", cf.cap, cf.localita, cf.provincia,cf.cfiscale as 'cod fis'"                + ", cf.piva_cfiscale as 'partita iva', cf.pagamento";        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_agente", false)) {            campi += ", a.nome as agente";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_nazione", false)) {            campi += ", stati.nome as nazione";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_contatto_principale", false)) {            campi += ", contatti.nome as 'contatto principale'";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_listino", false)) {            campi += ", tl.descrizione as listino";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_note", false)) {            campi += ", cf.note";        }                return campi;    }    private void dbRefresh() {//        dati.dbRefresh();        String sql = "select " + getCampiGriglia() + " from clie_forn cf";        sql += " left join agenti a on cf.agente = a.id";        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_contatto_principale", false)) {            sql += " left join clie_forn_contatti contatti on cf.codice = contatti.id_clifor and contatti.tipo = 'Principale'";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_nazione", false)) {            sql += " left join stati on cf.paese = stati.codice1";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_cat", false)) {            sql += " left join tipi_clie_forn tcf on tcf.id = cf.tipo2";        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_listino", false)) {            sql += " left join tipi_listino tl on tl.codice = cf.codice_listino";        }        sql += " where 1 = 1 " + InvoicexUtil.getWhereFiltriClieForn(filters);        if (comFiltro1.getSelectedIndex() == 1) {            sql += " and (cf.tipo = 'C' or cf.tipo = 'E' or cf.tipo = 'F') ";        } else if (comFiltro1.getSelectedIndex() == 2) {            sql += " and (cf.tipo = 'C' or cf.tipo = 'E') ";        } else if (comFiltro1.getSelectedIndex() == 3) {            sql += " and (cf.tipo = 'F' or cf.tipo = 'E') ";        } else if (comFiltro1.getSelectedIndex() == 4) {            sql += " and cf.tipo = 'P'";        }        if (StringUtils.isNotBlank(texSearch.getText())) {            sql += "and ragione_sociale like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);        }        if (main.fileIni.getValueBoolean("pref", "ColAgg_clifor_contatto_principale", false)) {            sql += "\n group by cf.codice";        }        sql += " order by ragione_sociale";        int selrow = griglia.getSelectedRow();        this.griglia.dbOpen(Db.getConn(), sql, Db.INSTANCE);        griglia.getSelectionModel().setSelectionInterval(selrow, selrow);        griglia.dbSelezionaRiga();        griglia_rapporti.dbRefresh();    }    boolean view_pan = false;    private void view(tnxDbPanel pan) {        view(pan.getLocation().y);        view_pan = true;        getFocusTraversalPolicy().getFirstComponent(pan).requestFocus();    }    Timeline t1 = null;    private void view(int toy) {        if (toy < 0) {            toy = 0;        }        int maxtoy = dati.getHeight() - scroll_dati.getViewport().getHeight();        System.out.println("maxtoy:" + maxtoy);        if (toy > maxtoy) {            toy = maxtoy;        }        if (view_pan) {            return;        }        System.out.println("view " + toy + " t1:" + t1);        if (t1 != null && t1.getState() == Timeline.TimelineState.PLAYING_FORWARD) {            t1.abort();        }        t1 = new Timeline(this);        t1.setEase(new Spline(0.75f));        t1.setDuration(300);        t1.addPropertyToInterpolate("viewPos", (float) scroll_dati.getViewport().getViewPosition().y, (float) toy);        t1.addCallback(new TimelineCallbackAdapter() {            @Override            public void onTimelineStateChanged(TimelineState oldState, TimelineState newState, float durationFraction, float timelinePosition) {                super.onTimelineStateChanged(oldState, newState, durationFraction, timelinePosition);                if (newState == TimelineState.DONE) {                    view_pan = false;                }            }        });        t1.play();    }    public void setViewPos(float newValue) {        scroll_dati.getViewport().setViewPosition(new Point(0, (int) newValue));    }    public float getViewPos() {        return viewPos;    }    private void salvaAgentiAlternativi() {        //salvo le righe        try {            Connection conn = Db.getConn();            String sql = "delete from clie_forn_agenti where id_clifor = " + Db.pc(dati.dbGetField("codice"), Types.INTEGER);            System.out.println("sql delete alternativi = " + sql);            DbUtils.tryExecQuery(conn, sql);            //le rimetto            JTable righe = tab_agenti_alternativi;            for (int r = 0; r < righe.getRowCount(); r++) {                HashMap m = new HashMap();                try {                    m.put("id_clifor", cu.toInteger(dati.dbGetField("codice")));                    Integer id_agente = null;                    if (righe.getValueAt(r, 0) instanceof KeyValuePair) {                        KeyValuePair kv_agente = (KeyValuePair) righe.getValueAt(r, 0);                        id_agente = cu.toInteger(kv_agente.key);                    } else if (righe.getValueAt(r, 0) instanceof Integer) {                        id_agente = cu.toInteger(righe.getValueAt(r, 0));                    } else {                        System.out.println("righe.getValueAt(r, 0) = " + righe.getValueAt(r, 0));                    }                    if (id_agente != null) {                        m.put("id_agente", cu.toInteger(id_agente));                        m.put("provvigione", cu.toDouble(righe.getValueAt(r, 1)));                        sql = "insert into ";                        sql += " clie_forn_agenti set ";                        sql += DbUtils.prepareSqlFromMap(m);                        System.out.println("sql agenti alternativi = " + sql);                        DbUtils.tryExecQuery(conn, sql);                    }                } catch (Exception e2) {                    e2.printStackTrace();                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void caricaAgentiAlternativi() {        if (main.getPersonalContain("medcomp")) {            ((DefaultTableModel) tab_agenti_alternativi.getModel()).setRowCount(0);            if (dati.isOnSomeRecord) {                Integer id = CastUtils.toInteger(dati.dbGetField("codice"));                System.out.println("id = " + id);                String sql_righe = "select id_agente, provvigione from clie_forn_agenti cfa left join agenti a on cfa.id_agente = a.id"                        + " where id_clifor = " + id                        + " order by a.nome";                try {                    TableUtils.loadData(Db.getConn(), sql_righe, (DefaultTableModel) tab_agenti_alternativi.getModel());                    int quante = 10 - tab_agenti_alternativi.getRowCount();                    for (int i = 0; i < quante; i++) {                        ((DefaultTableModel) tab_agenti_alternativi.getModel()).addRow(new Object[tab_agenti_alternativi.getColumnCount()]);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    public CachingResultSetTableModel contattiModel = null;    public void salvaContatti() {        //elimino solo record non piÃ¹ presenti tramite confronto con list_prezzi_pre        try {            HashMap contatti_post = DbUtils.getListMapMapFromTableModel(contattiModel, "id");            List<Map> diffs = Sync.getDifferences(contatti_pre, contatti_post);            for (Map mdiff : diffs) {                if (Sync.INSERT.equals(mdiff.get("type"))) {                    ((Map)mdiff.get("post")).put("id_clifor", texCodi.getText());                }            }            System.out.println("diffs = " + diffs);            Sync.execDifferences(Db.getConn(), diffs, "clie_forn_contatti");            //salvo il contatto principale sulla tabella clie_forn            List<Map> list = dbu.getListMap(Db.getConn(), "select nome, telefono from clie_forn_contatti where id_clifor = " + texCodi.getText() + " and tipo = 'Principale' order by id limit 1");            if (list.size() == 0) {                list = dbu.getListMap(Db.getConn(), "select nome, telefono from clie_forn_contatti where id_clifor = " + texCodi.getText() + " order by id limit 1");            }            String sql;            if (list.size() > 0) {                String nome = cu.s(list.get(0).get("nome"));                String tel = cu.s(list.get(0).get("telefono"));                sql = "update clie_forn set persona_riferimento = " + dbu.sql(nome) + ", telefono_riferimento = " + dbu.sql(tel) + " where codice = " + dbu.sql(texCodi.getText());            } else {                sql = "update clie_forn set persona_riferimento = '', telefono_riferimento = '' where codice = " + dbu.sql(texCodi.getText());            }            try {                dbu.tryExecQuery(Db.getConn(), sql);            } catch (Exception e) {                SwingUtils.showExceptionMessage(this, e);            }            try {                //Sync memorizzo tabella per confronto al salvataggio                //ricaricare contattiModel prima per prendere gli id assegnati ai nuovi contatti                caricaContatti();                contatti_pre = DbUtils.getListMapMapFromTableModel(contattiModel, "id");            } catch (Exception ex) {                SwingUtils.showExceptionMessage(this, ex);            }        } catch (Exception e) {            SwingUtils.showExceptionMessage(this, e);        }    }    public void caricaContatti() {        try {            ResultSet r = dbu.tryOpenResultSet(Db.getConn(), "select * from clie_forn_contatti where id_clifor = " + dbu.sql(texCodi.getText()) + " order by nome");            contattiModel = new CachingResultSetTableModel(r);            tabContatti.setModel(contattiModel);            contatti_pre = DbUtils.getListMapMapFromTableModel(contattiModel, "id");            //imposto colonne            TableUtils.hideColumnExcept(tabContatti, "tipo", "nome", "telefono", "email");        } catch (Exception e) {            SwingUtils.showExceptionMessage(this, e);        }    }    private void editContatto() {        JInternalFrameContatto frame = new JInternalFrameContatto(this);        Map row = TableUtils.getMap(tabContatti, tabContatti.getSelectedRow());        frame.edit(0, tabContatti.getSelectedRow(), row);        main.getPadre().getDesktopPane().add(frame);        frame.show();    }    public static class ClientiMyTable extends JTable {        //  Place cell in edit mode when it 'gains focus'        public void changeSelection(                int row, int column, boolean toggle, boolean extend) {            super.changeSelection(row, column, toggle, extend);            if (editCellAt(row, column)) {                getEditorComponent().requestFocusInWindow();            }        }        //  Select the text when the cell starts editing        //  a) text will be replaced when you start typing in a cell        //  b) text will be selected when you use F2 to start editing        //  c) text will be selected when double clicking to start editing        public boolean editCellAt(int row, int column, EventObject e) {            boolean result = super.editCellAt(row, column, e);            final Component editor = getEditorComponent();            if (editor != null && editor instanceof JTextComponent) {                if (e == null) {                    ((JTextComponent) editor).selectAll();                } else {                    SwingUtilities.invokeLater(new Runnable() {                        public void run() {                            ((JTextComponent) editor).selectAll();                        }                    });                }            }            return result;        }        //  Select the text when the cell starts editing        //  a) text will be replaced when you start typing in a cell        //  b) text will be selected when you use F2 to start editing        //  c) caret is placed at end of text when double clicking to start editing        public Component prepareEditor(                TableCellEditor editor, int row, int column) {            Component c = super.prepareEditor(editor, row, column);            if (c instanceof JTextComponent) {                System.out.println("prepare " + ((JTextField) c).getText());                ((JTextField) c).selectAll();            }            return c;        }    }}class prezziClienteModel        extends CachedTableModel {    private tnxDbPanel panel;    DecimalFormat form = new DecimalFormat("#,##0.00");    public prezziClienteModel(java.util.ArrayList rows, Object[] cols, tnxDbPanel panel) {        super(rows, cols);        this.panel = panel;    }    public boolean isCellEditable(int r, int c) {        if (c == 3) {            return true;        }        return false;    }    public Object getValueAt(int r, int c) {        if (r < cache.size()) {            if (c == 2 || c == 3) {                try {                    return form.format(((Object[]) cache.get(r))[c]);                } catch (Exception err) {                    //err.printStackTrace();                    return ((Object[]) cache.get(r))[c];                }            } else {                return ((Object[]) cache.get(r))[c];            }        } else {            return null;        }    }    public void setValueAt(Object value, int r, int c) {        super.setValueAt(value, r, c);        if (panel.dbStato != panel.DB_INSERIMENTO) {            panel.dbCambiaStato(panel.DB_MODIFICA);        }    }}class MyPanel extends tnxDbPanel implements Scrollable {    @Override    public Dimension getPreferredScrollableViewportSize() {        return new Dimension(300, 300);    }    @Override    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {        return 50;    }    @Override    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {        return 100;    }    @Override    public boolean getScrollableTracksViewportWidth() {        return true;    }    @Override    public boolean getScrollableTracksViewportHeight() {        return false;    }}