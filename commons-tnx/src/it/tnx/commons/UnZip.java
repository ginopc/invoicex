/** * Invoicex * Copyright (c) 2005,2006,2007 Marco Ceccarelli, Tnx snc * * Questo software ï¿½ soggetto, e deve essere distribuito con la licenza * GNU General Public License, Version 2. La licenza accompagna il software * o potete trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the * GNU General Public License, Version 2. The license should have * accompanied the software or you may obtain a copy of the license * from the Free Software Foundation at http://www.fsf.org . * * -- * Marco Ceccarelli (m.ceccarelli@tnx.it) * Tnx snc (http://www.tnx.it) * */package it.tnx.commons;import it.tnx.commons.agg.UnzipWorker;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.util.Enumeration;import java.util.zip.ZipEntry;import java.util.zip.ZipException;import java.util.zip.ZipFile;import javax.swing.JOptionPane;public class UnZip {    public static ZipFile zf;    public static final int EOF = -1;    public static void main(String[] argv) {        //main(argv, null);        File f = new File("C:\\Users\\mceccarelli\\.invoicex\\vnc\\ControlloRemotoTNX\\ControlloRemotoTNX.zip");    }    public static void main(String[] argv, UnzipWorker work) {        Enumeration enum1;        if (argv.length == 1) {            try {                zf = new ZipFile(new File(argv[0]).getAbsolutePath());                enum1 = zf.entries();                while (enum1.hasMoreElements()) {                    ZipEntry target = (ZipEntry) enum1.nextElement();                    System.out.print(target.getName() + " .");                    if (work != null) {                        work.publicPublish("Unzip " + target);                    }                    saveEntry(target, work);                    if (work != null) {                        work.publicPublish(target.getName() + " unzipped");                    }                    System.out.println(". unpacked");                }            } catch (FileNotFoundException e) {                if (work != null) {                    work.publicPublish(e.toString());                }                System.out.println("zipfile not found");            } catch (ZipException e) {                if (work != null) {                    work.publicPublish(e.toString());                }                System.out.println("zip error...");                e.printStackTrace();            } catch (IOException e) {                if (work != null) {                    work.publicPublish(e.toString());                }                System.out.println("IO error...");            }        } else {            //JOptionPane.showMessageDialog(null, "Unzip, mancano i parametri");            System.out.println("Usage:java UnZip zipfile");        }    }    public static void unzip(File filezip, String dst) {        Enumeration enum1;        try {            zf = new ZipFile(filezip.getAbsolutePath());            enum1 = zf.entries();            while (enum1.hasMoreElements()) {                ZipEntry target = (ZipEntry) enum1.nextElement();                System.out.print(target.getName() + " .");                saveEntry(target, null, dst);                System.out.println(". unpacked");            }        } catch (FileNotFoundException e) {            System.out.println("zipfile not found");        } catch (ZipException e) {            System.out.println("zip error...");            e.printStackTrace();        } catch (IOException e) {            System.out.println("IO error...");        }    }    public static void saveEntry(ZipEntry target, UnzipWorker work) throws ZipException, IOException {        saveEntry(target, work, null);    }    public static void saveEntry(ZipEntry target, UnzipWorker work, String dst) throws ZipException, IOException {        try {            File file = new File(target.getName());            if (dst != null) {                file = new File(dst + target.getName());            }            if (target.isDirectory()) {                file.mkdirs();            } else {                InputStream is = zf.getInputStream(target);                BufferedInputStream bis = new BufferedInputStream(is);                if (file.getParent() != null) {                    File dir = new File(file.getParent());                    dir.mkdirs();                }                FileOutputStream fos = new FileOutputStream(file);                BufferedOutputStream bos = new BufferedOutputStream(fos);                int c;                byte[] buff = new byte[1204 * 32];                int writed = 0;                //while ((c = bis.read()) != EOF) {                int towrite = (int) target.getSize();                while ((c = bis.read(buff)) > 0) {                    writed += c;                    //bos.write((byte)c);                    bos.write(buff, 0, c);                    if (work != null) {                        work.publicPublish("Unzip " + target + " " + (writed * 100 / towrite) + "%");                    }                }                bos.close();                fos.close();            }        } catch (ZipException e) {            if (work != null) {                work.publicPublish(e.toString());            }            throw e;        } catch (IOException e) {            if (work != null) {                work.publicPublish(e.toString());            }            throw e;        }    }}